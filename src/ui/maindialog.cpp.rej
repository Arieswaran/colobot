diff a/src/ui/maindialog.cpp b/src/ui/maindialog.cpp	(rejected hunks)
@@ -21,10 +21,16 @@
 #include "iman.h"
 #include "restext.h"
 #include "math3d.h"
+#include "recorder.h"
 #include "particule.h"
+#include "object.h"
+#include "physics.h"
+#include "motion.h"
 #include "interface.h"
 #include "button.h"
 #include "color.h"
+#include "gauge.h"
+#include "pesetas.h"
 #include "check.h"
 #include "key.h"
 #include "group.h"
@@ -37,7 +43,9 @@
 #include "edit.h"
 #include "editvalue.h"
 #include "text.h"
+#include "array.h"
 #include "camera.h"
+#include "pyro.h"
 #include "sound.h"
 #include "cmdtoken.h"
 #include "robotmain.h"
@@ -46,84 +54,32 @@
 
 
 #define KEY_VISIBLE        6       // nb de touches redéfinissables visibles
-
-#if _SCHOOL & _TEEN
-#define KEY_TOTAL      13      // nb total de touches redéfinissables
-#else
-#define KEY_TOTAL      21      // nb total de touches redéfinissables
-#endif
-
+#define KEY_TOTAL      8       // nb total de touches redéfinissables
 #define WELCOME_LENGTH 6.0f
 
 
 
-static int perso_color[3*10*3] =
-{
-   // cheveux :
-   193, 221, 226,  // blanc
-   255, 255, 181,  // jaune
-   204, 155,  84,  // châtin
-   165,  48,  10,  // roux
-   140,  75,  84,  // brun
-    83,  64,  51,  // brun
-    90,  95,  85,  // noir
-    85,  48,   9,  // brun
-    60,   0,  23,  // noir
-     0,   0,   0,  // 
-   // combinaison :
-   203, 206, 204,  // blanc sale
-     0, 205, 203,  // bleuté
-   108, 176,   0,  // verdatre
-   207, 207,  32,  // jaune
-   170, 141,   0,  // orangé
-   108,  84,   0,  // brun
-     0,  84, 136,  // bleuté
-    56,  61, 146,  // bleuté
-    56,  56,  56,  // noir
-     0,   0,   0,  // 
-   // bandes :
-   255, 255, 255,  // blanc
-   255, 255,   0,  // jaune
-   255, 132,   1,  // orange
-   255,   0, 255,  // magenta
-   255,   0,   0,  // rouge
-     0, 255,   0,  // vert
-     0, 255, 255,  // cyan
-     0,   0, 255,  // bleu
-    70,  51,  84,  // foncé
-     0,   0,   0,  // 
-};
-
 
-#if _NET
-// Vérifie si la clé "school" est présente dans la base de registres.
-
-BOOL SchoolCheck()
+static int perso_color[3*15] =
 {
-   HKEY    key;
-   char    buffer[100];
-   LONG    i;
-   DWORD   type, len;
-
-   i = RegOpenKeyEx(HKEY_LOCAL_MACHINE,
-#if _NEWLOOK
-                    "Software\\Epsitec\\CeeBot\\Setup",
-#else
-                    "Software\\Epsitec\\Colobot\\Setup",
-#endif
-                    0, KEY_READ, &key);
-   if ( i != ERROR_SUCCESS )  return FALSE;
-
-   type = REG_SZ;
-   len  = sizeof(buffer);
-   i = RegQueryValueEx(key, "School", NULL, &type, (LPBYTE)buffer, &len);
-   if ( i != ERROR_SUCCESS || type != REG_SZ )  return FALSE;
+   255, 209,  67,  // jaune-orange (car01)
+    72, 153, 236,  // bleu (car03)
+   196,  55,  61,  // rouge (car04)
+    64,  64,  64,  // gris-noir (car05)
+   143,  88, 224,  // violet (car02)
+   230, 251, 252,  // blanc-cyan
+    93,  13,  13,  // brun
+   238, 132, 214,  // rose (car06)
+   255, 136,  39,  // orange
+    20, 192,  20,  // vert
+   255, 255,   0,  // jaune (car08)
+     0,  53, 226,  // bleu royal
+    89,  34, 172,  // violet foncé (car07)
+   126, 186, 244,  // cyan
+   149, 149, 149,  // gris
+};
 
-   if ( strcmp(buffer, "ToBoLoC") != 0 )  return FALSE;
 
-   return TRUE;
-}
-#endif
 
 
 // Constructeur de l'application robot.
@@ -145,51 +101,44 @@ CMainDialog::CMainDialog(CInstanceManager* iMan)
 
    m_phase        = PHASE_NAME;
    m_phaseSetup   = PHASE_SETUPg;
-   m_phaseTerm    = PHASE_TRAINER;
-   m_sceneRead[0] = 0;
-   m_stackRead[0] = 0;
+   m_phaseTerm    = PHASE_MISSION;
+   m_phasePerso   = PHASE_MISSION;
    m_sceneName[0] = 0;
+   m_sceneBase[0] = 0;
    m_sceneRank    = 0;
-   m_bSceneSoluce = FALSE;
    m_bSimulSetup  = FALSE;
-#if _NET
-   m_accessEnable = SchoolCheck();
-   m_accessMission= FALSE;
-   m_accessUser   = FALSE;
-#else
    m_accessEnable = TRUE;
    m_accessMission= TRUE;
    m_accessUser   = TRUE;
-#endif
    m_bDeleteGamer = TRUE;
+   m_bGhostExist  = FALSE;
+   m_bGhostEnable = TRUE;
+   m_bPesetas     = FALSE;
 
-   for ( i=0 ; i<10 ; i++ )
+   for ( i=0 ; i<6 ; i++ )
    {
-       m_chap[i] = 0;
        m_sel[i] = 0;
    }
    m_index = 0;
-   m_maxList = 0;
 
-   ZeroMemory(&m_perso, sizeof(GamerPerso));
-   DefPerso();
-   
+   FlushPerso();
+
    m_bTooltip       = TRUE;
    m_bGlint         = TRUE;
    m_bRain          = TRUE;
-   m_bSoluce4       = TRUE;
    m_bMovies        = TRUE;
    m_bNiceReset     = TRUE;
    m_bHimselfDamage = TRUE;
-#if _TEEN
-   m_bCameraScroll  = FALSE;
-#else
-   m_bCameraScroll  = TRUE;
-#endif
-   m_bCameraInvertX = FALSE;
-   m_bCameraInvertY = FALSE;
    m_bEffect        = TRUE;
+   m_bFlash         = TRUE;
+   m_bMotorBlast    = TRUE;
+   m_bDialogCreate  = FALSE;
+   m_bDialogDelete  = FALSE;
+   m_bDialogFile    = FALSE;
+   m_bDialogKid     = FALSE;
+   m_bDuel          = FALSE;
    m_shotDelay      = 0;
+   m_defCamera      = CAMERA_BACK;
 
    m_glintMouse = FPOINT(0.0f, 0.0f);
    m_glintTime  = 1000.0f;
@@ -205,6 +154,7 @@ CMainDialog::CMainDialog(CInstanceManager* iMan)
    strcpy(m_publicDir,   "program");
    strcpy(m_userDir,     "user");
    strcpy(m_filesDir,    "files");
+   strcpy(m_duelDir,     "duel");
 
    m_bDialog = FALSE;
 }
@@ -222,21 +172,22 @@ void CMainDialog::ChangePhase(Phase phase)
 {
    CWindow*        pw;
    CEdit*          pe;
-   CEditValue*     pv;
    CLabel*         pl;
    CList*          pli;
+   CArray*         pa;
    CCheck*         pc;
    CScroll*        ps;
    CSlider*        psl;
    CButton*        pb;
    CColor*         pco;
+   CGauge*         pgg;
+   CPesetas*       pp;
    CGroup*         pg;
    CImage*         pi;
    FPOINT          pos, dim, ddim;
    float           ox, oy, sx, sy;
    char            name[100];
-   char*           gamer;
-   int             res, i, j;
+   int             res, i;
 
    m_camera->SetType(CAMERA_DIALOG);
    m_engine->SetOverFront(FALSE);
@@ -246,6 +197,10 @@ void CMainDialog::ChangePhase(Phase phase)
    {
        phase = m_phaseTerm;
    }
+   if ( phase == PHASE_CAR && m_phase != PHASE_READ )
+   {
+       m_phasePerso = m_phase;
+   }
    m_phase = phase;  // copie l'info de CRobotMain
    m_phaseTime = 0.0f;
 
@@ -262,11 +217,7 @@ void CMainDialog::ChangePhase(Phase phase)
        pos.y  = 0.10f;
        ddim.x = 0.30f;
        ddim.y = 0.80f;
-#if _TEEN
-       pw = m_interface->CreateWindows(pos, ddim, 12, EVENT_WINDOW5);
-#else
-       pw = m_interface->CreateWindows(pos, ddim, 10, EVENT_WINDOW5);
-#endif
+       pw = m_interface->CreateWindows(pos, ddim, 12, EVENT_WINDOW4);
        GetResource(RES_TEXT, RT_TITLE_INIT, name);
        pw->SetName(name);
 
@@ -281,141 +232,76 @@ void CMainDialog::ChangePhase(Phase phase)
        ddim.y = 0.30f;
        pw->CreateGroup(pos, ddim, 4, EVENT_INTERFACE_GLINTr);  // coin bleu
 
-#if _SCHOOL
+#if _SPANISH
        ddim.x = 0.20f;
-       ddim.y = dim.y*2.4f;
+       ddim.y = dim.y*1;
        pos.x = 0.40f;
-       pos.y = oy+sy*7.9f;
-       pg = pw->CreateGroup(pos, ddim, 24, EVENT_LABEL1);  // orangé
-       pg->SetState(STATE_SHADOW);
-       pos.y = oy+sy*3.9f;
-       pg = pw->CreateGroup(pos, ddim, 25, EVENT_LABEL1);  // orange
-       pg->SetState(STATE_SHADOW);
-       ddim.y = dim.y*1.2f;
-       pos.y = oy+sy*1.9f;
-       pg = pw->CreateGroup(pos, ddim, 26, EVENT_LABEL1);  // rouge
-       pg->SetState(STATE_SHADOW);
 #else
-       ddim.x = 0.20f;
-       ddim.y = dim.y*2.4f;
-       pos.x = 0.40f;
-       if ( m_accessEnable && m_accessMission )
-       {
-           pos.y = oy+sy*9.1f;
-           pg = pw->CreateGroup(pos, ddim, 23, EVENT_LABEL1);  // jaune
-           pg->SetState(STATE_SHADOW);
-       }
-       pos.y = oy+sy*6.8f;
-       pg = pw->CreateGroup(pos, ddim, 24, EVENT_LABEL1);  // orangé
-       pg->SetState(STATE_SHADOW);
-       pos.y = oy+sy*3.9f;
-       pg = pw->CreateGroup(pos, ddim, 25, EVENT_LABEL1);  // orange
-       pg->SetState(STATE_SHADOW);
-       ddim.y = dim.y*1.2f;
-       pos.y = oy+sy*1.9f;
-       pg = pw->CreateGroup(pos, ddim, 26, EVENT_LABEL1);  // rouge
-       pg->SetState(STATE_SHADOW);
-#endif
-
-#if _SCHOOL
        ddim.x = 0.18f;
        ddim.y = dim.y*1;
        pos.x = 0.41f;
-       pos.y = oy+sy*9.1f;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_TRAINER);
-       pb->SetState(STATE_SHADOW);
-
-       pos.y = oy+sy*8.0f;
-#if _TEEN
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_TEEN);
-#else
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_DEFI);
-#endif
-#if _CEEBOTDEMO
-       pb->ClearState(STATE_ENABLE);
 #endif
-       pb->SetState(STATE_SHADOW);
-#else
-       ddim.x = 0.18f;
-       ddim.y = dim.y*1;
-       pos.x = 0.41f;
-
-       if ( m_accessEnable && m_accessMission )
-       {
-           pos.y = oy+sy*10.3f;
-           pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_MISSION);
-           pb->SetState(STATE_SHADOW);
 
-           pos.y = oy+sy*9.2f;
-           pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_FREE);
-           pb->SetState(STATE_SHADOW);
-       }
+       pos.y = oy+sy*9.7f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_MISSION);
+       pb->SetFontType(FONT_HILITE);
+       pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(0);
+       pb->SetFocus(TRUE);
 
-       pos.y = oy+sy*8.0f;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_TRAINER);
+       pos.y = oy+sy*8.6f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_FREE);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(1);
 
-       pos.y = oy+sy*6.9f;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_DEFI);
+       pos.y = oy+sy*7.5f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_DUEL);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
-#endif
+       pb->SetTabOrder(2);
 
-       if ( m_engine->RetSetupMode() )
-       {
-           pos.y = oy+sy*5.1f;
-           pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_SETUP);
-           pb->SetState(STATE_SHADOW);
-       }
+       pos.y = oy+sy*5.7f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_SETUP);
+       pb->SetFontType(FONT_HILITE);
+       pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(3);
 
-       pos.y = oy+sy*4.0f;
+       pos.y = oy+sy*4.6f;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_NAME);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(4);
 
-       pos.y = oy+sy*2.0f;
+       pos.y = oy+sy*2.8f;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_QUIT);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
-
-#if !_DEMO & !_SCHOOL
-       if ( m_accessEnable && m_accessUser )
-       {
-           pos.x  = 447.0f/640.0f;
-           pos.y  = 313.0f/480.0f;
-           ddim.x = 0.09f;
-#if _POLISH
-           pos.x  -=  5.0f/640.0f;
-           ddim.x += 10.0f/640.0f;
-#endif
-           pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_USER);
-           pb->SetState(STATE_SHADOW);
-       }
-#endif
+       pb->SetTabOrder(5);
 
        if ( m_engine->RetDebugMode() )
        {
-           pos.x  = 139.0f/640.0f;
-           pos.y  = 313.0f/480.0f;
+           pos.x  = 20.0f/640.0f;
+           pos.y  = 20.0f/480.0f;
            ddim.x = 0.09f;
            pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_PROTO);
+           pb->SetFontType(FONT_HILITE);
            pb->SetState(STATE_SHADOW);
        }
 
        pos.x  = 0.40f;
        ddim.x = 0.20f;
-       pos.y  =  26.0f/480.0f;
+       pos.y  =  64.0f/480.0f;
        ddim.y =  12.0f/480.0f;
-       pg = pw->CreateGroup(pos, ddim, 1, EVENT_LABEL1);
-       pg->SetState(STATE_SHADOW);
-       pos.y -=  5.0f/480.0f;
-#if _WG
-       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL1, " ");
-#else
-#if _NEWLOOK
-       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL1, "www.epsitec.ch");
-#else
-       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL1, "www.ceebot.com");
-#endif
-#endif
-       pl->SetFontType(FONT_COURIER);
+       GetResource(RES_TEXT, RT_GENERIC_DEV1, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL1, name);
+       pl->SetFontType(FONT_COLOBOT);
+       pl->SetFontSize(8.0f);
+
+       pos.y -=  12.0f/480.0f;
+       GetResource(RES_TEXT, RT_GENERIC_DEV2, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL2, name);
+       pl->SetFontType(FONT_COLOBOT);
        pl->SetFontSize(8.0f);
 
        m_engine->SetBackground("inter01.tga", 0,0, 0,0, TRUE, TRUE);
@@ -424,27 +310,14 @@ void CMainDialog::ChangePhase(Phase phase)
 
    if ( m_phase == PHASE_NAME )
    {
-       pos.x = 0.10f;
-       pos.y = 0.10f;
+       pos.x  = 0.10f;
+       pos.y  = 0.10f;
        ddim.x = 0.80f;
        ddim.y = 0.80f;
-       pw = m_interface->CreateWindows(pos, ddim, 12, EVENT_WINDOW5);
+       pw = m_interface->CreateWindows(pos, ddim, 12, EVENT_WINDOW4);
        GetResource(RES_TEXT, RT_TITLE_NAME, name);
        pw->SetName(name);
 
-#if _NEWLOOK
-       pos.x  =  80.0f/640.0f;
-       pos.y  =  93.0f/480.0f;
-       ddim.x = 285.0f/640.0f;
-       ddim.y = 266.0f/480.0f;
-       pg = pw->CreateGroup(pos, ddim, 23, EVENT_LABEL1);  // bleu
-       pg->SetState(STATE_SHADOW);
-       pos.x  = 372.0f/640.0f;
-       ddim.x = 188.0f/640.0f;
-       pg = pw->CreateGroup(pos, ddim, 26, EVENT_LABEL1);  // violet
-       pg->SetState(STATE_SHADOW);
-#endif
-
        pos.x  = 0.10f;
        pos.y  = 0.40f;
        ddim.x = 0.50f;
@@ -456,531 +329,475 @@ void CMainDialog::ChangePhase(Phase phase)
        ddim.y = 0.50f;
        pw->CreateGroup(pos, ddim, 4, EVENT_INTERFACE_GLINTr);  // coin bleu
 
-       pos.x =  60.0f/640.0f;
-       pos.y = 313.0f/480.0f;
+       pos.x  = 140.0f/640.0f;
+       pos.y  = 310.0f/480.0f;
        ddim.x = 120.0f/640.0f;
-       ddim.y =  32.0f/480.0f;
-       GetResource(RES_EVENT, EVENT_INTERFACE_NLABEL, name);
-       pl = pw->CreateLabel(pos, ddim, -1, EVENT_INTERFACE_NLABEL, name);
-       pl->SetJustif(-1);
+       ddim.y =  16.0f/480.0f;
+       GetResource(RES_TEXT, RT_PERSO_LIST, name);
+       pl = pw->CreateLabel(pos, ddim, -1, EVENT_LABEL1, name);
+       pl->SetJustif(1);
 
-       pos.x = 200.0f/640.0f;
-       pos.y = 320.0f/480.0f;
+       pos.x  = 140.0f/640.0f;
+       pos.y  = 150.0f/480.0f;
        ddim.x = 160.0f/640.0f;
-       ddim.y =  32.0f/480.0f;
-       pg = pw->CreateGroup(pos, ddim, 7, EVENT_LABEL1);
-       pg->SetState(STATE_SHADOW);
+       ddim.y = 160.0f/480.0f;
+       pli = pw->CreateList(pos, ddim, 0, EVENT_INTERFACE_NLIST);
+       pli->SetState(STATE_DEFAULT);
+       pli->SetState(STATE_SHADOW);
+       pli->SetTabOrder(1);
 
-       pos.x = 207.0f/640.0f;
-       pos.y = 328.0f/480.0f;
-       ddim.x = 144.0f/640.0f;
+       pos.x  = 380.0f/640.0f;
+       pos.y  = 132.0f/480.0f;
+       ddim.x = 140.0f/640.0f;
+       ddim.y = 124.0f/480.0f;
+       pw->CreateGroup(pos, ddim, 28, EVENT_LABEL1);
+
+       pos.x  = 390.0f/640.0f;
+       pos.y  = 226.0f/480.0f;
+       ddim.x = 190.0f/640.0f;
+       ddim.y =  16.0f/480.0f;
+       GetResource(RES_TEXT, RT_PERSO_LEVEL, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL2, name);
+       pl->SetFontSize(9.0f);
+       pl->SetJustif(1);
+
+       pos.x  = 390.0f/640.0f;
+       pos.y  = 210.0f/480.0f;
+       ddim.x = 100.0f/640.0f;
+       ddim.y =  14.0f/480.0f;
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_LEVEL1);
+       pc->SetFontSize(9.0f);
+       pc->SetState(STATE_RADIO);
+       pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(4);
+       pos.y -= 20.0f/480.0f;
+       ddim.y =  16.0f/480.0f;
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_LEVEL2);
+       pc->SetFontSize(10.0f);
+       pc->SetState(STATE_RADIO);
+       pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(5);
+       pos.y -= 22.0f/480.0f;
        ddim.y =  18.0f/480.0f;
-       pe = pw->CreateEdit(pos, ddim, 0, EVENT_INTERFACE_NEDIT);
-       pe->SetMaxChar(15);
-       gamer = m_main->RetGamerName();
-       if ( gamer[0] == 0 )
-       {
-           GetResource(RES_TEXT, RT_NAME_DEFAULT, name);
-       }
-       else
-       {
-           strcpy(name, gamer);
-       }
-       pe->SetText(name);
-       pe->SetCursor(strlen(name), 0);
-       pe->SetFocus(TRUE);
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_LEVEL3);
+       pc->SetFontSize(11.0f);
+       pc->SetState(STATE_RADIO);
+       pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(6);
+       pos.y -= 24.0f/480.0f;
+       ddim.y =  20.0f/480.0f;
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_LEVEL4);
+       pc->SetFontSize(12.0f);
+       pc->SetState(STATE_RADIO);
+       pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(7);
 
-       pos.x = 380.0f/640.0f;
-       pos.y = 320.0f/480.0f;
-       ddim.x =100.0f/640.0f;
-       ddim.y = 32.0f/480.0f;
+       pos.x  = 380.0f/640.0f;
+       pos.y  =  74.0f/480.0f;
+       ddim.x = 140.0f/640.0f;
+       ddim.y =  32.0f/480.0f;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_NOK);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(0);
+       pb->SetFocus(TRUE);
 
-#if !_TEEN
-       pos.x = 380.0f/640.0f;
-       pos.y = 250.0f/480.0f;
-       ddim.x =100.0f/640.0f;
-       ddim.y = 52.0f/480.0f;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_PERSO);
+       pos.x  = 380.0f/640.0f;
+       pos.y  = 330.0f/480.0f;
+       ddim.x = 140.0f/640.0f;
+       ddim.y =  32.0f/480.0f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_NCREATE);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
-#endif
-
-       pos.x = 200.0f/640.0f;
-       pos.y = 150.0f/480.0f;
-       ddim.x = 160.0f/640.0f;
-       ddim.y = 160.0f/480.0f;
-       pli = pw->CreateList(pos, ddim, 0, EVENT_INTERFACE_NLIST);
-       pli->SetState(STATE_SHADOW);
+       pb->SetTabOrder(2);
 
        if ( m_bDeleteGamer )
        {
-           pos.x = 200.0f/640.0f;
-           pos.y = 100.0f/480.0f;
-           ddim.x = 160.0f/640.0f;
+           pos.x  = 380.0f/640.0f;
+           pos.y  = 280.0f/480.0f;
+           ddim.x = 140.0f/640.0f;
            ddim.y =  32.0f/480.0f;
            pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_NDELETE);
+           pb->SetFontType(FONT_HILITE);
            pb->SetState(STATE_SHADOW);
+           pb->SetTabOrder(3);
        }
 
-       pos.x = 380.0f/640.0f;
-       pos.y = 100.0f/480.0f;
-       ddim.x =100.0f/640.0f;
-       ddim.y = 32.0f/480.0f;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_NCANCEL);
-       pb->SetState(STATE_SHADOW);
-
+       ReadGamerInfo();
        ReadNameList();
-       UpdateNameList();
        UpdateNameControl();
-       UpdateNameFace();
 
        m_engine->SetBackground("inter01.tga", 0,0, 0,0, TRUE, TRUE);
        m_engine->SetBackForce(TRUE);
    }
 
-   if ( m_phase == PHASE_PERSO )
+   if ( m_phase == PHASE_CAR )
    {
-       pos.x = 0.10f;
-       pos.y = 0.10f;
+       pos.x  = 0.10f;
+       pos.y  = 0.10f;
        ddim.x = 0.80f;
        ddim.y = 0.80f;
-       pw = m_interface->CreateWindows(pos, ddim, 12, EVENT_WINDOW5);
+       pw = m_interface->CreateWindows(pos, ddim, 15, EVENT_WINDOW4);
+       pw->SetClosable(TRUE);
        GetResource(RES_TEXT, RT_TITLE_PERSO, name);
        pw->SetName(name);
 
-#if _NEWLOOK
-       pos.x  =  95.0f/640.0f;
-       pos.y  =  66.0f/480.0f;
-       ddim.x = 443.0f/640.0f;
-       ddim.y =  42.0f/480.0f;
-       pg = pw->CreateGroup(pos, ddim, 26, EVENT_LABEL1);  // violet
-       pg->SetState(STATE_SHADOW);
-#endif
-
        pos.x  = 0.10f;
-       pos.y  = 0.40f;
+       pos.y  = 0.44f;
        ddim.x = 0.50f;
        ddim.y = 0.50f;
        pw->CreateGroup(pos, ddim, 5, EVENT_INTERFACE_GLINTl);  // coin orange
        pos.x  = 0.40f;
-       pos.y  = 0.10f;
+       pos.y  = 0.06f;
        ddim.x = 0.50f;
        ddim.y = 0.50f;
        pw->CreateGroup(pos, ddim, 4, EVENT_INTERFACE_GLINTr);  // coin bleu
 
-       pos.x  =  95.0f/640.0f;
-       pos.y  = 108.0f/480.0f;
-       ddim.x = 220.0f/640.0f;
-       ddim.y = 274.0f/480.0f;
-       pw->CreateGroup(pos, ddim, 17, EVENT_NULL);  // cadre
+       pos.x  =  74.0f/640.0f;
+       pos.y  = 370.0f/480.0f;
+       ddim.x = 108.0f/640.0f;
+       ddim.y =  20.0f/480.0f;
+       GetResource(RES_EVENT, EVENT_INTERFACE_PGSPEED, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL1, name);
+       pos.y -=  10.0f/480.0f;
+       pgg = pw->CreateGauge(pos, ddim, 0, EVENT_INTERFACE_PGSPEED);
+       pgg->SetState(STATE_SHADOW);
+       pos.y -=  28.0f/480.0f;
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_INTERFACE_PLSPEED, "");
+
+       pos.x  = 202.0f/640.0f;
+       pos.y  = 370.0f/480.0f;
+       ddim.x = 108.0f/640.0f;
+       ddim.y =  20.0f/480.0f;
+       GetResource(RES_EVENT, EVENT_INTERFACE_PGACCEL, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL2, name);
+       pos.y -=  10.0f/480.0f;
+       pgg = pw->CreateGauge(pos, ddim, 0, EVENT_INTERFACE_PGACCEL);
+       pgg->SetState(STATE_SHADOW);
+       pos.y -=  28.0f/480.0f;
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_INTERFACE_PLACCEL, "");
+
+       pos.x  = 330.0f/640.0f;
+       pos.y  = 370.0f/480.0f;
+       ddim.x = 108.0f/640.0f;
+       ddim.y =  20.0f/480.0f;
+       GetResource(RES_EVENT, EVENT_INTERFACE_PGGRIP, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL3, name);
+       pos.y -=  10.0f/480.0f;
+       pgg = pw->CreateGauge(pos, ddim, 0, EVENT_INTERFACE_PGGRIP);
+       pgg->SetState(STATE_SHADOW);
+       pos.y -=  28.0f/480.0f;
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_INTERFACE_PLGRIP, "");
+
+       pos.x  = 458.0f/640.0f;
+       pos.y  = 370.0f/480.0f;
+       ddim.x = 108.0f/640.0f;
+       ddim.y =  20.0f/480.0f;
+       GetResource(RES_EVENT, EVENT_INTERFACE_PGSOLID, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL4, name);
+       pos.y -=  10.0f/480.0f;
+       pgg = pw->CreateGauge(pos, ddim, 0, EVENT_INTERFACE_PGSOLID);
+       pgg->SetState(STATE_SHADOW);
+       pos.y -=  28.0f/480.0f;
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_INTERFACE_PLSOLID, "");
+
+       m_persoElevation = -0.1f;
+       pos.x  =  74.0f/640.0f;
+       pos.y  = 239.0f/480.0f;
+       ddim.x =  16.0f/640.0f;
+       ddim.y = 100.0f/480.0f;
+       psl = pw->CreateSlider(pos, ddim, 0, EVENT_INTERFACE_PELEV);
+       psl->SetState(STATE_SHADOW);
+       psl->SetLimit(-0.7f, 0.3f);
+       psl->SetArrowStep(0.1f);
+       psl->SetVisibleValue(m_persoElevation);
+       psl->SetTabOrder(17);
+
+       EventMsg table[] =
+       {
+           EVENT_INTERFACE_PCOLOR5,  // blanc
+           EVENT_INTERFACE_PCOLOR10, // jaune
+           EVENT_INTERFACE_PCOLOR0,  // jaune-orange
+           EVENT_INTERFACE_PCOLOR8,  // orange
+           EVENT_INTERFACE_PCOLOR2,  // rouge
+           EVENT_INTERFACE_PCOLOR6,  // brun
+           EVENT_INTERFACE_PCOLOR3,  // noir
+           EVENT_INTERFACE_PCOLOR12, // violet foncé
+           EVENT_INTERFACE_PCOLOR4,  // violet
+           EVENT_INTERFACE_PCOLOR11, // bleu royal
+           EVENT_INTERFACE_PCOLOR1,  // bleu
+           EVENT_INTERFACE_PCOLOR13, // cyan
+           EVENT_INTERFACE_PCOLOR14, // gris
+           EVENT_INTERFACE_PCOLOR9,  // vert
+           EVENT_INTERFACE_PCOLOR7,  // rose
+       };
+
+       pos.x  = 550.0f/640.0f;
+       pos.y  = 324.0f/480.0f;
+       ddim.x =  15.0f/640.0f;
+       ddim.y =  15.0f/480.0f;
+       for ( i=0 ; i<15 ; i++ )
+       {
+           pco = pw->CreateColor(pos, ddim, -1, table[i]);
+           pco->SetState(STATE_SHADOW);
+           pco->SetTabOrder(2+i);
+           pos.y -= 15.0f/480.0f;
+       }
        
-       pos.x  = 100.0f/640.0f;
-       pos.y  = 364.0f/480.0f;
-       ddim.x = 210.0f/640.0f;
-       ddim.y =  14.0f/480.0f;
-       pw->CreateGroup(pos, ddim, 3, EVENT_NULL);  // transparent -> gris
-
-       pos.x  = 120.0f/640.0f;
-       pos.y  = 364.0f/480.0f;
-       ddim.x =  80.0f/640.0f;
-       ddim.y =  28.0f/480.0f;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_PHEAD);
-       pb->SetState(STATE_SHADOW);
-       pb->SetState(STATE_CARD);
-
-       pos.x  = 210.0f/640.0f;
-       pos.y  = 364.0f/480.0f;
-       ddim.x =  80.0f/640.0f;
-       ddim.y =  28.0f/480.0f;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_PBODY);
-       pb->SetState(STATE_SHADOW);
-       pb->SetState(STATE_CARD);
-
-       pos.x  = 100.0f/640.0f;
-       pos.y  = 354.0f/480.0f;
-       ddim.x = 210.0f/640.0f;
-       ddim.y =  10.0f/480.0f;
-       pw->CreateGroup(pos, ddim, 1, EVENT_INTERFACE_GLINTb);  // barre orange
-       pos.x  = 100.0f/640.0f;
-       pos.y  = 154.0f/480.0f;
-       ddim.x = 210.0f/640.0f;
-       ddim.y = 200.0f/480.0f;
-       pw->CreateGroup(pos, ddim, 2, EVENT_INTERFACE_GLINTu);  // orange -> transparent
-
-       // Visage
-       pos.x  = 340.0f/640.0f;
-       pos.y  = 356.0f/480.0f;
-       ddim.x = 200.0f/640.0f;
+       pos.x  =  74.0f/640.0f;
+       pos.y  = 170.0f/480.0f;
+       ddim.x =  16.0f/640.0f;
        ddim.y =  16.0f/480.0f;
-       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL11, "");
-       pl->SetJustif(1);
-
-       pos.x  = 340.0f/640.0f;
-       pos.y  = 312.0f/480.0f;
-       ddim.x =  44.0f/640.0f;
-       ddim.y =  44.0f/480.0f;
-       pb = pw->CreateButton(pos, ddim, 43, EVENT_INTERFACE_PFACE1);
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_PSUBMOD0);
+       pb->SetFontSize(9.0f);
        pb->SetState(STATE_SHADOW);
-       pos.x += 50.0f/640.0f;
-       pb = pw->CreateButton(pos, ddim, 46, EVENT_INTERFACE_PFACE4);
+       pb->SetTabOrder(18);
+       pos.y -= 18.0f/480.0f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_PSUBMOD1);
+       pb->SetFontSize(9.0f);
        pb->SetState(STATE_SHADOW);
-       pos.x += 50.0f/640.0f;
-       pb = pw->CreateButton(pos, ddim, 45, EVENT_INTERFACE_PFACE3);
+       pb->SetTabOrder(19);
+       pos.y -= 18.0f/480.0f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_PSUBMOD2);
+       pb->SetFontSize(9.0f);
        pb->SetState(STATE_SHADOW);
-       pos.x += 50.0f/640.0f;
-       pb = pw->CreateButton(pos, ddim, 44, EVENT_INTERFACE_PFACE2);
+       pb->SetTabOrder(20);
+       pos.y -= 18.0f/480.0f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_PSUBMOD3);
+       pb->SetFontSize(9.0f);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(21);
 
-       // Lunettes
-       pos.x  = 340.0f/640.0f;
-       pos.y  = 270.0f/480.0f;
-       ddim.x = 200.0f/640.0f;
-       ddim.y =  16.0f/480.0f;
-       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL12, "");
-       pl->SetJustif(1);
-
-       pos.x  = 340.0f/640.0f;
-       pos.y  = 240.0f/480.0f;
-       ddim.x =  30.0f/640.0f;
-       ddim.y =  30.0f/480.0f;
-       for ( i=0 ; i<6 ; i++ )
-       {
-           int ti[6] = {11, 179, 180, 181, 182, 183};
-           pb = pw->CreateButton(pos, ddim, ti[i], (EventMsg)(EVENT_INTERFACE_PGLASS0+i));
-           pb->SetState(STATE_SHADOW);
-           pos.x += (30.0f+2.8f)/640.0f;
-       }
-
-       // Couleur a
-       pos.x  = 340.0f/640.0f;
-       pos.y  = 300.0f/480.0f;
-       ddim.x = 200.0f/640.0f;
-       ddim.y =  16.0f/480.0f;
-       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL14, "");
-       pl->SetJustif(1);
-
-       pos.y  = 282.0f/480.0f;
-       ddim.x =  18.0f/640.0f;
-       ddim.y =  18.0f/480.0f;
-       for ( j=0 ; j<3 ; j++ )
-       {
-           pos.x  = 340.0f/640.0f;
-           for ( i=0 ; i<3 ; i++ )
-           {
-               pco = pw->CreateColor(pos, ddim, -1, (EventMsg)(EVENT_INTERFACE_PC0a+j*3+i));
-               pco->SetState(STATE_SHADOW);
-               pos.x += 20.0f/640.0f;
-           }
-           pos.y -= 20.0f/480.0f;
-       }
-
-       pos.x  = 420.0f/640.0f;
-       pos.y  = 282.0f/480.0f;
-       ddim.x = 100.0f/640.0f;
-       ddim.y =  18.0f/480.0f;
-       for ( i=0 ; i<3 ; i++ )
-       {
-           psl = pw->CreateSlider(pos, ddim, 0, (EventMsg)(EVENT_INTERFACE_PCRa+i));
-           psl->SetState(STATE_SHADOW);
-           psl->SetLimit(0.0f, 255.0f);
-           psl->SetArrowStep(16.0f);
-           pos.y -= 20.0f/480.0f;
-       }
-
-       // Couleur b
-       pos.x  = 340.0f/640.0f;
-       pos.y  = 192.0f/480.0f;
-       ddim.x = 200.0f/640.0f;
-       ddim.y =  16.0f/480.0f;
-       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL13, "");
-       pl->SetJustif(1);
-
-       pos.y  = 174.0f/480.0f;
-       ddim.x =  18.0f/640.0f;
-       ddim.y =  18.0f/480.0f;
-       for ( j=0 ; j<3 ; j++ )
-       {
-           pos.x  = 340.0f/640.0f;
-           for ( i=0 ; i<3 ; i++ )
-           {
-               pco = pw->CreateColor(pos, ddim, -1, (EventMsg)(EVENT_INTERFACE_PC0b+j*3+i));
-               pco->SetState(STATE_SHADOW);
-               pos.x += 20.0f/640.0f;
-           }
-           pos.y -= 20.0f/480.0f;
-       }
+#if _DEMO|_SE
+       pos.x  =  94.0f/640.0f;
+       pos.y  = 298.0f/480.0f;
+       ddim.x = 452.0f/640.0f;
+       ddim.y =  44.0f/480.0f;
+       pg = pw->CreateGroup(pos, ddim, 29, EVENT_INTERFACE_PSPECB);
+#endif
 
-       pos.x  = 420.0f/640.0f;
-       pos.y  = 174.0f/480.0f;
-       ddim.x = 100.0f/640.0f;
-       ddim.y =  18.0f/480.0f;
-       for ( i=0 ; i<3 ; i++ )
-       {
-           psl = pw->CreateSlider(pos, ddim, 0, (EventMsg)(EVENT_INTERFACE_PCRb+i));
-           psl->SetState(STATE_SHADOW);
-           psl->SetLimit(0.0f, 255.0f);
-           psl->SetArrowStep(16.0f);
-           pos.y -= 20.0f/480.0f;
-       }
+       pos.x  =  94.0f/640.0f;
+       pos.y  = 308.0f/480.0f;
+       ddim.x = 452.0f/640.0f;
+       ddim.y =  20.0f/480.0f;
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_INTERFACE_PPRICE, "");
+       pl->SetFontSize(13.0f);
 
-       // Rotation
-       pos.x  = 100.0f/640.0f;
-       pos.y  = 113.0f/480.0f;
-       ddim.x =  20.0f/640.0f;
+       pos.x  =  94.0f/640.0f;
+       pos.y  = 294.0f/480.0f;
+       ddim.x = 452.0f/640.0f;
        ddim.y =  20.0f/480.0f;
-       pb = pw->CreateButton(pos, ddim, 55, EVENT_INTERFACE_PLROT);  // <
-       pb->SetState(STATE_SHADOW);
-       pb->SetRepeat(TRUE);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_INTERFACE_PPESETAS, "");
+       pl->SetFontSize(10.0f);
 
-       pos.x  = 290.0f/640.0f;
-       pos.y  = 113.0f/480.0f;
-       ddim.x =  20.0f/640.0f;
+#if _DEMO|_SE
+       pos.x  =  94.0f/640.0f;
+       pos.y  = 292.0f/480.0f;
+       ddim.x = 452.0f/640.0f;
        ddim.y =  20.0f/480.0f;
-       pb = pw->CreateButton(pos, ddim, 48, EVENT_INTERFACE_PRROT);  // >
-       pb->SetState(STATE_SHADOW);
-       pb->SetRepeat(TRUE);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_INTERFACE_PSPECT, "");
+       pl->SetFontSize(10.0f);
+#else
+       pos.x  = 150.0f/640.0f;
+       pos.y  = 230.0f/480.0f;
+       ddim.x = 340.0f/640.0f;
+       ddim.y =  30.0f/480.0f;
+       pg = pw->CreateGroup(pos, ddim, 9, EVENT_INTERFACE_PSPECB);
+       pg->SetState(STATE_SHADOW);
+       pos.x  = 150.0f/640.0f;
+       pos.y  = 222.0f/480.0f;
+       ddim.x = 340.0f/640.0f;
+       ddim.y =  20.0f/480.0f;
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_INTERFACE_PSPECT, "");
+       pl->SetFontSize(15.0f);
+#endif
 
-       pos.x  = 100.0f/640.0f;
-       pos.y  =  70.0f/480.0f;
-       ddim.x = 100.0f/640.0f;
+       pos.x  =  94.0f/640.0f;
+       pos.y  =  74.0f/480.0f;
+       ddim.x =  60.0f/640.0f;
        ddim.y =  32.0f/480.0f;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_POK);
+       pb = pw->CreateButton(pos, ddim, 55, EVENT_INTERFACE_PPREV);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(22);
 
-       pos.x = 210.0f/640.0f;
-       pos.y =  70.0f/480.0f;
-       ddim.x =100.0f/640.0f;
-       ddim.y = 32.0f/480.0f;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_PCANCEL);
+       pos.x  = 164.0f/640.0f;
+       pos.y  =  74.0f/480.0f;
+       ddim.x =  60.0f/640.0f;
+       ddim.y =  32.0f/480.0f;
+       pb = pw->CreateButton(pos, ddim, 48, EVENT_INTERFACE_PNEXT);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(23);
 
-       pos.x = 340.0f/640.0f;
-       pos.y =  70.0f/480.0f;
-       ddim.x =194.0f/640.0f;
-       ddim.y = 32.0f/480.0f;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_PDEF);
+       pos.x  = 336.0f/640.0f;
+       pos.y  =  74.0f/480.0f;
+       ddim.x = 210.0f/640.0f;
+       ddim.y =  32.0f/480.0f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_POK);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(0);
+       pb->SetFocus(TRUE);
+
+       pos.x  = 332.0f/640.0f;
+       pos.y  =  38.0f/480.0f;
+       ddim.x = 218.0f/640.0f;
+       ddim.y =  26.0f/480.0f;
+       pg = pw->CreateGroup(pos, ddim, 27, EVENT_INTERFACE_GHOSTg);
+       pg->SetState(STATE_SHADOW);
+
+       pos.x  = 336.0f/640.0f;
+       pos.y  =  43.0f/480.0f;
+       ddim.x = 210.0f/640.0f;
+       ddim.y =  16.0f/480.0f;
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_GHOSTm);
+       pc->SetFontSize(9.5f);
+       pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(1);
+       UpdateSceneGhost(m_sel[m_index]);
 
-       m_persoCopy = m_perso;
-       m_persoTab = 0;
+       m_persoCopy = m_perso;  // copie si annulation
        m_persoAngle = -0.6f;
-       UpdatePerso();
+       m_persoTime = 0.0f;
+       m_persoRun = FALSE;
+       BuyablePerso();
        m_main->ScenePerso();
+       UpdatePerso();
        CameraPerso();
+
+       m_ghostName[0] = 0;  // utilise la voiture fantome standard
    }
 
-   if ( m_phase == PHASE_TRAINER ||
-        m_phase == PHASE_DEFI    ||
-        m_phase == PHASE_MISSION ||
+   if ( m_phase == PHASE_MISSION ||
         m_phase == PHASE_FREE    ||
-        m_phase == PHASE_TEEN    ||
         m_phase == PHASE_USER    ||
         m_phase == PHASE_PROTO   )
    {
-       if ( m_phase == PHASE_TRAINER )  m_index = 0;
-       if ( m_phase == PHASE_DEFI    )  m_index = 1;
        if ( m_phase == PHASE_MISSION )  m_index = 2;
        if ( m_phase == PHASE_FREE    )  m_index = 3;
        if ( m_phase == PHASE_USER    )  m_index = 4;
        if ( m_phase == PHASE_PROTO   )  m_index = 5;
-       if ( m_phase == PHASE_TEEN    )  m_index = 6;
-
-       if ( m_phase == PHASE_FREE )
-       {
-           strcpy(m_sceneName, "scene");
-           ReadGamerInfo();
-           m_accessChap = RetChapPassed();
-       }
 
-       if ( m_phase == PHASE_TRAINER )  strcpy(m_sceneName, "train");
-       if ( m_phase == PHASE_DEFI    )  strcpy(m_sceneName, "defi" );
        if ( m_phase == PHASE_MISSION )  strcpy(m_sceneName, "scene");
        if ( m_phase == PHASE_FREE    )  strcpy(m_sceneName, "free");
-       if ( m_phase == PHASE_TEEN    )  strcpy(m_sceneName, "teen");
        if ( m_phase == PHASE_USER    )  strcpy(m_sceneName, "user");
        if ( m_phase == PHASE_PROTO   )  strcpy(m_sceneName, "proto");
+       strcpy(m_sceneBase, m_sceneName);
 
-       ReadGamerInfo();
+       m_bPesetas = (m_phase == PHASE_MISSION);
 
-       pos.x = 0.10f;
-       pos.y = 0.10f;
+       ReadGamerMission();
+
+       pos.x  = 0.10f;
+       pos.y  = 0.10f;
        ddim.x = 0.80f;
        ddim.y = 0.80f;
-       pw = m_interface->CreateWindows(pos, ddim, 12, EVENT_WINDOW5);
+       pw = m_interface->CreateWindows(pos, ddim, 12, EVENT_WINDOW4);
        pw->SetClosable(TRUE);
-       if ( m_phase == PHASE_TRAINER )  res = RT_TITLE_TRAINER;
-       if ( m_phase == PHASE_DEFI    )  res = RT_TITLE_DEFI;
        if ( m_phase == PHASE_MISSION )  res = RT_TITLE_MISSION;
        if ( m_phase == PHASE_FREE    )  res = RT_TITLE_FREE;
-       if ( m_phase == PHASE_TEEN    )  res = RT_TITLE_TEEN;
        if ( m_phase == PHASE_USER    )  res = RT_TITLE_USER;
        if ( m_phase == PHASE_PROTO   )  res = RT_TITLE_PROTO;
        GetResource(RES_TEXT, res, name);
        pw->SetName(name);
 
-#if _NEWLOOK
-       pos.x  = 100.0f/640.0f;
-       pos.y  = 226.0f/480.0f;
-       ddim.x = 216.0f/640.0f;
-       ddim.y = 160.0f/480.0f;
-       pg = pw->CreateGroup(pos, ddim, 23, EVENT_LABEL1);  // bleu
-       pg->SetState(STATE_SHADOW);
-       pos.x  = 322.0f/640.0f;
-       pg = pw->CreateGroup(pos, ddim, 24, EVENT_LABEL1);  // cyan
-       pg->SetState(STATE_SHADOW);
-
-       pos.x  = 100.0f/640.0f;
-       pos.y  = 122.0f/480.0f;
-       ddim.x = 438.0f/640.0f;
-       ddim.y =  98.0f/480.0f;
-       pg = pw->CreateGroup(pos, ddim, 25, EVENT_LABEL1);  // vert
-       pg->SetState(STATE_SHADOW);
-       pos.y  =  66.0f/480.0f;
-       ddim.y =  42.0f/480.0f;
-       pg = pw->CreateGroup(pos, ddim, 26, EVENT_LABEL1);  // violet
-       pg->SetState(STATE_SHADOW);
-#endif
-
        pos.x  = 0.10f;
-       pos.y  = 0.40f;
+       pos.y  = 0.44f;
        ddim.x = 0.50f;
        ddim.y = 0.50f;
        pw->CreateGroup(pos, ddim, 5, EVENT_INTERFACE_GLINTl);  // coin orange
        pos.x  = 0.40f;
-       pos.y  = 0.10f;
+       pos.y  = 0.06f;
        ddim.x = 0.50f;
        ddim.y = 0.50f;
        pw->CreateGroup(pos, ddim, 4, EVENT_INTERFACE_GLINTr);  // coin bleu
 
-       // Affiche la liste des chapitres :
-       pos.x = ox+sx*3;
-       pos.y = oy+sy*10.5f;
-       ddim.x = dim.x*7.5f;
-       ddim.y = dim.y*0.6f;
-       if ( m_phase == PHASE_TRAINER )  res = RT_PLAY_CHAPt;
-       if ( m_phase == PHASE_DEFI    )  res = RT_PLAY_CHAPd;
-       if ( m_phase == PHASE_MISSION )  res = RT_PLAY_CHAPm;
-       if ( m_phase == PHASE_FREE    )  res = RT_PLAY_CHAPf;
-       if ( m_phase == PHASE_TEEN    )  res = RT_PLAY_CHAPte;
-       if ( m_phase == PHASE_USER    )  res = RT_PLAY_CHAPu;
-       if ( m_phase == PHASE_PROTO   )  res = RT_PLAY_CHAPp;
-       GetResource(RES_TEXT, res, name);
-       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL11, name);
-       pl->SetJustif(1);
+       // Affiche la colonne gauche :
+       pos.x  =  94.0f/640.0f;
+       ddim.x = 210.0f/640.0f;
 
-       pos.y = oy+sy*6.7f;
-       ddim.y = dim.y*4.5f;
-       ddim.x = dim.x*6.5f;
-       pli = pw->CreateList(pos, ddim, 0, EVENT_INTERFACE_CHAP);
-       pli->SetState(STATE_SHADOW);
-       UpdateSceneChap(m_chap[m_index]);
-       if ( m_phase != PHASE_USER )  pli->SetState(STATE_EXTEND);
-       
-       // Affiche la liste des missions :
-       pos.x = ox+sx*9.5f;
-       pos.y = oy+sy*10.5f;
-       ddim.x = dim.x*7.5f;
-       ddim.y = dim.y*0.6f;
-       if ( m_phase == PHASE_TRAINER )  res = RT_PLAY_LISTt;
-       if ( m_phase == PHASE_DEFI    )  res = RT_PLAY_LISTd;
+       pos.y  = 370.0f/480.0f;
+       ddim.y =  16.0f/480.0f;
        if ( m_phase == PHASE_MISSION )  res = RT_PLAY_LISTm;
        if ( m_phase == PHASE_FREE    )  res = RT_PLAY_LISTf;
-       if ( m_phase == PHASE_TEEN    )  res = RT_PLAY_LISTk;
        if ( m_phase == PHASE_USER    )  res = RT_PLAY_LISTu;
        if ( m_phase == PHASE_PROTO   )  res = RT_PLAY_LISTp;
        GetResource(RES_TEXT, res, name);
-       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL12, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL10, name);
        pl->SetJustif(1);
 
-       pos.y = oy+sy*6.7f;
-       ddim.y = dim.y*4.5f;
-       ddim.x = dim.x*6.5f;
+       pos.y  = 200.0f/480.0f;
+       ddim.y = 178.0f/480.0f;
        pli = pw->CreateList(pos, ddim, 0, EVENT_INTERFACE_LIST);
+       pli->SetState(STATE_DEFAULT);
        pli->SetState(STATE_SHADOW);
-       UpdateSceneList(m_chap[m_index], m_sel[m_index]);
-       if ( m_phase != PHASE_USER )  pli->SetState(STATE_EXTEND);
-       pos = pli->RetPos();
-       ddim = pli->RetDim();
-
-       // Affiche le résumé :
-       pos.x = ox+sx*3;
-       pos.y = oy+sy*5.4f;
-       ddim.x = dim.x*6.5f;
-       ddim.y = dim.y*0.6f;
-       GetResource(RES_TEXT, RT_PLAY_RESUME, name);
-       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL13, name);
-       pl->SetJustif(1);
-       
-       pos.x = ox+sx*3;
-       pos.y = oy+sy*3.6f;
-       ddim.x = dim.x*13.4f;
-       ddim.y = dim.y*1.9f;
-       pe = pw->CreateEdit(pos, ddim, 0, EVENT_INTERFACE_RESUME);
-       pe->SetState(STATE_SHADOW);
-       pe->SetMaxChar(500);
-       pe->SetEditCap(FALSE);  // juste pour voir
-       pe->SetHiliteCap(FALSE);
+       UpdateSceneList(m_sel[m_index]);
+       pli->SetState(STATE_EXTEND);
+       pli->SetTabOrder(1);
 
-       // Affiche le bouton "soluce" :
-       if ( m_phase != PHASE_TRAINER &&
-            m_phase != PHASE_FREE    &&
-            m_phase != PHASE_TEEN    )
+       // Affiche la colonne droite :
+       if ( m_bPesetas )
        {
-           pos.x = ox+sx*9.5f;
-           pos.y = oy+sy*5.8f;
-           ddim.x = dim.x*6.5f;
-           ddim.y = dim.y*0.5f;
-           pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_SOLUCE);
-           pc->SetState(STATE_SHADOW);
-           pc->ClearState(STATE_CHECK);
-       }
-       m_bSceneSoluce = FALSE;
+           pos.x  = 336.0f/640.0f;
+           ddim.x = 210.0f/640.0f;
 
-       UpdateSceneResume((m_chap[m_index]+1)*100+(m_sel[m_index]+1));
-
-       if ( m_phase == PHASE_MISSION ||
-            m_phase == PHASE_FREE    ||
-            m_phase == PHASE_USER    )
-       {
-           pos.x = ox+sx*9.5f;
-           pos.y = oy+sy*2;
-           ddim.x = dim.x*3.7f;
-           ddim.y = dim.y*1;
-           pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_PLAY);
-           pb->SetState(STATE_SHADOW);
-           if ( m_maxList == 0 )
-           {
-               pb->ClearState(STATE_ENABLE);
-           }
+           pos.y  = 370.0f/480.0f;
+           ddim.y =  16.0f/480.0f;
+           GetResource(RES_TEXT, RT_PLAY_PESETAS, name);
+           pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL12, name);
+           pl->SetJustif(1);
 
-           pos.x += dim.x*4.0f;
-           ddim.x = dim.x*2.5f;
-           pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_READ);
-           pb->SetState(STATE_SHADOW);
-           if ( !IsIOReadScene() )  // aucun fichier à lire ?
-           {
-               pb->ClearState(STATE_ENABLE);
-           }
+           pos.y  = 200.0f/480.0f;
+           ddim.y = 175.0f/480.0f;
+           pp = pw->CreatePesetas(pos, ddim, 0, EVENT_INTERFACE_PESETAS);
+           pp->SetState(STATE_SHADOW);
+           pp->SetLevelCredit((float)m_perso.pesetas);
+           pp->SetLevelNext((float)ReadPesetasNext());
+           UpdateScenePesetasMax(m_sel[m_index]);
        }
        else
        {
-           pos.x = ox+sx*9.5f;
-           pos.y = oy+sy*2;
-           ddim.x = dim.x*6.5f;
-           ddim.y = dim.y*1;
-           pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_PLAY);
-           pb->SetState(STATE_SHADOW);
-           if ( m_maxList == 0 )
-           {
-               pb->ClearState(STATE_ENABLE);
-           }
+           pos.x  = 336.0f/640.0f;
+           ddim.x = 210.0f/640.0f;
+           pos.y  = 200.0f/480.0f;
+           ddim.y = 175.0f/480.0f;
+           pi = pw->CreateImage(pos, ddim, 0, EVENT_INTERFACE_IMAGE);
+           pi->SetState(STATE_SHADOW);
+           UpdateSceneImage(m_sel[m_index]);
        }
 
-       pos.x = ox+sx*3;
-       ddim.x = dim.x*4;
+       // Affiche le résumé :
+       pos.x  =  94.0f/640.0f;
+       pos.y  = 126.0f/480.0f;
+       ddim.x = 452.0f/640.0f;
+       ddim.y =  58.0f/480.0f;
+       pe = pw->CreateEdit(pos, ddim, 0, EVENT_INTERFACE_RESUME);
+       pe->SetState(STATE_SHADOW);
+       pe->SetMaxChar(500);
+       pe->SetMultiFont(TRUE);
+       pe->SetEditCap(FALSE);  // juste pour voir
+       pe->SetHiliteCap(FALSE);
+       UpdateSceneResume(m_sel[m_index]);
+
+       pos.x  =  94.0f/640.0f;
+       pos.y  =  74.0f/480.0f;
+       ddim.x = 130.0f/640.0f;
+       ddim.y =  32.0f/480.0f;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_BACK);
+       pb->SetFontType(FONT_HILITE);
+       pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(2);
+
+       pos.x  = 336.0f/640.0f;
+       pos.y  =  74.0f/480.0f;
+       ddim.x = 210.0f/640.0f;
+       ddim.y =  32.0f/480.0f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_PLAY);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(0);
+       pb->SetFocus(TRUE);
+       BuyablePerso();
+       UpdateScenePlay(m_sel[m_index]);
 
        m_engine->SetBackground("inter01.tga", 0,0, 0,0, TRUE, TRUE);
        m_engine->SetBackForce(TRUE);
@@ -1032,7 +849,7 @@ void CMainDialog::ChangePhase(Phase phase)
        pos.y = 0.10f;
        ddim.x = 0.80f;
        ddim.y = 0.80f;
-       pw = m_interface->CreateWindows(pos, ddim, 12, EVENT_WINDOW5);
+       pw = m_interface->CreateWindows(pos, ddim, 12, EVENT_WINDOW4);
        pw->SetClosable(TRUE);
        GetResource(RES_TEXT, RT_TITLE_SETUP, name);
        pw->SetName(name);
@@ -1049,80 +866,6 @@ void CMainDialog::ChangePhase(Phase phase)
        ddim.y = 0.05f;
        pw->CreateGroup(pos, ddim, 3, EVENT_NULL);  // transparent -> gris
 
-#if _NEWLOOK
-       if ( m_phase == PHASE_SETUPd  || // setup/display ?
-            m_phase == PHASE_SETUPds )
-       {
-           pos.x  = 100.0f/640.0f;
-           pos.y  = 130.0f/480.0f;
-           ddim.x = 216.0f/640.0f;
-           ddim.y = 212.0f/480.0f;
-           pg = pw->CreateGroup(pos, ddim, 23, EVENT_LABEL1);  // bleu
-           pg->SetState(STATE_SHADOW);
-           pos.x  = 324.0f/640.0f;
-           pg = pw->CreateGroup(pos, ddim, 24, EVENT_LABEL1);  // cyan
-           pg->SetState(STATE_SHADOW);
-       }
-       if ( m_phase == PHASE_SETUPg  || // setup/graphic ?
-            m_phase == PHASE_SETUPgs )
-       {
-           pos.x  = 100.0f/640.0f;
-           pos.y  = 130.0f/480.0f;
-           ddim.x = 174.0f/640.0f;
-           ddim.y = 212.0f/480.0f;
-           pg = pw->CreateGroup(pos, ddim, 23, EVENT_LABEL1);  // bleu
-           pg->SetState(STATE_SHADOW);
-           pos.x  = 282.0f/640.0f;
-           ddim.x = 258.0f/640.0f;
-           pg = pw->CreateGroup(pos, ddim, 24, EVENT_LABEL1);  // cyan
-           pg->SetState(STATE_SHADOW);
-       }
-       if ( m_phase == PHASE_SETUPp  || // setup/jeu ?
-            m_phase == PHASE_SETUPps )
-       {
-           pos.x  = 100.0f/640.0f;
-           pos.y  = 130.0f/480.0f;
-           ddim.x = 226.0f/640.0f;
-           ddim.y = 212.0f/480.0f;
-           pg = pw->CreateGroup(pos, ddim, 23, EVENT_LABEL1);  // bleu
-           pg->SetState(STATE_SHADOW);
-           pos.x  = 334.0f/640.0f;
-           ddim.x = 206.0f/640.0f;
-           pg = pw->CreateGroup(pos, ddim, 24, EVENT_LABEL1);  // cyan
-           pg->SetState(STATE_SHADOW);
-       }
-       if ( m_phase == PHASE_SETUPc  || // setup/commande ?
-            m_phase == PHASE_SETUPcs )
-       {
-           pos.x  = 100.0f/640.0f;
-           pos.y  = 125.0f/480.0f;
-           ddim.x = 440.0f/640.0f;
-           ddim.y = 222.0f/480.0f;
-           pg = pw->CreateGroup(pos, ddim, 23, EVENT_LABEL1);  // bleu
-           pg->SetState(STATE_SHADOW);
-       }
-       if ( m_phase == PHASE_SETUPs  || // setup/sound ?
-            m_phase == PHASE_SETUPss )
-       {
-           pos.x  = 100.0f/640.0f;
-           pos.y  = 130.0f/480.0f;
-           ddim.x = 216.0f/640.0f;
-           ddim.y = 212.0f/480.0f;
-           pg = pw->CreateGroup(pos, ddim, 23, EVENT_LABEL1);  // bleu
-           pg->SetState(STATE_SHADOW);
-           pos.x  = 324.0f/640.0f;
-           pg = pw->CreateGroup(pos, ddim, 24, EVENT_LABEL1);  // cyan
-           pg->SetState(STATE_SHADOW);
-       }
-
-       pos.x  = 100.0f/640.0f;
-       pos.y  =  66.0f/480.0f;
-       ddim.x = 440.0f/640.0f;
-       ddim.y =  42.0f/480.0f;
-       pg = pw->CreateGroup(pos, ddim, 26, EVENT_LABEL1);  // violet
-       pg->SetState(STATE_SHADOW);
-#endif
-
        ddim.x = 0.78f/5-0.01f;
        ddim.y = 0.06f;
        pos.x = 0.115f;
@@ -1131,30 +874,35 @@ void CMainDialog::ChangePhase(Phase phase)
        pb->SetState(STATE_SHADOW);
        pb->SetState(STATE_CARD);
        pb->SetState(STATE_CHECK, (m_phase == PHASE_SETUPd || m_phase == PHASE_SETUPds));
+       pb->SetTabOrder(1);
 
        pos.x += ddim.x+0.01f;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_SETUPg);
        pb->SetState(STATE_SHADOW);
        pb->SetState(STATE_CARD);
        pb->SetState(STATE_CHECK, (m_phase == PHASE_SETUPg || m_phase == PHASE_SETUPgs));
+       pb->SetTabOrder(2);
 
        pos.x += ddim.x+0.01f;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_SETUPp);
        pb->SetState(STATE_SHADOW);
        pb->SetState(STATE_CARD);
        pb->SetState(STATE_CHECK, (m_phase == PHASE_SETUPp || m_phase == PHASE_SETUPps));
+       pb->SetTabOrder(3);
 
        pos.x += ddim.x+0.01f;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_SETUPc);
        pb->SetState(STATE_SHADOW);
        pb->SetState(STATE_CARD);
        pb->SetState(STATE_CHECK, (m_phase == PHASE_SETUPc || m_phase == PHASE_SETUPcs));
+       pb->SetTabOrder(4);
 
        pos.x += ddim.x+0.01f;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_SETUPs);
        pb->SetState(STATE_SHADOW);
        pb->SetState(STATE_CARD);
        pb->SetState(STATE_CHECK, (m_phase == PHASE_SETUPs || m_phase == PHASE_SETUPss));
+       pb->SetTabOrder(5);
 
        pos.x  = 0.10f;
        ddim.x = 0.80f;
@@ -1167,12 +915,15 @@ void CMainDialog::ChangePhase(Phase phase)
        ddim.y = 0.02f;
        pw->CreateGroup(pos, ddim, 1, EVENT_INTERFACE_GLINTb);  // barre orange
 
-       ddim.x = dim.x*4;
+       ddim.x = dim.x*6;
        ddim.y = dim.y*1;
-       pos.x = ox+sx*3;
+       pos.x = ox+sx*10;
        pos.y = oy+sy*2;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_BACK);
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_OK);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(0);
+       pb->SetFocus(TRUE);
 
        if ( !m_bSimulSetup )
        {
@@ -1198,6 +949,7 @@ void CMainDialog::ChangePhase(Phase phase)
        ddim.y = dim.y*4.5f;
        pli = pw->CreateList(pos, ddim, 0, EVENT_LIST1);
        pli->SetState(STATE_SHADOW);
+       pli->SetTabOrder(6);
        UpdateDisplayDevice();
 
        pos.x = ox+sx*10;
@@ -1215,6 +967,7 @@ void CMainDialog::ChangePhase(Phase phase)
        ddim.y = dim.y*4.5f;
        pli = pw->CreateList(pos, ddim, 0, EVENT_LIST2);
        pli->SetState(STATE_SHADOW);
+       pli->SetTabOrder(7);
        UpdateDisplayMode();
        pli->SetState(STATE_ENABLE, m_setupFull);
 
@@ -1225,13 +978,16 @@ void CMainDialog::ChangePhase(Phase phase)
        pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_FULL);
        pc->SetState(STATE_SHADOW);
        pc->SetState(STATE_CHECK, m_setupFull);
+       pc->SetTabOrder(8);
 
        ddim.x = dim.x*6;
        ddim.y = dim.y*1;
-       pos.x = ox+sx*10;
+       pos.x = ox+sx*3;
        pos.y = oy+sy*2;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_APPLY);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(9);
        UpdateApply();
    }
 
@@ -1244,137 +1000,168 @@ void CMainDialog::ChangePhase(Phase phase)
        pos.y = 0.65f;
        pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_SHADOW);
        pc->SetState(STATE_SHADOW);
-       pos.y -= 0.048f;
-       if ( !m_bSimulSetup )
-       {
-           pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_GROUND);
-           pc->SetState(STATE_SHADOW);
-           if ( m_engine->IsVideo8MB() )  pc->ClearState(STATE_ENABLE);
-       }
+       pc->SetTabOrder(6);
        pos.y -= 0.048f;
        pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_DIRTY);
        pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(7);
        pos.y -= 0.048f;
        pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_SKY);
        pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(8);
        if ( m_engine->IsVideo8MB() )  pc->ClearState(STATE_ENABLE);
        pos.y -= 0.048f;
        pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_LENS);
        pc->SetState(STATE_SHADOW);
-       pos.y -= 0.048f;
-       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_PLANET);
-       pc->SetState(STATE_SHADOW);
-       pos.y -= 0.048f;
-       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_FOG);
-       pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(9);
        pos.y -= 0.048f;
        if ( !m_bSimulSetup )
        {
            pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_LIGHT);
            pc->SetState(STATE_SHADOW);
+           pc->SetTabOrder(10);
+       }
+       pos.y -= 0.048f;
+#if _DEBUG
+       if ( !m_bSimulSetup )
+       {
+           pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_SUPER);
+           pc->SetState(STATE_SHADOW);
+           pc->SetTabOrder(11);
        }
+#endif
 
-       pos.x = ox+sx*8.5f;
-       pos.y = 0.65f;
-       ddim.x = dim.x*2.2f;
-       ddim.y = 18.0f/480.0f;
-       pv = pw->CreateEditValue(pos, ddim, 0, EVENT_INTERFACE_PARTI);
-       pv->SetState(STATE_SHADOW);
-       pv->SetMinValue(0.0f);
-       pv->SetMaxValue(2.0f);
-       pos.x += 0.13f;
-       pos.y -= 0.015f;
-       ddim.x = 0.40f;
+       pos.x  = 280.0f/640.0f;
+       pos.y  = 134.0f/480.0f;
+       ddim.x =  18.0f/640.0f;
+       ddim.y =  90.0f/480.0f;
+       psl = pw->CreateSlider(pos, ddim, 0, EVENT_INTERFACE_PARTI);
+       psl->SetLimit(0.0f, 1.0f);
+       psl->SetArrowStep(0.1f);
+       psl->SetState(STATE_VALUE);
+       psl->SetState(STATE_SHADOW);
+       psl->SetTabOrder(12);
+       pos.y  = 320.0f/480.0f;
+       ddim.x = 180.0f/640.0f;
+       ddim.y =  16.0f/480.0f;
        GetResource(RES_EVENT, EVENT_INTERFACE_PARTI, name);
        pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL10, name);
        pl->SetJustif(1);
+       pos.x +=   8.0f/640.0f;
+       pos.y  = 240.0f/480.0f;
+       ddim.x =   2.0f/640.0f;
+       ddim.y =  90.0f/480.0f;
+       pw->CreateGroup(pos, ddim, 27, EVENT_LABEL1);
 
-       pos.x = ox+sx*8.5f;
-       pos.y = 0.59f;
-       ddim.x = dim.x*2.2f;
-       ddim.y = 18.0f/480.0f;
-       pv = pw->CreateEditValue(pos, ddim, 0, EVENT_INTERFACE_CLIP);
-       pv->SetState(STATE_SHADOW);
-       pv->SetMinValue(0.5f);
-       pv->SetMaxValue(2.0f);
-       pos.x += 0.13f;
-       pos.y -= 0.015f;
-       ddim.x = 0.40f;
-       GetResource(RES_EVENT, EVENT_INTERFACE_CLIP, name);
+       pos.x  = 305.0f/640.0f;
+       pos.y  = 134.0f/480.0f;
+       ddim.x =  18.0f/640.0f;
+       ddim.y =  90.0f/480.0f;
+       psl = pw->CreateSlider(pos, ddim, 0, EVENT_INTERFACE_WHEEL);
+       psl->SetLimit(0.0f, 1.0f);
+       psl->SetArrowStep(0.1f);
+       psl->SetState(STATE_VALUE);
+       psl->SetState(STATE_SHADOW);
+       psl->SetTabOrder(13);
+       pos.y  = 300.0f/480.0f;
+       ddim.x = 180.0f/640.0f;
+       ddim.y =  16.0f/480.0f;
+       GetResource(RES_EVENT, EVENT_INTERFACE_WHEEL, name);
        pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL11, name);
        pl->SetJustif(1);
+       pos.x +=   8.0f/640.0f;
+       pos.y  = 240.0f/480.0f;
+       ddim.x =   2.0f/640.0f;
+       ddim.y =  70.0f/480.0f;
+       pw->CreateGroup(pos, ddim, 27, EVENT_LABEL1);
 
-       pos.x = ox+sx*8.5f;
-       pos.y = 0.53f;
-       ddim.x = dim.x*2.2f;
-       ddim.y = 18.0f/480.0f;
-       pv = pw->CreateEditValue(pos, ddim, 0, EVENT_INTERFACE_DETAIL);
-       pv->SetState(STATE_SHADOW);
-       pv->SetMinValue(0.0f);
-       pv->SetMaxValue(2.0f);
-       pos.x += 0.13f;
-       pos.y -= 0.015f;
-       ddim.x = 0.40f;
-       GetResource(RES_EVENT, EVENT_INTERFACE_DETAIL, name);
+       pos.x  = 330.0f/640.0f;
+       pos.y  = 134.0f/480.0f;
+       ddim.x =  18.0f/640.0f;
+       ddim.y =  90.0f/480.0f;
+       psl = pw->CreateSlider(pos, ddim, 0, EVENT_INTERFACE_CLIP);
+       psl->SetLimit(0.5f, 2.0f);
+       psl->SetArrowStep(0.1f);
+       psl->SetState(STATE_VALUE);
+       psl->SetState(STATE_SHADOW);
+       psl->SetTabOrder(14);
+       pos.y  = 280.0f/480.0f;
+       ddim.x = 180.0f/640.0f;
+       ddim.y =  16.0f/480.0f;
+       GetResource(RES_EVENT, EVENT_INTERFACE_CLIP, name);
        pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL12, name);
        pl->SetJustif(1);
+       pos.x +=   8.0f/640.0f;
+       pos.y  = 240.0f/480.0f;
+       ddim.x =   2.0f/640.0f;
+       ddim.y =  50.0f/480.0f;
+       pw->CreateGroup(pos, ddim, 27, EVENT_LABEL1);
 
-       if ( !m_bSimulSetup )
-       {
-           pos.x = ox+sx*8.5f;
-           pos.y = 0.47f;
-           ddim.x = dim.x*2.2f;
-           ddim.y = 18.0f/480.0f;
-           pv = pw->CreateEditValue(pos, ddim, 0, EVENT_INTERFACE_GADGET);
-           pv->SetState(STATE_SHADOW);
-           pv->SetMinValue(0.0f);
-           pv->SetMaxValue(1.0f);
-           pos.x += 0.13f;
-           pos.y -= 0.015f;
-           ddim.x = 0.40f;
-           GetResource(RES_EVENT, EVENT_INTERFACE_GADGET, name);
-           pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL13, name);
-           pl->SetJustif(1);
-       }
+       pos.x  = 355.0f/640.0f;
+       pos.y  = 134.0f/480.0f;
+       ddim.x =  18.0f/640.0f;
+       ddim.y =  90.0f/480.0f;
+       psl = pw->CreateSlider(pos, ddim, 0, EVENT_INTERFACE_DETAIL);
+       psl->SetLimit(0.0f, 2.0f);
+       psl->SetArrowStep(0.2f);
+       psl->SetState(STATE_VALUE);
+       psl->SetState(STATE_SHADOW);
+       psl->SetTabOrder(15);
+       pos.y  = 260.0f/480.0f;
+       ddim.x = 180.0f/640.0f;
+       ddim.y =  16.0f/480.0f;
+       GetResource(RES_EVENT, EVENT_INTERFACE_DETAIL, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL13, name);
+       pl->SetJustif(1);
+       pos.x +=   8.0f/640.0f;
+       pos.y  = 240.0f/480.0f;
+       ddim.x =   2.0f/640.0f;
+       ddim.y =  30.0f/480.0f;
+       pw->CreateGroup(pos, ddim, 27, EVENT_LABEL1);
 
-#if 0
        if ( !m_bSimulSetup )
        {
-           pos.x = ox+sx*8.5f;
-           pos.y = 0.41f;
-           ddim.x = dim.x*2.2f;
-           ddim.y = 18.0f/480.0f;
-           pv = pw->CreateEditValue(pos, ddim, 0, EVENT_INTERFACE_TEXTURE);
-           pv->SetState(STATE_SHADOW);
-           pv->SetType(EVT_INT);
-           pv->SetMinValue(0.0f);
-           pv->SetMaxValue(2.0f);
-           pv->SetStepValue(1.0f);
-           pos.x += 0.13f;
-           pos.y -= 0.015f;
-           ddim.x = 0.40f;
-           GetResource(RES_EVENT, EVENT_INTERFACE_TEXTURE, name);
+           pos.x  = 380.0f/640.0f;
+           pos.y  = 134.0f/480.0f;
+           ddim.x =  18.0f/640.0f;
+           ddim.y =  90.0f/480.0f;
+           psl = pw->CreateSlider(pos, ddim, 0, EVENT_INTERFACE_GADGET);
+           psl->SetLimit(0.0f, 1.0f);
+           psl->SetArrowStep(0.1f);
+           psl->SetState(STATE_VALUE);
+           psl->SetState(STATE_SHADOW);
+           psl->SetTabOrder(16);
+           pos.y  = 240.0f/480.0f;
+           ddim.x = 200.0f/640.0f;
+           ddim.y =  16.0f/480.0f;
+           GetResource(RES_EVENT, EVENT_INTERFACE_GADGET, name);
            pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL14, name);
            pl->SetJustif(1);
+           pos.x +=   8.0f/640.0f;
+           pos.y  = 240.0f/480.0f;
+           ddim.x =   2.0f/640.0f;
+           ddim.y =  10.0f/480.0f;
+           pw->CreateGroup(pos, ddim, 27, EVENT_LABEL1);
        }
-#endif
 
        ddim.x = dim.x*2;
        ddim.y = dim.y*1;
-       pos.x = ox+sx*10;
+       pos.x = ox+sx*3;
        pos.y = oy+sy*2;
-#if _POLISH
-       ddim.x += 20.0f/640.0f;
-       pos.x -= 20.0f/640.0f*3.0f;
-#endif
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_MIN);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(17);
        pos.x += ddim.x;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_NORM);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(18);
        pos.x += ddim.x;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_MAX);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(19);
 
        UpdateSetupButtons();
    }
@@ -1386,37 +1173,27 @@ void CMainDialog::ChangePhase(Phase phase)
        ddim.y = dim.y*0.5f;
        pos.x = ox+sx*3;
        pos.y = 0.65f;
-//?        pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_TOTO);
-//?        pc->SetState(STATE_SHADOW);
-//?        pos.y -= 0.048f;
-#if _SCHOOL
- #if _EDU
-       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_SOLUCE4);
-       pc->SetState(STATE_SHADOW);
-       pos.y -= 0.048f;
- #endif
-#else
-       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_MOVIES);
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_CBACK);
+       pc->SetState(STATE_RADIO);
        pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(6);
        pos.y -= 0.048f;
-#endif
-       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_SCROLL);
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_CBOARD);
+       pc->SetState(STATE_RADIO);
        pc->SetState(STATE_SHADOW);
-       pos.y -= 0.048f;
-       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_INVERTX);
+       pc->SetTabOrder(7);
+       pos.y -= 0.072f;
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_BLAST);
        pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(8);
        pos.y -= 0.048f;
-       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_INVERTY);
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_EFFECT);
        pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(9);
        pos.y -= 0.048f;
-       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_EFFECT);
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_FLASH);
        pc->SetState(STATE_SHADOW);
-//?        pos.y -= 0.048f;
-//?        pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_NICERST);
-//?        pc->SetState(STATE_SHADOW);
-//?        pos.y -= 0.048f;
-//?        pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_HIMSELF);
-//?        pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(10);
 
        ddim.x = dim.x*6;
        ddim.y = dim.y*0.5f;
@@ -1424,25 +1201,19 @@ void CMainDialog::ChangePhase(Phase phase)
        pos.y = 0.65f;
        pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_TOOLTIP);
        pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(11);
        pos.y -= 0.048f;
        pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_GLINT);
        pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(12);
        pos.y -= 0.048f;
        pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_RAIN);
        pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(13);
        pos.y -= 0.048f;
        pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_MOUSE);
        pc->SetState(STATE_SHADOW);
-       pos.y -= 0.048f;
-       pos.y -= 0.048f;
-       if ( !m_bSimulSetup )
-       {
-           pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_EDITMODE);
-           pc->SetState(STATE_SHADOW);
-       }
-       pos.y -= 0.048f;
-       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_EDITVALUE);
-       pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(14);
 
        UpdateSetupButtons();
    }
@@ -1450,16 +1221,16 @@ void CMainDialog::ChangePhase(Phase phase)
    if ( m_phase == PHASE_SETUPc  ||  // setup/commandes ?
         m_phase == PHASE_SETUPcs )
    {
-       pos.x = ox+sx*3;
-       pos.y = 320.0f/480.0f;
+       pos.x  = ox+sx*3;
+       pos.y  = 320.0f/480.0f;
        ddim.x = dim.x*15.0f;
        ddim.y = 18.0f/480.0f;
        GetResource(RES_TEXT, RT_SETUP_KEY1, name);
        pl = pw->CreateLabel(pos, ddim, 0, EVENT_INTERFACE_KINFO1, name);
        pl->SetJustif(1);
 
-       pos.x = ox+sx*3;
-       pos.y = 302.0f/480.0f;
+       pos.x  = ox+sx*3;
+       pos.y  = 302.0f/480.0f;
        ddim.x = dim.x*15.0f;
        ddim.y = 18.0f/480.0f;
        GetResource(RES_TEXT, RT_SETUP_KEY2, name);
@@ -1468,35 +1239,65 @@ void CMainDialog::ChangePhase(Phase phase)
 
        ddim.x = 428.0f/640.0f;
        ddim.y = 128.0f/480.0f;
-       pos.x = 105.0f/640.0f;
-       pos.y = 164.0f/480.0f;
-       pg = pw->CreateGroup(pos, ddim, 0, EVENT_INTERFACE_KGROUP);
+       pos.x  = 105.0f/640.0f;
+       pos.y  = 174.0f/480.0f;
+       pg = pw->CreateGroup(pos, ddim, 7, EVENT_INTERFACE_KGROUP);
        pg->ClearState(STATE_ENABLE);
        pg->SetState(STATE_DEAD);
        pg->SetState(STATE_SHADOW);
 
        ddim.x =  18.0f/640.0f;
        ddim.y = (20.0f/480.0f)*KEY_VISIBLE;
-       pos.x = 510.0f/640.0f;
-       pos.y = 168.0f/480.0f;
+       pos.x  = 510.0f/640.0f;
+       pos.y  = 178.0f/480.0f;
        ps = pw->CreateScroll(pos, ddim, -1, EVENT_INTERFACE_KSCROLL);
        ps->SetVisibleRatio((float)KEY_VISIBLE/KEY_TOTAL);
        ps->SetArrowStep(1.0f/((float)KEY_TOTAL-KEY_VISIBLE));
        UpdateKey();
 
-       ddim.x = dim.x*6;
-       ddim.y = dim.y*0.5f;
-       pos.x = ox+sx*3;
-       pos.y = 130.0f/480.0f;
-       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_JOYSTICK);
+       ddim.x = 224.0f/640.0f;
+       ddim.y =  16.0f/480.0f;
+       pos.x  = 105.0f/640.0f;
+       pos.y  = 144.0f/480.0f;
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_STEERING);
        pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(6);
 
-       ddim.x = dim.x*6;
-       ddim.y = dim.y*1;
-       pos.x = ox+sx*10;
-       pos.y = oy+sy*2;
+       ddim.x = 224.0f/640.0f;
+       ddim.y =  16.0f/480.0f;
+       pos.x  = 105.0f/640.0f;
+       pos.y  = 122.0f/480.0f;
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_JOYPAD);
+       pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(7);
+
+       ddim.x = 128.0f/640.0f;
+       ddim.y =  16.0f/480.0f;
+       pos.x  = 344.0f/640.0f;
+       pos.y  = 144.0f/480.0f;
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_FFBc);
+       pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(8);
+
+       ddim.x =  90.0f/640.0f;
+       ddim.y =  16.0f/480.0f;
+       pos.x  = 368.0f/640.0f;
+       pos.y  = 122.0f/480.0f;
+       psl = pw->CreateSlider(pos, ddim, -1, EVENT_INTERFACE_FFBs);
+       psl->SetState(STATE_SHADOW);
+       psl->SetState(STATE_VALUE);
+       psl->SetLimit(0.0f, 1.0f);
+       psl->SetArrowStep(0.1f);
+       psl->SetTabOrder(9);
+
+       ddim.x = 192.0f/640.0f;
+       ddim.y =  32.0f/480.0f;
+       pos.x  = 105.0f/640.0f;
+       pos.y  =  71.0f/480.0f;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_KDEF);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(10);
 
        UpdateSetupButtons();
    }
@@ -1504,216 +1305,248 @@ void CMainDialog::ChangePhase(Phase phase)
    if ( m_phase == PHASE_SETUPs  ||  // setup/sound ?
         m_phase == PHASE_SETUPss )
    {
-       pos.x = ox+sx*3;
-       pos.y = 0.55f;
-       ddim.x = dim.x*4.0f;
-       ddim.y = 18.0f/480.0f;
+       pos.x  = ox+sx*3;
+       pos.y  = 180.0f/480.0f;
+       ddim.x =  18.0f/640.0f;
+       ddim.y = 128.0f/480.0f;
        psl = pw->CreateSlider(pos, ddim, 0, EVENT_INTERFACE_VOLSOUND);
        psl->SetState(STATE_SHADOW);
        psl->SetLimit(0.0f, MAXVOLUME);
        psl->SetArrowStep(1.0f);
-       pos.y += ddim.y;
+       psl->SetTabOrder(6);
+       pos.y  = 306.0f/480.0f;
+       ddim.x = 200.0f/640.0f;
+       ddim.y =  18.0f/480.0f;
        GetResource(RES_EVENT, EVENT_INTERFACE_VOLSOUND, name);
        pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL1, name);
        pl->SetJustif(1);
 
-#if (_FULL | _NET) & _SOUNDTRACKS
-       pos.x = ox+sx*3;
-       pos.y = 0.40f;
-       ddim.x = dim.x*4.0f;
-       ddim.y = 18.0f/480.0f;
+#if 0
+       pos.x  = ox+sx*10;
+       pos.y  = 180.0f/480.0f;
+       ddim.x =  18.0f/640.0f;
+       ddim.y = 128.0f/480.0f;
        psl = pw->CreateSlider(pos, ddim, 0, EVENT_INTERFACE_VOLMUSIC);
        psl->SetState(STATE_SHADOW);
        psl->SetLimit(0.0f, MAXVOLUME);
        psl->SetArrowStep(1.0f);
-       pos.y += ddim.y;
+       psl->SetTabOrder(7);
+       pos.y  = 306.0f/480.0f;
+       ddim.x = 200.0f/640.0f;
+       ddim.y =  18.0f/480.0f;
        GetResource(RES_EVENT, EVENT_INTERFACE_VOLMUSIC, name);
        pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL2, name);
        pl->SetJustif(1);
 #endif
 
+       pos.x  = ox+sx*10;
+       pos.y  = 0.60f;
        ddim.x = dim.x*6;
        ddim.y = dim.y*0.5f;
-       pos.x = ox+sx*10;
-       pos.y = 0.55f;
        pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_SOUND3D);
        pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(8);
+#if _FRENCH|_ENGLISH|_DEUTSCH
+       pos.y -= 0.048f;
+       pc = pw->CreateCheck(pos, ddim, -1, EVENT_INTERFACE_COMMENTS);
+       pc->SetState(STATE_SHADOW);
+       pc->SetTabOrder(9);
+#endif
 
        ddim.x = dim.x*3;
        ddim.y = dim.y*1;
-       pos.x = ox+sx*10;
+       pos.x = ox+sx*3;
        pos.y = oy+sy*2;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_SILENT);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(10);
        pos.x += ddim.x;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_NOISY);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(11);
 
        UpdateSetupButtons();
    }
 
-   if ( m_phase == PHASE_WRITE  ||
-        m_phase == PHASE_WRITEs )
+   if ( m_phase == PHASE_WRITE )
    {
-       pos.x = 0.10f;
-       pos.y = 0.10f;
+       pos.x  = 0.10f;
+       pos.y  = 0.10f;
        ddim.x = 0.80f;
        ddim.y = 0.80f;
-       pw = m_interface->CreateWindows(pos, ddim, 13, EVENT_WINDOW5);
+       pw = m_interface->CreateWindows(pos, ddim, 12, EVENT_WINDOW4);
        pw->SetClosable(TRUE);
-       GetResource(RES_TEXT, RT_TITLE_WRITE, name);
-       pw->SetName(name);
+       pw->SetName(" ");
 
        pos.x  = 0.10f;
-       pos.y  = 0.40f;
+       pos.y  = 0.44f;
        ddim.x = 0.50f;
        ddim.y = 0.50f;
        pw->CreateGroup(pos, ddim, 5, EVENT_INTERFACE_GLINTl);  // coin orange
        pos.x  = 0.40f;
-       pos.y  = 0.10f;
+       pos.y  = 0.06f;
        ddim.x = 0.50f;
        ddim.y = 0.50f;
        pw->CreateGroup(pos, ddim, 4, EVENT_INTERFACE_GLINTr);  // coin bleu
 
-#if _NEWLOOK
-       pos.x  = 100.0f/640.0f;
-       pos.y  =  66.0f/480.0f;
-       ddim.x = 438.0f/640.0f;
-       ddim.y =  42.0f/480.0f;
-       pg = pw->CreateGroup(pos, ddim, 26, EVENT_LABEL1);  // violet
-       pg->SetState(STATE_SHADOW);
-#endif
-
-       pos.x  = 290.0f/640.0f;
-       ddim.x = 245.0f/640.0f;
+       pos.x  =  94.0f/640.0f;
+       ddim.x = 452.0f/640.0f;
+       pos.y  = 350.0f/480.0f;
+       ddim.y =  16.0f/480.0f;
+       GetResource(RES_TEXT, RT_IO_LIST, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL10, name);
+       pl->SetJustif(1);
 
-       pos.y  = 146.0f/480.0f;
-       ddim.y =  18.0f/480.0f;
-       GetResource(RES_EVENT, EVENT_INTERFACE_IOLABEL, name);
-       pl = pw->CreateLabel(pos, ddim, 0, EVENT_INTERFACE_IOLABEL, name);
+       pos.y  = 180.0f/480.0f;
+       ddim.y = 178.0f/480.0f;
+       pa = pw->CreateArray(pos, ddim, 0, EVENT_INTERFACE_IOLIST);
+       pa->SetState(STATE_DEFAULT);
+       pa->SetState(STATE_SHADOW);
+       pa->SetTabs(0,  70.0f/640.0f,  1, FONT_COLOBOT);  // filename
+       pa->SetTabs(1, 100.0f/640.0f,  1, FONT_COLOBOT);  // title
+       pa->SetTabs(2, 110.0f/640.0f,  1, FONT_COLOBOT);  // car
+       pa->SetTabs(3,  70.0f/640.0f,  1, FONT_COLOBOT);  // driver
+       pa->SetTabs(4,  60.0f/640.0f, -1, FONT_COLOBOT);  // chrono
+       pa->SetSelectCap(TRUE);
+       pa->SetFontSize(9.0f);
+       UpdateSceneList(m_sel[m_index]);
+       pa->SetTabOrder(1);
+       UpdateGhostList(TRUE);
+
+       pos.x  =  94.0f/640.0f;
+       pos.y  = 136.0f/480.0f;
+       ddim.x = 120.0f/640.0f;
+       ddim.y =  12.0f/480.0f;
+       GetResource(RES_TEXT, RT_IO_NAME, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL10, name);
        pl->SetJustif(1);
 
-       pos.y  = 130.0f/480.0f;
-       ddim.y =  18.0f/480.0f;
+       pos.x  = 214.0f/640.0f;
+       pos.y  = 138.0f/480.0f;
+       ddim.x = 332.0f/640.0f;
+       ddim.y =  26.0f/480.0f;
        pe = pw->CreateEdit(pos, ddim, 0, EVENT_INTERFACE_IONAME);
-       pe->SetState(STATE_SHADOW);
-       pe->SetFontType(FONT_COLOBOT);
-       pe->SetMaxChar(35);
-       IOReadName();
-
-       pos.y  = 190.0f/480.0f;
-       ddim.y = 190.0f/480.0f;
-       pli = pw->CreateList(pos, ddim, 0, EVENT_INTERFACE_IOLIST);
-       pli->SetState(STATE_SHADOW);
-
-       pos.y  = oy+sy*2;
-       ddim.y = dim.y*1;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_IOWRITE);
-       pb->SetState(STATE_SHADOW);
+       pe->SetFontSize(13.0f);
+       pe->SetMaxChar(25);
+       pe->SetFocus(TRUE);
 
-       pos.x  = 105.0f/640.0f;
-       pos.y  = 190.0f/480.0f;
-       ddim.x = 170.0f/640.0f;
-       ddim.y = dim.y*1;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_IODELETE);
+       pos.x  =  94.0f/640.0f;
+       pos.y  =  74.0f/480.0f;
+       ddim.x = 130.0f/640.0f;
+       ddim.y =  32.0f/480.0f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_WCANCEL);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(2);
 
-       pos.x  = 105.0f/640.0f;
-       pos.y  = 250.0f/480.0f;
-       ddim.x = 170.0f/640.0f;
-       ddim.y = 128.0f/480.0f;
-       pi = pw->CreateImage(pos, ddim, 0, EVENT_INTERFACE_IOIMAGE);
-       pi->SetState(STATE_SHADOW);
-
-       ddim.x = dim.x*4;
-       ddim.y = dim.y*1;
-       pos.x  = ox+sx*3;
-       pos.y  = oy+sy*2;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_BACK);
+       pos.x  = 336.0f/640.0f;
+       pos.y  =  74.0f/480.0f;
+       ddim.x = 210.0f/640.0f;
+       ddim.y =  32.0f/480.0f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_WOK);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(0);
+       pb->SetFocus(TRUE);
 
-       IOReadList();
-       IOUpdateList();
+       m_engine->SetBackground("inter01.tga", 0,0, 0,0, TRUE, TRUE);
+       m_engine->SetBackForce(TRUE);
    }
 
-   if ( m_phase == PHASE_READ  ||
-        m_phase == PHASE_READs )
+   if ( m_phase == PHASE_READ )
    {
-       pos.x = 0.10f;
-       pos.y = 0.10f;
+       pos.x  = 0.10f;
+       pos.y  = 0.10f;
        ddim.x = 0.80f;
        ddim.y = 0.80f;
-       pw = m_interface->CreateWindows(pos, ddim, 14, EVENT_WINDOW5);
+       pw = m_interface->CreateWindows(pos, ddim, 12, EVENT_WINDOW4);
        pw->SetClosable(TRUE);
-       GetResource(RES_TEXT, RT_TITLE_READ, name);
-       pw->SetName(name);
+       pw->SetName(" ");
 
        pos.x  = 0.10f;
-       pos.y  = 0.40f;
+       pos.y  = 0.44f;
        ddim.x = 0.50f;
        ddim.y = 0.50f;
        pw->CreateGroup(pos, ddim, 5, EVENT_INTERFACE_GLINTl);  // coin orange
        pos.x  = 0.40f;
-       pos.y  = 0.10f;
+       pos.y  = 0.06f;
        ddim.x = 0.50f;
        ddim.y = 0.50f;
        pw->CreateGroup(pos, ddim, 4, EVENT_INTERFACE_GLINTr);  // coin bleu
 
-#if _NEWLOOK
-       pos.x  = 100.0f/640.0f;
-       pos.y  =  66.0f/480.0f;
-       ddim.x = 438.0f/640.0f;
-       ddim.y =  42.0f/480.0f;
-       pg = pw->CreateGroup(pos, ddim, 26, EVENT_LABEL1);  // violet
-       pg->SetState(STATE_SHADOW);
-#endif
+       pos.x  =  94.0f/640.0f;
+       ddim.x = 452.0f/640.0f;
+       pos.y  = 350.0f/480.0f;
+       ddim.y =  16.0f/480.0f;
+       GetResource(RES_TEXT, RT_IO_LIST, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL10, name);
+       pl->SetJustif(1);
 
-       pos.x  = 290.0f/640.0f;
-       ddim.x = 245.0f/640.0f;
+       pos.y  = 180.0f/480.0f;
+       ddim.y = 178.0f/480.0f;
+       pa = pw->CreateArray(pos, ddim, 0, EVENT_INTERFACE_IOLIST);
+       pa->SetState(STATE_DEFAULT);
+       pa->SetState(STATE_SHADOW);
+       pa->SetTabs(0,  70.0f/640.0f,  1, FONT_COLOBOT);  // filename
+       pa->SetTabs(1, 100.0f/640.0f,  1, FONT_COLOBOT);  // title
+       pa->SetTabs(2, 110.0f/640.0f,  1, FONT_COLOBOT);  // car
+       pa->SetTabs(3,  70.0f/640.0f,  1, FONT_COLOBOT);  // driver
+       pa->SetTabs(4,  60.0f/640.0f, -1, FONT_COLOBOT);  // chrono
+       pa->SetSelectCap(TRUE);
+       pa->SetFontSize(9.0f);
+       UpdateSceneList(m_sel[m_index]);
+       pa->SetTabOrder(1);
+       m_bPesetas = FALSE;
+       BuyablePerso();
+       UpdateGhostList(FALSE);
+
+       pos.y  = 136.0f/480.0f;
+       ddim.y =  12.0f/480.0f;
+       GetResource(RES_TEXT, RT_IO_RINFO, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL10, name);
+       pl->SetJustif(0);
 
-       pos.y  = 160.0f/480.0f;
-       ddim.y = 190.0f/480.0f;
-       pli = pw->CreateList(pos, ddim, 0, EVENT_INTERFACE_IOLIST);
-       pli->SetState(STATE_SHADOW);
-
-       pos.y  = oy+sy*2;
-       ddim.y = dim.y*1;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_IOREAD);
-       pb->SetState(STATE_SHADOW);
-       if ( m_phase == PHASE_READs )
-       {
-           pb->SetState(STATE_WARNING);
-       }
+#if _DEMO|_SE
+       pos.x  = 123.0f/640.0f;
+       pos.y  = 243.0f/480.0f;
+       ddim.x = 380.0f/640.0f;
+       ddim.y =  30.0f/480.0f;
+       pg = pw->CreateGroup(pos, ddim, 9, EVENT_LABEL1);
+       pg->SetState(STATE_SHADOW);
+       pos.x  = 123.0f/640.0f;
+       pos.y  = 235.0f/480.0f;
+       ddim.x = 380.0f/640.0f;
+       ddim.y =  20.0f/480.0f;
+       GetResource(RES_TEXT, RT_SPEC_DEMO, name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL2, name);
+       pl->SetFontSize(15.0f);
+#endif
 
-       pos.x  = 105.0f/640.0f;
-       pos.y  = 160.0f/480.0f;
-       ddim.x = 170.0f/640.0f;
-       ddim.y = dim.y*1;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_IODELETE);
+       pos.x  =  94.0f/640.0f;
+       pos.y  =  74.0f/480.0f;
+       ddim.x = 130.0f/640.0f;
+       ddim.y =  32.0f/480.0f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_RCANCEL);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(2);
 
-       pos.x  = 105.0f/640.0f;
-       pos.y  = 220.0f/480.0f;
-       ddim.x = 170.0f/640.0f;
-       ddim.y = 128.0f/480.0f;
-       pi = pw->CreateImage(pos, ddim, 0, EVENT_INTERFACE_IOIMAGE);
-       pi->SetState(STATE_SHADOW);
-
-       ddim.x = dim.x*4;
-       ddim.y = dim.y*1;
-       pos.x  = ox+sx*3;
-       pos.y  = oy+sy*2;
-       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_BACK);
+       pos.x  = 336.0f/640.0f;
+       pos.y  =  74.0f/480.0f;
+       ddim.x = 210.0f/640.0f;
+       ddim.y =  32.0f/480.0f;
+       pb = pw->CreateButton(pos, ddim, -1, EVENT_INTERFACE_ROK);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
+       pb->SetTabOrder(0);
+       pb->SetFocus(TRUE);
 
-       IOReadList();
-       IOUpdateList();
+       SelectGhostList();
 
-       if ( m_phase == PHASE_READ )
-       {
-           m_engine->SetBackground("inter01.tga", 0,0, 0,0, TRUE, TRUE);
-           m_engine->SetBackForce(TRUE);
-       }
+       m_engine->SetBackground("inter01.tga", 0,0, 0,0, TRUE, TRUE);
+       m_engine->SetBackForce(TRUE);
    }
 
    if ( m_phase == PHASE_LOADING )
@@ -1722,13 +1555,9 @@ void CMainDialog::ChangePhase(Phase phase)
        pos.y  = 0.10f;
        ddim.x = 0.30f;
        ddim.y = 0.80f;
-#if _TEEN
-       pw = m_interface->CreateWindows(pos, ddim, 12, EVENT_WINDOW5);
-#else
-       pw = m_interface->CreateWindows(pos, ddim, 10, EVENT_WINDOW5);
-#endif
-       pw->SetName(" ");
+       pw = m_interface->CreateWindows(pos, ddim, 10, EVENT_WINDOW4);
 
+#if 0
        pos.x  = 0.35f;
        pos.y  = 0.60f;
        ddim.x = 0.30f;
@@ -1739,17 +1568,18 @@ void CMainDialog::ChangePhase(Phase phase)
        ddim.x = 0.30f;
        ddim.y = 0.30f;
        pw->CreateGroup(pos, ddim, 4, EVENT_INTERFACE_GLINTr);  // coin bleu
+#endif
 
-       pos.x  = 254.0f/640.0f;
-       pos.y  = 208.0f/480.0f;
-       ddim.x = 132.0f/640.0f;
+       pos.x  = 204.0f/640.0f;
+       pos.y  =  18.0f/480.0f;
+       ddim.x = 232.0f/640.0f;
        ddim.y =  42.0f/480.0f;
-       pg = pw->CreateGroup(pos, ddim, 22, EVENT_NULL);
+       pg = pw->CreateGroup(pos, ddim, 7, EVENT_NULL);
        pg->SetState(STATE_SHADOW);
 
-       pos.x  = 220.0f/640.0f;
-       pos.y  = 210.0f/480.0f;
-       ddim.x = 200.0f/640.0f;
+       pos.x  = 200.0f/640.0f;
+       pos.y  =  20.0f/480.0f;
+       ddim.x = 240.0f/640.0f;
        ddim.y =  20.0f/480.0f;
        GetResource(RES_TEXT, RT_DIALOG_LOADING, name);
        pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL1, name);
@@ -1771,20 +1601,12 @@ void CMainDialog::ChangePhase(Phase phase)
        pos.y  = 0.0f;
        ddim.x = 0.0f;
        ddim.y = 0.0f;
-       pw = m_interface->CreateWindows(pos, ddim, -1, EVENT_WINDOW5);
+       pw = m_interface->CreateWindows(pos, ddim, -1, EVENT_WINDOW4);
 
        m_engine->SetOverColor(RetColor(1.0f), D3DSTATETCb);
        m_engine->SetOverFront(TRUE);
 
-#if _FRENCH
        m_engine->SetBackground("alsyd.tga", 0,0, 0,0, TRUE, FALSE);
-#endif
-#if _POLISH
-       m_engine->SetBackground("manta.tga", 0,0, 0,0, TRUE, FALSE);
-#endif
-#if _WG
-       m_engine->SetBackground("wg.tga", 0,0, 0,0, TRUE, FALSE);
-#endif
        m_engine->SetBackForce(TRUE);
    }
    if ( m_phase == PHASE_WELCOME2 )
@@ -1793,21 +1615,17 @@ void CMainDialog::ChangePhase(Phase phase)
        m_sound->StopMusic();
        m_sound->PlayMusic(11, FALSE);
 #endif
-#if _POLISH
-       m_sound->StopMusic();
-       m_sound->PlayMusic(11, FALSE);
-#endif
 
        pos.x  = 0.0f;
        pos.y  = 0.0f;
        ddim.x = 0.0f;
        ddim.y = 0.0f;
-       pw = m_interface->CreateWindows(pos, ddim, -1, EVENT_WINDOW5);
+       pw = m_interface->CreateWindows(pos, ddim, -1, EVENT_WINDOW4);
 
        m_engine->SetOverColor(RetColor(1.0f), D3DSTATETCb);
        m_engine->SetOverFront(TRUE);
 
-       m_engine->SetBackground("colobot.tga", 0,0, 0,0, TRUE, FALSE);
+       m_engine->SetBackground("buzzing.tga", 0,0, 0,0, TRUE, FALSE);
        m_engine->SetBackForce(TRUE);
    }
    if ( m_phase == PHASE_WELCOME3 )
@@ -1816,7 +1634,7 @@ void CMainDialog::ChangePhase(Phase phase)
        pos.y  = 0.0f;
        ddim.x = 0.0f;
        ddim.y = 0.0f;
-       pw = m_interface->CreateWindows(pos, ddim, -1, EVENT_WINDOW5);
+       pw = m_interface->CreateWindows(pos, ddim, -1, EVENT_WINDOW4);
 
        m_engine->SetOverColor(RetColor(0.0f), D3DSTATETCw);
        m_engine->SetOverFront(TRUE);
@@ -1825,26 +1643,34 @@ void CMainDialog::ChangePhase(Phase phase)
        m_engine->SetBackground("epsitecf.tga", 0,0, 0,0, TRUE, FALSE);
 #endif
 #if _ENGLISH
-       m_engine->SetBackground("epsitece.tga", 0,0, 0,0, TRUE, FALSE);
+       m_engine->SetBackground("epsitecf.tga", 0,0, 0,0, TRUE, FALSE);
+#endif
+#if _DEUTSCH
+       m_engine->SetBackground("epsitecf.tga", 0,0, 0,0, TRUE, FALSE);
+#endif
+#if _ITALIAN
+       m_engine->SetBackground("epsitecf.tga", 0,0, 0,0, TRUE, FALSE);
 #endif
-#if _GERMAN | _WG
-       m_engine->SetBackground("epsitecd.tga", 0,0, 0,0, TRUE, FALSE);
+#if _SPANISH
+       m_engine->SetBackground("epsitecf.tga", 0,0, 0,0, TRUE, FALSE);
 #endif
-#if _POLISH
-       m_engine->SetBackground("epsitecp.tga", 0,0, 0,0, TRUE, FALSE);
+#if _PORTUGUESE
+       m_engine->SetBackground("epsitecf.tga", 0,0, 0,0, TRUE, FALSE);
 #endif
        m_engine->SetBackForce(TRUE);
    }
 
-   if ( m_phase == PHASE_GENERIC )
+   if ( m_phase >= PHASE_GENERIC1 &&
+        m_phase <= PHASE_GENERIC5 )
    {
        pos.x  = 0.0f;
        pos.y  = 0.0f;
        ddim.x = 0.0f;
        ddim.y = 0.0f;
-       pw = m_interface->CreateWindows(pos, ddim, -1, EVENT_WINDOW5);
+       pw = m_interface->CreateWindows(pos, ddim, -1, EVENT_WINDOW4);
 
-#if _FULL | _NET
+#if 0
+#if _FULL
        pos.x  =  80.0f/640.0f;
        pos.y  = 240.0f/480.0f;
        ddim.x = 490.0f/640.0f;
@@ -1853,7 +1679,7 @@ void CMainDialog::ChangePhase(Phase phase)
        pe->SetGenericMode(TRUE);
        pe->SetEditCap(FALSE);
        pe->SetHiliteCap(FALSE);
-       pe->SetFontType(FONT_COURIER);
+       pe->SetFontType(FONT_COLOBOT);
        pe->SetFontSize(8.0f);
        pe->ReadText("help\\authors.txt");
 
@@ -1865,70 +1691,49 @@ void CMainDialog::ChangePhase(Phase phase)
        pe->SetGenericMode(TRUE);
        pe->SetEditCap(FALSE);
        pe->SetHiliteCap(FALSE);
-       pe->SetFontType(FONT_COURIER);
+       pe->SetFontType(FONT_COLOBOT);
        pe->SetFontSize(6.5f);
        pe->ReadText("help\\licences.txt");
 #endif
-#if _SCHOOL
-#if _CEEBOTDEMO
+#if _DEMO|_SE
        pos.x  =  80.0f/640.0f;
-       pos.y  = 210.0f/480.0f;
+       pos.y  = 240.0f/480.0f;
        ddim.x = 490.0f/640.0f;
-       ddim.y = 150.0f/480.0f;
-#else
+       ddim.y = 110.0f/480.0f;
+       pe = pw->CreateEdit(pos, ddim, 0, EVENT_EDIT1);
+       pe->SetGenericMode(TRUE);
+       pe->SetEditCap(FALSE);
+       pe->SetHiliteCap(FALSE);
+       pe->SetFontType(FONT_COLOBOT);
+       pe->SetFontSize(8.0f);
+       pe->ReadText("help\\demo.txt");
+
        pos.x  =  80.0f/640.0f;
-       pos.y  = 200.0f/480.0f;
+       pos.y  = 140.0f/480.0f;
        ddim.x = 490.0f/640.0f;
-       ddim.y = 150.0f/480.0f;
-#endif
-       pe = pw->CreateEdit(pos, ddim, 0, EVENT_EDIT1);
+       ddim.y = 100.0f/480.0f;
+       pe = pw->CreateEdit(pos, ddim, 0, EVENT_EDIT2);
        pe->SetGenericMode(TRUE);
        pe->SetEditCap(FALSE);
        pe->SetHiliteCap(FALSE);
-       pe->SetFontType(FONT_COURIER);
+       pe->SetFontType(FONT_COLOBOT);
        pe->SetFontSize(8.0f);
        pe->ReadText("help\\authors.txt");
 #endif
-#if _DEMO
-//?        pos.x  =  80.0f/640.0f;
-//?        pos.y  = 240.0f/480.0f;
-//?        ddim.x = 490.0f/640.0f;
-//?        ddim.y = 110.0f/480.0f;
-//?        pe = pw->CreateEdit(pos, ddim, 0, EVENT_EDIT1);
-//?        pe->SetGenericMode(TRUE);
-//?        pe->SetEditCap(FALSE);
-//?        pe->SetHiliteCap(FALSE);
-//?        pe->SetFontType(FONT_COURIER);
-//?        pe->SetFontSize(8.0f);
-//?        pe->ReadText("help\\demo.txt");
-
-//?        pos.x  =  80.0f/640.0f;
-//?        pos.y  = 140.0f/480.0f;
-//?        ddim.x = 490.0f/640.0f;
-//?        ddim.y = 100.0f/480.0f;
-//?        pe = pw->CreateEdit(pos, ddim, 0, EVENT_EDIT2);
-//?        pe->SetGenericMode(TRUE);
-//?        pe->SetEditCap(FALSE);
-//?        pe->SetHiliteCap(FALSE);
-//?        pe->SetFontType(FONT_COURIER);
-//?        pe->SetFontSize(8.0f);
-//?        pe->ReadText("help\\authors.txt");
-#endif
 
-#if !_DEMO
        pos.x  =  40.0f/640.0f;
        pos.y  =  83.0f/480.0f;
        ddim.x = 246.0f/640.0f;
        ddim.y =  16.0f/480.0f;
        GetResource(RES_TEXT, RT_GENERIC_DEV1, name);
        pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL1, name);
-       pl->SetFontType(FONT_COURIER);
+       pl->SetFontType(FONT_COLOBOT);
        pl->SetFontSize(8.0f);
 
        pos.y  =  13.0f/480.0f;
        GetResource(RES_TEXT, RT_GENERIC_DEV2, name);
        pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL2, name);
-       pl->SetFontType(FONT_COURIER);
+       pl->SetFontType(FONT_COLOBOT);
        pl->SetFontSize(8.0f);
 
        pos.x  = 355.0f/640.0f;
@@ -1937,89 +1742,72 @@ void CMainDialog::ChangePhase(Phase phase)
        ddim.y =  16.0f/480.0f;
        GetResource(RES_TEXT, RT_GENERIC_EDIT1, name);
        pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL3, name);
-       pl->SetFontType(FONT_COURIER);
+       pl->SetFontType(FONT_COLOBOT);
        pl->SetFontSize(8.0f);
 
        pos.y  =  13.0f/480.0f;
        GetResource(RES_TEXT, RT_GENERIC_EDIT2, name);
        pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL4, name);
-       pl->SetFontType(FONT_COURIER);
+       pl->SetFontType(FONT_COLOBOT);
        pl->SetFontSize(8.0f);
 #endif
 
-#if _DEMO
-       pos.x  = 481.0f/640.0f;
-       pos.y  =  51.0f/480.0f;
-       ddim.x =  30.0f/640.0f;
-       ddim.y =  30.0f/480.0f;
+#if _DEMO|_SE
+       pos.x  =   4.0f/640.0f;
+       pos.y  = 436.0f/480.0f;
+       ddim.x =  28.0f/640.0f;
+       ddim.y =  28.0f/480.0f;
+       pb = pw->CreateButton(pos, ddim, m_phase==PHASE_GENERIC1?31:55, EVENT_INTERFACE_PREV);
+//?        pb->SetState(STATE_ENABLE, m_phase != PHASE_GENERIC1);
+//?        pb->SetState(STATE_SHADOW);
+       pos.x += 28.0f/640.0f;
+       pb = pw->CreateButton(pos, ddim, m_phase==PHASE_GENERIC5?31:48, EVENT_INTERFACE_NEXT);
+//?        pb->SetState(STATE_ENABLE, m_phase != PHASE_GENERIC5);
+//?        pb->SetState(STATE_SHADOW);
+
+       pos.x  = 580.0f/640.0f;
+       pos.y  = 436.0f/480.0f;
+       ddim.x =  28.0f/640.0f;
+       ddim.y =  28.0f/480.0f;
        pb = pw->CreateButton(pos, ddim, 49, EVENT_INTERFACE_ABORT);
-       pb->SetState(STATE_SHADOW);
+//?        pb->SetState(STATE_SHADOW);
+       pos.x += 28.0f/640.0f;
+       pb = pw->CreateButton(pos, ddim, 11, EVENT_INTERFACE_EXIT);
+//?        pb->SetState(STATE_SHADOW);
+
+       pos.x  =  64.0f/640.0f;
+       pos.y  = 440.0f/480.0f;
+       ddim.x = 512.0f/640.0f;
+       ddim.y =  20.0f/480.0f;
+       pg = pw->CreateGroup(pos, ddim, 9, EVENT_LABEL1);
+//?        pg->SetState(STATE_SHADOW);
+       pos.y -= 9.0f/480.0f;
+       GetResource(RES_TEXT, RT_GENERIC_DEMO1+(m_phase-PHASE_GENERIC1), name);
+       pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL2, name);
+       pl->SetFontType(FONT_COLOBOT);
+       pl->SetFontSize(11.0f);
 #else
-       pos.x  = 306.0f/640.0f;
-       pos.y  =  17.0f/480.0f;
+       pos.x  =  16.0f/640.0f;
+       pos.y  =  16.0f/480.0f;
        ddim.x =  30.0f/640.0f;
        ddim.y =  30.0f/480.0f;
        pb = pw->CreateButton(pos, ddim, 49, EVENT_INTERFACE_ABORT);
        pb->SetState(STATE_SHADOW);
 #endif
 
-#if _NEWLOOK
-#if _CEEBOTDEMO
-#if _TEEN
-       m_engine->SetBackground("genedt.tga", 0,0, 0,0, TRUE, TRUE);
-#else
-       m_engine->SetBackground("geneda.tga", 0,0, 0,0, TRUE, TRUE);
-#endif
-#else
-       m_engine->SetBackground("genern.tga", 0,0, 0,0, TRUE, TRUE);
-#endif
-#else
-#if _FRENCH
-#if _DEMO
-       m_engine->SetBackground("genedf.tga", 0,0, 0,0, TRUE, TRUE);
+#if _DEMO|_SE
+       sprintf(name, "gener%c.tga", '1'+(char)(m_phase-PHASE_GENERIC1));
+       m_engine->SetBackground(name, 0,0, 0,0, TRUE, TRUE);
 #else
        m_engine->SetBackground("generf.tga", 0,0, 0,0, TRUE, TRUE);
 #endif
-#endif
-#if _ENGLISH
-#if _DEMO
-       m_engine->SetBackground("genede.tga", 0,0, 0,0, TRUE, TRUE);
-#else
-       m_engine->SetBackground("genere.tga", 0,0, 0,0, TRUE, TRUE);
-#endif
-#endif
-#if _GERMAN
-#if _DEMO
-       m_engine->SetBackground("genedd.tga", 0,0, 0,0, TRUE, TRUE);
-#else
-       m_engine->SetBackground("genere.tga", 0,0, 0,0, TRUE, TRUE);
-#endif
-#endif
-#if _WG
-#if _DEMO
-       m_engine->SetBackground("genedd.tga", 0,0, 0,0, TRUE, TRUE);
-#else
-       m_engine->SetBackground("generd.tga", 0,0, 0,0, TRUE, TRUE);
-#endif
-#endif
-#if _POLISH
-#if _DEMO
-       m_engine->SetBackground("genedp.tga", 0,0, 0,0, TRUE, TRUE);
-#else
-       m_engine->SetBackground("generp.tga", 0,0, 0,0, TRUE, TRUE);
-#endif
-#endif
-#endif
        m_engine->SetBackForce(TRUE);
    }
 
    if ( m_phase == PHASE_INIT    ||
         m_phase == PHASE_NAME    ||
-        m_phase == PHASE_TRAINER ||
-        m_phase == PHASE_DEFI    ||
         m_phase == PHASE_MISSION ||
         m_phase == PHASE_FREE    ||
-        m_phase == PHASE_TEEN    ||
         m_phase == PHASE_USER    ||
         m_phase == PHASE_PROTO   ||
         m_phase == PHASE_SETUPd  ||
@@ -2027,31 +1815,21 @@ void CMainDialog::ChangePhase(Phase phase)
         m_phase == PHASE_SETUPp  ||
         m_phase == PHASE_SETUPc  ||
         m_phase == PHASE_SETUPs  ||
+        m_phase == PHASE_WRITE   ||
         m_phase == PHASE_READ    ||
-        m_phase == PHASE_LOADING )
+        m_phase == PHASE_LOADING ||
+        m_phase == PHASE_CAR     )
    {
-#if _SCHOOL
-#if _TEEN
-       pos.x  =  50.0f/640.0f;
-       pos.y  = 430.0f/480.0f;
-       ddim.x = 200.0f/640.0f;
-       ddim.y =  10.0f/480.0f;
-#else
-       pos.x  = 450.0f/640.0f;
-       pos.y  =   0.0f/480.0f;
-       ddim.x = 170.0f/640.0f;
-       ddim.y =   9.0f/480.0f;
-#endif
-#else
        pos.x  = 540.0f/640.0f;
        pos.y  =   9.0f/480.0f;
        ddim.x =  90.0f/640.0f;
-       ddim.y =  10.0f/480.0f;
-#endif
+       ddim.y =  14.0f/480.0f;
+       pg = pw->CreateGroup(pos, ddim, 23, EVENT_NULL);
+
+       pos.y -=   7.0f/480.0f;
        GetResource(RES_TEXT, RT_VERSION_ID, name);
        pl = pw->CreateLabel(pos, ddim, 0, EVENT_LABEL1, name);
-       pl->SetFontType(FONT_COURIER);
-       pl->SetFontSize(9.0f);
+       pl->SetFontSize(8.0f);
    }
 
    m_engine->LoadAllTexture();
@@ -2067,8 +1845,15 @@ BOOL CMainDialog::EventProcess(const Event &event)
    CList*      pl;
    CButton*    pb;
    CCheck*     pc;
+   CSlider*    ps;
+   CObject*    vehicle;
+   CPyro*      pyro;
    Event       newEvent;
+   EventMsg    window;
+   FPOINT      pos;
    float       welcomeLength;
+   int         i, err;
+   BOOL        bUpDown;
 
    if ( event.event == EVENT_FRAME )
    {
@@ -2146,10 +1931,46 @@ BOOL CMainDialog::EventProcess(const Event &event)
            return FALSE;
        }
 
-       m_glintTime += event.rTime;
+       if ( m_phase == PHASE_CAR )
+       {
+           CObject*    vehicle;
+           CPhysics*   physics;
+           D3DVECTOR   pos;
+
+           vehicle = m_main->SearchObject(OBJECT_CAR);
+           if ( vehicle != 0 )
+           {
+               if ( m_persoTime == 0.0f )
+               {
+                   pos = vehicle->RetPosition(0);
+                   pos.y += 10.0f;
+                   vehicle->SetPosition(0, pos);
+               }
+
+               physics = vehicle->RetPhysics();
+               if ( physics != 0 )
+               {
+                   m_persoTime += event.rTime;
+                   m_persoAngle += event.rTime*0.5f;
+                   CameraPerso();
+
+                   if ( m_persoTime > 2.5f && !m_persoRun )
+                   {
+                       m_persoRun = TRUE;
+                       physics->SetForceSlow(TRUE);  // moteur au ralenti
+                   }
+                   if ( m_persoTime > 4.0f )
+                   {
+                       physics->ForceMotorSpeedZ(sinf((m_persoTime-4.0f)*3.0f));
+                   }
+               }
+           }
+       }
+
+       m_glintTime += event.rTime*5.0f;
        GlintMove();  // bouge les reflets
 
-       FrameParticule(event.rTime);
+//?        FrameParticule(event.rTime);
 
        if ( m_bDialog )  // dialogue présent ?
        {
@@ -2165,40 +1986,118 @@ BOOL CMainDialog::EventProcess(const Event &event)
        NiceParticule(event.pos, event.keyState&KS_MLEFT);
    }
 
+   if ( event.event == EVENT_KEYDOWN )
+   {
+       window = EVENT_NULL;
+       bUpDown = FALSE;
+       if ( m_phase == PHASE_INIT )
+       {
+           window = EVENT_WINDOW4;
+           bUpDown = TRUE;
+       }
+       if ( m_phase == PHASE_NAME    ||
+            m_phase == PHASE_CAR     ||
+            m_phase == PHASE_MISSION ||
+            m_phase == PHASE_FREE    ||
+            m_phase == PHASE_USER    ||
+            m_phase == PHASE_PROTO   ||
+            m_phase == PHASE_SETUPd  ||
+            m_phase == PHASE_SETUPg  ||
+            m_phase == PHASE_SETUPp  ||
+            m_phase == PHASE_SETUPc  ||
+            m_phase == PHASE_SETUPs  ||
+            m_phase == PHASE_SETUPds ||
+            m_phase == PHASE_SETUPgs ||
+            m_phase == PHASE_SETUPps ||
+            m_phase == PHASE_SETUPcs ||
+            m_phase == PHASE_SETUPss ||
+            m_phase == PHASE_WRITE   ||
+            m_phase == PHASE_READ    )
+       {
+           window = EVENT_WINDOW4;
+       }
+       if ( m_bDialog )  // dialogue présent ?
+       {
+           window = EVENT_WINDOW9;
+           bUpDown = TRUE;
+       }
+       if ( window != EVENT_NULL )
+       {
+           if ( (event.param == VK_UP && bUpDown ) ||
+                event.param == VK_LEFT  ||
+                (event.param == VK_TAB && (event.keyState&KS_SHIFT) != 0) ||
+                (event.param == VK_JUP && bUpDown ) ||
+                event.param == VK_JLEFT )
+           {
+               ChangeTabOrder(window, -1, event.param);
+           }
+           if ( (event.param == VK_DOWN && bUpDown ) ||
+                event.param == VK_RIGHT  ||
+                (event.param == VK_TAB && (event.keyState&KS_SHIFT) == 0) ||
+                (event.param == VK_JDOWN && bUpDown ) ||
+                event.param == VK_JRIGHT )
+           {
+               ChangeTabOrder(window, 1, event.param);
+           }
+       }
+   }
+
    if ( m_bDialog )  // dialogue présent ?
    {
        m_interface->EventProcess(event);
 
-       if ( event.event == EVENT_DIALOG_OK ||
-            (event.event == EVENT_KEYDOWN && event.param == VK_RETURN ) )
+       if ( event.event == EVENT_DIALOG_OK )
        {
            StopDialog();
            if ( m_phase == PHASE_NAME )
            {
-               NameDelete();
+               if ( m_bDialogCreate )
+               {
+                   NameCreate();
+               }
+               if ( m_bDialogDelete )
+               {
+                   NameDelete();
+               }
+               if ( m_bDialogKid )
+               {
+                   m_main->ChangePhase(PHASE_INIT);
+               }
            }
-           if ( m_phase == PHASE_INIT )
+           else if ( m_phase == PHASE_INIT )
            {
 //?                m_event->MakeEvent(newEvent, EVENT_QUIT);
 //?                m_event->AddEvent(newEvent);
-               m_main->ChangePhase(PHASE_GENERIC);
+               m_main->ChangePhase(PHASE_GENERIC1);
            }
-           if ( m_phase == PHASE_SIMUL )
+           else if ( m_phase == PHASE_SIMUL )
            {
-               if ( m_bDialogDelete )
-               {
-                   m_main->DeleteObject();
-               }
-               else
+               m_main->ChangePhase(PHASE_TERM);
+           }
+           else if ( m_phase == PHASE_WRITE )
+           {
+               if ( DeleteGhostFile() )
                {
-                   m_main->ChangePhase(PHASE_TERM);
+                   m_main->ChangePhase(PHASE_WIN);
                }
            }
        }
+       if ( event.event == EVENT_KEYDOWN && event.param == VK_RETURN )
+       {
+           if ( m_phase == PHASE_NAME && m_bDialogCreate )
+           {
+               StopDialog();
+               NameCreate();
+           }
+       }
        if ( event.event == EVENT_DIALOG_CANCEL ||
-            (event.event == EVENT_KEYDOWN && event.param == VK_ESCAPE ) )
+            (event.event == EVENT_KEYDOWN && event.param == VK_ESCAPE) ||
+            (event.event == EVENT_KEYDOWN && event.param == VK_BUTTON9) )
        {
            StopDialog();
+           pos.x = 630.0f/640.0f;
+           pos.y =  10.0f/480.0f;
+           m_engine->MoveMousePos(pos);  // met la souris en bas à droite
        }
        if ( event.event == EVENT_INTERFACE_SETUP )
        {
@@ -2215,18 +2114,6 @@ BOOL CMainDialog::EventProcess(const Event &event)
            StopDialog();
            m_main->ChangePhase(PHASE_LOADING);
        }
-       if ( event.event == EVENT_INTERFACE_WRITE )
-       {
-           StopDialog();
-           StartSuspend();
-           ChangePhase(PHASE_WRITEs);
-       }
-       if ( event.event == EVENT_INTERFACE_READ )
-       {
-           StopDialog();
-           StartSuspend();
-           ChangePhase(PHASE_READs);
-       }
 
        return FALSE;
    }
@@ -2246,22 +2133,14 @@ BOOL CMainDialog::EventProcess(const Event &event)
                {
 //?                    StartQuit();  // voulez-vous quitter ?
                    m_sound->Play(SOUND_TZOING);
-                   m_main->ChangePhase(PHASE_GENERIC);
+                   m_main->ChangePhase(PHASE_GENERIC1);
                }
                break;
 
            case EVENT_INTERFACE_QUIT:
 //?                StartQuit();  // voulez-vous quitter ?
                m_sound->Play(SOUND_TZOING);
-               m_main->ChangePhase(PHASE_GENERIC);
-               break;
-
-           case EVENT_INTERFACE_TRAINER:
-               m_main->ChangePhase(PHASE_TRAINER);
-               break;
-
-           case EVENT_INTERFACE_DEFI:
-               m_main->ChangePhase(PHASE_DEFI);
+               m_main->ChangePhase(PHASE_GENERIC1);
                break;
 
            case EVENT_INTERFACE_MISSION:
@@ -2272,8 +2151,8 @@ BOOL CMainDialog::EventProcess(const Event &event)
                m_main->ChangePhase(PHASE_FREE);
                break;
 
-           case EVENT_INTERFACE_TEEN:
-               m_main->ChangePhase(PHASE_TEEN);
+           case EVENT_INTERFACE_DUEL:
+               m_main->ChangePhase(PHASE_READ);
                break;
 
            case EVENT_INTERFACE_USER:
@@ -2300,47 +2179,54 @@ BOOL CMainDialog::EventProcess(const Event &event)
        switch( event.event )
        {
            case EVENT_KEYDOWN:
-               if ( event.param == VK_RETURN )
+               if ( event.param == VK_ESCAPE  ||
+                    event.param == VK_DEFAULT )
                {
-                   NameSelect();
-               }
-               if ( event.param == VK_ESCAPE )
-               {
-                   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-                   if ( pw == 0 )  break;
-                   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_NCANCEL);
-                   if ( pb == 0 )  break;
-                   if ( pb->TestState(STATE_ENABLE) )
+                   if ( NameSelect() )
                    {
                        m_main->ChangePhase(PHASE_INIT);
                    }
                }
                break;
 
-           case EVENT_INTERFACE_NEDIT:
-               UpdateNameList();
-               UpdateNameControl();
+           case EVENT_INTERFACE_LEVEL1:
+               LevelSelect(1);
                break;
-
-           case EVENT_INTERFACE_NLIST:
-               UpdateNameEdit();
+           case EVENT_INTERFACE_LEVEL2:
+               LevelSelect(2);
+               break;
+           case EVENT_INTERFACE_LEVEL3:
+               LevelSelect(3);
+               break;
+           case EVENT_INTERFACE_LEVEL4:
+               LevelSelect(4);
                break;
 
-           case EVENT_INTERFACE_NOK:
+           case EVENT_INTERFACE_NLIST:
                NameSelect();
+               UpdateNameControl();
                break;
 
-           case EVENT_INTERFACE_PERSO:
-               NameSelect();
-               m_main->ChangePhase(PHASE_PERSO);
+           case EVENT_INTERFACE_NOK:
+               if ( NameSelect() )
+               {
+                   if ( RetLevel() == 1 )
+                   {
+                       StartKidLevel();
+                   }
+                   else
+                   {
+                       m_main->ChangePhase(PHASE_INIT);
+                   }
+               }
                break;
 
-           case EVENT_INTERFACE_NCANCEL:
-               m_main->ChangePhase(PHASE_INIT);
+           case EVENT_INTERFACE_NCREATE:
+               StartCreateGame();
                break;
 
            case EVENT_INTERFACE_NDELETE:
-               pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+               pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
                if ( pw == 0 )  break;
                pl = (CList*)pw->SearchControl(EVENT_INTERFACE_NLIST);
                if ( pl == 0 )  break;
@@ -2349,196 +2235,180 @@ BOOL CMainDialog::EventProcess(const Event &event)
        }
    }
 
-   if ( m_phase == PHASE_PERSO )
+   if ( m_phase == PHASE_CAR )
    {
        switch( event.event )
        {
            case EVENT_KEYDOWN:
-               if ( event.param == VK_RETURN )
-               {
-                   m_main->ChangePhase(PHASE_INIT);
-               }
-               if ( event.param == VK_ESCAPE )
+               if ( event.param == VK_ESCAPE  ||
+                    event.param == VK_BUTTON9 )
                {
-                   m_main->ChangePhase(PHASE_NAME);
+                   m_perso = m_persoCopy;
+                   WriteGamerInfo();
+                   m_main->ChangePhase(m_phasePerso);
+                   return FALSE;
                }
                break;
 
-           case EVENT_INTERFACE_PHEAD:
-               m_persoTab = 0;
-               UpdatePerso();
-               m_main->ScenePerso();
-               CameraPerso();
-               break;
-           case EVENT_INTERFACE_PBODY:
-               m_persoTab = 1;
-               UpdatePerso();
-               m_main->ScenePerso();
-               CameraPerso();
-               break;
-
-           case EVENT_INTERFACE_PFACE1:
-           case EVENT_INTERFACE_PFACE2:
-           case EVENT_INTERFACE_PFACE3:
-           case EVENT_INTERFACE_PFACE4:
-               m_perso.face = event.event-EVENT_INTERFACE_PFACE1;
-               WriteGamerPerso(m_main->RetGamerName());
-               UpdatePerso();
-               m_main->ScenePerso();
+           case EVENT_INTERFACE_PELEV:
+               ElevationPerso();
                break;
 
-           case EVENT_INTERFACE_PGLASS0:
-           case EVENT_INTERFACE_PGLASS1:
-           case EVENT_INTERFACE_PGLASS2:
-           case EVENT_INTERFACE_PGLASS3:
-           case EVENT_INTERFACE_PGLASS4:
-           case EVENT_INTERFACE_PGLASS5:
-           case EVENT_INTERFACE_PGLASS6:
-           case EVENT_INTERFACE_PGLASS7:
-           case EVENT_INTERFACE_PGLASS8:
-           case EVENT_INTERFACE_PGLASS9:
-               m_perso.glasses = event.event-EVENT_INTERFACE_PGLASS0;
-               WriteGamerPerso(m_main->RetGamerName());
-               UpdatePerso();
+           case EVENT_INTERFACE_PCOLOR0:
+           case EVENT_INTERFACE_PCOLOR1:
+           case EVENT_INTERFACE_PCOLOR2:
+           case EVENT_INTERFACE_PCOLOR3:
+           case EVENT_INTERFACE_PCOLOR4:
+           case EVENT_INTERFACE_PCOLOR5:
+           case EVENT_INTERFACE_PCOLOR6:
+           case EVENT_INTERFACE_PCOLOR7:
+           case EVENT_INTERFACE_PCOLOR8:
+           case EVENT_INTERFACE_PCOLOR9:
+           case EVENT_INTERFACE_PCOLOR10:
+           case EVENT_INTERFACE_PCOLOR11:
+           case EVENT_INTERFACE_PCOLOR12:
+           case EVENT_INTERFACE_PCOLOR13:
+           case EVENT_INTERFACE_PCOLOR14:
+           case EVENT_INTERFACE_PCOLOR15:
+           case EVENT_INTERFACE_PCOLOR16:
+           case EVENT_INTERFACE_PCOLOR17:
+           case EVENT_INTERFACE_PCOLOR18:
+           case EVENT_INTERFACE_PCOLOR19:
+               FixPerso(event.event-EVENT_INTERFACE_PCOLOR0);
+               WriteGamerInfo();
                m_main->ScenePerso();
-               break;
-
-           case EVENT_INTERFACE_PC0a:
-           case EVENT_INTERFACE_PC1a:
-           case EVENT_INTERFACE_PC2a:
-           case EVENT_INTERFACE_PC3a:
-           case EVENT_INTERFACE_PC4a:
-           case EVENT_INTERFACE_PC5a:
-           case EVENT_INTERFACE_PC6a:
-           case EVENT_INTERFACE_PC7a:
-           case EVENT_INTERFACE_PC8a:
-           case EVENT_INTERFACE_PC9a:
-               FixPerso(event.event-EVENT_INTERFACE_PC0a, 0);
-               WriteGamerPerso(m_main->RetGamerName());
                UpdatePerso();
-               m_main->ScenePerso();
+               m_persoTime = 0.01f;
+               m_persoRun = FALSE;
+               vehicle = m_main->SearchObject(OBJECT_CAR);
+               if ( vehicle != 0 )
+               {
+                   m_sound->Play(SOUND_FINDING);
+                   pyro = new CPyro(m_iMan);
+                   pyro->Create(PT_PAINTING, vehicle, 0.0f);
+               }
                break;
 
-           case EVENT_INTERFACE_PC0b:
-           case EVENT_INTERFACE_PC1b:
-           case EVENT_INTERFACE_PC2b:
-           case EVENT_INTERFACE_PC3b:
-           case EVENT_INTERFACE_PC4b:
-           case EVENT_INTERFACE_PC5b:
-           case EVENT_INTERFACE_PC6b:
-           case EVENT_INTERFACE_PC7b:
-           case EVENT_INTERFACE_PC8b:
-           case EVENT_INTERFACE_PC9b:
-               FixPerso(event.event-EVENT_INTERFACE_PC0b, 1);
-               WriteGamerPerso(m_main->RetGamerName());
-               UpdatePerso();
+           case EVENT_INTERFACE_PSUBMOD0:
+           case EVENT_INTERFACE_PSUBMOD1:
+           case EVENT_INTERFACE_PSUBMOD2:
+           case EVENT_INTERFACE_PSUBMOD3:
+               m_perso.subModel[m_perso.selectCar] = event.event-EVENT_INTERFACE_PSUBMOD0;
+               DefPerso(m_perso.selectCar);  // met la couleur standard
+               WriteGamerInfo();
                m_main->ScenePerso();
-               break;
-
-           case EVENT_INTERFACE_PCRa:
-           case EVENT_INTERFACE_PCGa:
-           case EVENT_INTERFACE_PCBa:
-           case EVENT_INTERFACE_PCRb:
-           case EVENT_INTERFACE_PCGb:
-           case EVENT_INTERFACE_PCBb:
-               ColorPerso();
-               WriteGamerPerso(m_main->RetGamerName());
                UpdatePerso();
-               m_main->ScenePerso();
+               m_persoTime = 0.01f;
+               m_persoRun = FALSE;
+               vehicle = m_main->SearchObject(OBJECT_CAR);
+               if ( vehicle != 0 )
+               {
+                   m_sound->Play(SOUND_FINDING);
+                   pyro = new CPyro(m_iMan);
+                   pyro->Create(PT_PAINTING, vehicle, 0.0f);
+               }
                break;
 
-           case EVENT_INTERFACE_PDEF:
-               DefPerso();
-               WriteGamerPerso(m_main->RetGamerName());
-               UpdatePerso();
-               m_main->ScenePerso();
+           case EVENT_INTERFACE_GHOSTm:
+               m_bGhostEnable = !m_bGhostEnable;
+               UpdateSceneGhost(m_sel[m_index]);
                break;
 
-           case EVENT_INTERFACE_PLROT:
-               m_persoAngle += 0.2f;
+           case EVENT_INTERFACE_PPREV:
+               if ( m_perso.selectCar > 0 )
+               {
+                   NextPerso(-1);
+                   m_main->ScenePerso();
+                   UpdatePerso();
+                   UpdateSceneGhost(m_sel[m_index]);
+                   m_persoTime = 0.0f;
+                   m_persoRun = FALSE;
+               }
                break;
-           case EVENT_INTERFACE_PRROT:
-               m_persoAngle -= 0.2f;
+           case EVENT_INTERFACE_PNEXT:
+#if _SE
+               if ( m_perso.selectCar < m_perso.total-1 )
+#else
+               if ( m_perso.selectCar < m_perso.buyable-1 ||
+                    m_perso.selectCar < m_perso.bonus-1   )
+#endif
+               {
+                   NextPerso(1);
+                   m_main->ScenePerso();
+                   UpdatePerso();
+                   UpdateSceneGhost(m_sel[m_index]);
+                   m_persoTime = 0.0f;
+                   m_persoRun = FALSE;
+               }
                break;
 
            case EVENT_INTERFACE_POK:
-               m_main->ChangePhase(PHASE_INIT);
+               SelectPerso();
+               m_bDuel = FALSE;
+               LaunchSimul();
                break;
+       }
 
-           case EVENT_INTERFACE_PCANCEL:
-               m_perso = m_persoCopy;
-               WriteGamerPerso(m_main->RetGamerName());
-               m_main->ChangePhase(PHASE_NAME);
-               break;
+       pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+       if ( pw == 0 )  return FALSE;
+
+       if ( event.event == pw->RetEventMsgClose() )
+       {
+           m_perso = m_persoCopy;
+           WriteGamerInfo();
+           m_main->ChangePhase(m_phasePerso);
+           return FALSE;
        }
    }
 
-   if ( m_phase == PHASE_TRAINER ||
-        m_phase == PHASE_DEFI    ||
-        m_phase == PHASE_MISSION ||
+   if ( m_phase == PHASE_MISSION ||
         m_phase == PHASE_FREE    ||
-        m_phase == PHASE_TEEN    ||
         m_phase == PHASE_USER    ||
         m_phase == PHASE_PROTO   )
    {
-       pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+       pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
        if ( pw == 0 )  return FALSE;
 
        if ( event.event == pw->RetEventMsgClose() ||
             event.event == EVENT_INTERFACE_BACK   ||
-           (event.event == EVENT_KEYDOWN && event.param == VK_ESCAPE) )
+           (event.event == EVENT_KEYDOWN && event.param == VK_ESCAPE) ||
+           (event.event == EVENT_KEYDOWN && event.param == VK_BUTTON9) )
        {
            m_main->ChangePhase(PHASE_INIT);
            return FALSE;
        }
-   }
 
-   if ( m_phase == PHASE_TRAINER ||
-        m_phase == PHASE_DEFI    ||
-        m_phase == PHASE_MISSION ||
-        m_phase == PHASE_FREE    ||
-        m_phase == PHASE_TEEN    ||
-        m_phase == PHASE_USER    ||
-        m_phase == PHASE_PROTO   )
-   {
-       switch( event.event )
+       if ( event.event == EVENT_KEYDOWN && event.param == VK_DEFAULT )
        {
-           case EVENT_INTERFACE_CHAP:
-               pl = (CList*)pw->SearchControl(EVENT_INTERFACE_CHAP);
-               if ( pl == 0 )  break;
-               m_chap[m_index] = pl->RetSelect();
-               UpdateSceneList(m_chap[m_index], m_sel[m_index]);
-               UpdateSceneResume((m_chap[m_index]+1)*100+(m_sel[m_index]+1));
-               break;
+           m_phaseTerm = m_phase;
+           m_bDuel = FALSE;
+           m_main->ChangePhase(PHASE_CAR);
+           return FALSE;
+       }
 
+       switch( event.event )
+       {
            case EVENT_INTERFACE_LIST:
                pl = (CList*)pw->SearchControl(EVENT_INTERFACE_LIST);
                if ( pl == 0 )  break;
-               m_sel[m_index] = pl->RetSelect();
-               UpdateSceneResume((m_chap[m_index]+1)*100+(m_sel[m_index]+1));
-               break;
-
-           case EVENT_INTERFACE_SOLUCE:
-               pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_SOLUCE);
-               if ( pb == 0 )  break;
-               m_bSceneSoluce = !m_bSceneSoluce;
-               pb->SetState(STATE_CHECK, m_bSceneSoluce);
+               i = pl->RetSelect();
+               m_sel[m_index] = m_listInfo[i].chap*10+m_listInfo[i].scene;
+               WriteGamerMission();
+               UpdateSceneResume(m_sel[m_index]);
+               UpdateSceneImage(m_sel[m_index]);
+               UpdateScenePlay(m_sel[m_index]);
+               UpdateScenePesetasMax(m_sel[m_index]);
                break;
 
            case EVENT_INTERFACE_PLAY:
-               if ( m_phase == PHASE_PROTO && m_chap[m_index] == 0 && m_sel[m_index] == 0 )
+               if ( m_phase == PHASE_PROTO && m_sel[m_index] == 11 )
                {
                    m_main->ChangePhase(PHASE_MODEL);
                    break;
                }
-               m_sceneRank = (m_chap[m_index]+1)*100+(m_sel[m_index]+1);
-               m_phaseTerm = m_phase;
-               m_main->ChangePhase(PHASE_LOADING);
-               break;
-
-           case EVENT_INTERFACE_READ:
                m_phaseTerm = m_phase;
-               m_main->ChangePhase(PHASE_READ);
+               m_bDuel = FALSE;
+               m_main->ChangePhase(PHASE_CAR);
                break;
        }
        return FALSE;
@@ -2550,12 +2420,13 @@ BOOL CMainDialog::EventProcess(const Event &event)
         m_phase == PHASE_SETUPc ||
         m_phase == PHASE_SETUPs )
    {
-       pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+       pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
        if ( pw == 0 )  return FALSE;
 
        if ( event.event == pw->RetEventMsgClose() ||
-            event.event == EVENT_INTERFACE_BACK   ||
-           (event.event == EVENT_KEYDOWN && event.param == VK_ESCAPE) )
+            event.event == EVENT_INTERFACE_OK     ||
+           (event.event == EVENT_KEYDOWN && event.param == VK_ESCAPE) ||
+           (event.event == EVENT_KEYDOWN && event.param == VK_BUTTON9) )
        {
            SetupMemorize();
            m_engine->ApplyChange();
@@ -2593,16 +2464,17 @@ BOOL CMainDialog::EventProcess(const Event &event)
         m_phase == PHASE_SETUPcs ||
         m_phase == PHASE_SETUPss )
    {
-       pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+       pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
        if ( pw == 0 )  return FALSE;
 
        if ( event.event == pw->RetEventMsgClose() ||
-            event.event == EVENT_INTERFACE_BACK   ||
-           (event.event == EVENT_KEYDOWN && event.param == VK_ESCAPE) )
+            event.event == EVENT_INTERFACE_OK     ||
+           (event.event == EVENT_KEYDOWN && event.param == VK_ESCAPE) ||
+           (event.event == EVENT_KEYDOWN && event.param == VK_BUTTON9) )
        {
            SetupMemorize();
            m_engine->ApplyChange();
-           m_interface->DeleteControl(EVENT_WINDOW5);
+           m_interface->DeleteControl(EVENT_WINDOW4);
            ChangePhase(PHASE_SIMUL);
            StopSuspend();
            return FALSE;
@@ -2643,7 +2515,7 @@ BOOL CMainDialog::EventProcess(const Event &event)
                break;
 
            case EVENT_INTERFACE_FULL:
-               pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+               pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
                if ( pw == 0 )  break;
                pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_FULL);
                if ( pc == 0 )  break;
@@ -2663,7 +2535,7 @@ BOOL CMainDialog::EventProcess(const Event &event)
                break;
 
            case EVENT_INTERFACE_APPLY:
-               pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+               pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
                if ( pw == 0 )  break;
                pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_APPLY);
                if ( pb == 0 )  break;
@@ -2687,12 +2559,6 @@ BOOL CMainDialog::EventProcess(const Event &event)
                UpdateSetupButtons();
                break;
 
-           case EVENT_INTERFACE_GROUND:
-               m_engine->SetGroundSpot(!m_engine->RetGroundSpot());
-               ChangeSetupButtons();
-               UpdateSetupButtons();
-               break;
-
            case EVENT_INTERFACE_DIRTY:
                m_engine->SetDirty(!m_engine->RetDirty());
                ChangeSetupButtons();
@@ -2730,7 +2596,14 @@ BOOL CMainDialog::EventProcess(const Event &event)
                UpdateSetupButtons();
                break;
 
+           case EVENT_INTERFACE_SUPER:
+               m_engine->SetSuperDetail(!m_engine->RetSuperDetail());
+               ChangeSetupButtons();
+               UpdateSetupButtons();
+               break;
+
            case EVENT_INTERFACE_PARTI:
+           case EVENT_INTERFACE_WHEEL:
            case EVENT_INTERFACE_CLIP:
            case EVENT_INTERFACE_DETAIL:
            case EVENT_INTERFACE_GADGET:
@@ -2759,12 +2632,6 @@ BOOL CMainDialog::EventProcess(const Event &event)
    {
        switch( event.event )
        {
-           case EVENT_INTERFACE_TOTO:
-               m_engine->SetTotoMode(!m_engine->RetTotoMode());
-               ChangeSetupButtons();
-               UpdateSetupButtons();
-               break;
-
            case EVENT_INTERFACE_TOOLTIP:
                m_bTooltip = !m_bTooltip;
                ChangeSetupButtons();
@@ -2789,73 +2656,42 @@ BOOL CMainDialog::EventProcess(const Event &event)
                UpdateSetupButtons();
                break;
 
-           case EVENT_INTERFACE_EDITMODE:
-               m_engine->SetEditIndentMode(!m_engine->RetEditIndentMode());
-               ChangeSetupButtons();
-               UpdateSetupButtons();
-               break;
-
-           case EVENT_INTERFACE_EDITVALUE:
-               if ( m_engine->RetEditIndentValue() == 2 )
-               {
-                   m_engine->SetEditIndentValue(4);
-               }
-               else
-               {
-                   m_engine->SetEditIndentValue(2);
-               }
-               ChangeSetupButtons();
-               UpdateSetupButtons();
-               break;
-
-           case EVENT_INTERFACE_SOLUCE4:
-               m_bSoluce4 = !m_bSoluce4;
-               ChangeSetupButtons();
-               UpdateSetupButtons();
-               break;
-
            case EVENT_INTERFACE_MOVIES:
                m_bMovies = !m_bMovies;
                ChangeSetupButtons();
                UpdateSetupButtons();
                break;
 
-           case EVENT_INTERFACE_NICERST:
-               m_bNiceReset = !m_bNiceReset;
+           case EVENT_INTERFACE_CBACK:
+               m_defCamera = CAMERA_BACK;
+               m_initCamera = m_defCamera;
                ChangeSetupButtons();
                UpdateSetupButtons();
                break;
 
-           case EVENT_INTERFACE_HIMSELF:
-               m_bHimselfDamage = !m_bHimselfDamage;
+           case EVENT_INTERFACE_CBOARD:
+               m_defCamera = CAMERA_ONBOARD;
+               m_initCamera = m_defCamera;
                ChangeSetupButtons();
                UpdateSetupButtons();
                break;
 
-           case EVENT_INTERFACE_SCROLL:
-               m_bCameraScroll = !m_bCameraScroll;
-               m_camera->SetCameraScroll(m_bCameraScroll);
-               ChangeSetupButtons();
-               UpdateSetupButtons();
-               break;
-
-           case EVENT_INTERFACE_INVERTX:
-               m_bCameraInvertX = !m_bCameraInvertX;
-               m_camera->SetCameraInvertX(m_bCameraInvertX);
+           case EVENT_INTERFACE_EFFECT:
+               m_bEffect = !m_bEffect;
+               m_camera->SetEffect(m_bEffect);
                ChangeSetupButtons();
                UpdateSetupButtons();
                break;
 
-           case EVENT_INTERFACE_INVERTY:
-               m_bCameraInvertY = !m_bCameraInvertY;
-               m_camera->SetCameraInvertY(m_bCameraInvertY);
+           case EVENT_INTERFACE_FLASH:
+               m_bFlash = !m_bFlash;
+               m_camera->SetFlash(m_bFlash);
                ChangeSetupButtons();
                UpdateSetupButtons();
                break;
 
-           case EVENT_INTERFACE_EFFECT:
-               m_bEffect = !m_bEffect;
-               m_camera->SetEffect(m_bEffect);
+           case EVENT_INTERFACE_BLAST:
+               m_bMotorBlast = !m_bMotorBlast;
                ChangeSetupButtons();
                UpdateSetupButtons();
                break;
@@ -2876,36 +2712,65 @@ BOOL CMainDialog::EventProcess(const Event &event)
            case EVENT_INTERFACE_KRIGHT:
            case EVENT_INTERFACE_KUP:
            case EVENT_INTERFACE_KDOWN:
-           case EVENT_INTERFACE_KGUP:
-           case EVENT_INTERFACE_KGDOWN:
+           case EVENT_INTERFACE_KBRAKE:
+           case EVENT_INTERFACE_KHORN:
            case EVENT_INTERFACE_KCAMERA:
-           case EVENT_INTERFACE_KDESEL:
-           case EVENT_INTERFACE_KACTION:
-           case EVENT_INTERFACE_KNEAR:
-           case EVENT_INTERFACE_KAWAY:
-           case EVENT_INTERFACE_KNEXT:
-           case EVENT_INTERFACE_KHUMAN:
            case EVENT_INTERFACE_KQUIT:
            case EVENT_INTERFACE_KHELP:
-           case EVENT_INTERFACE_KPROG:
-           case EVENT_INTERFACE_KCBOT:
-           case EVENT_INTERFACE_KSPEED10:
-           case EVENT_INTERFACE_KSPEED15:
-           case EVENT_INTERFACE_KSPEED20:
-           case EVENT_INTERFACE_KSPEED30:
-           case EVENT_INTERFACE_KVISIT:
                ChangeKey(event.event);
                UpdateKey();
                break;
 
            case EVENT_INTERFACE_KDEF:
                m_engine->ResetKey();
+               m_engine->SetForce(1.0f);
+               UpdateSetupButtons();
                UpdateKey();
                break;
 
-           case EVENT_INTERFACE_JOYSTICK:
-               m_engine->SetJoystick(!m_engine->RetJoystick());
+           case EVENT_INTERFACE_STEERING:
+               if ( m_engine->RetJoystick() == 1 )
+               {
+                   m_engine->SetJoystick(0);
+               }
+               else
+               {
+                   m_engine->SetJoystick(1);
+               }
+               UpdateSetupButtons();
+               UpdateKey();
+               break;
+           case EVENT_INTERFACE_JOYPAD:
+               if ( m_engine->RetJoystick() == 2 )
+               {
+                   m_engine->SetJoystick(0);
+               }
+               else
+               {
+                   m_engine->SetJoystick(2);
+               }
                UpdateSetupButtons();
+               UpdateKey();
+               break;
+           case EVENT_INTERFACE_FFBc:
+               if ( m_engine->RetFFB() )
+               {
+                   m_engine->SetFFB(FALSE);
+               }
+               else
+               {
+                   m_engine->SetFFB(TRUE);
+               }
+               m_engine->SetJoystick(m_engine->RetJoystick());
+               UpdateSetupButtons();
+               UpdateKey();
+               break;
+           case EVENT_INTERFACE_FFBs:
+               pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+               if ( pw == 0 )  break;
+               ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_FFBs);
+               if ( ps == 0 )  break;
+               m_engine->SetForce(ps->RetVisibleValue());
                break;
        }
        return FALSE;
@@ -2927,6 +2792,12 @@ BOOL CMainDialog::EventProcess(const Event &event)
                UpdateSetupButtons();
                break;
 
+           case EVENT_INTERFACE_COMMENTS:
+               m_sound->SetComments(!m_sound->RetComments());
+               ChangeSetupButtons();
+               UpdateSetupButtons();
+               break;
+
            case EVENT_INTERFACE_SILENT:
                m_sound->SetAudioVolume(0);
                m_sound->SetMidiVolume(0);
@@ -2941,81 +2812,80 @@ BOOL CMainDialog::EventProcess(const Event &event)
        return FALSE;
    }
 
-   if ( m_phase == PHASE_READ )
+   if ( m_phase == PHASE_WRITE )
    {
-       pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+       pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
        if ( pw == 0 )  return FALSE;
 
        if ( event.event == pw->RetEventMsgClose() ||
-            event.event == EVENT_INTERFACE_BACK   ||
-           (event.event == EVENT_KEYDOWN && event.param == VK_ESCAPE) )
+            event.event == EVENT_INTERFACE_OK     ||
+           (event.event == EVENT_KEYDOWN && event.param == VK_ESCAPE) ||
+           (event.event == EVENT_KEYDOWN && event.param == VK_BUTTON9) )
        {
-           ChangePhase(m_phaseTerm);
+           m_main->ChangePhase(PHASE_WIN);
+           return FALSE;
        }
 
-       if ( event.event == EVENT_INTERFACE_IOLIST )
-       {
-           IOUpdateList();
-       }
-       if ( event.event == EVENT_INTERFACE_IODELETE )
-       {
-           IODeleteScene();
-           IOUpdateList();
-       }
-       if ( event.event == EVENT_INTERFACE_IOREAD )
+       switch( event.event )
        {
-           if ( IOReadScene() )
-           {
-               m_main->ChangePhase(PHASE_LOADING);
-           }
+           case EVENT_INTERFACE_IOLIST:
+               SelectGhostList();
+               break;
+           case EVENT_INTERFACE_WOK:
+               err = WriteGhostFile();
+               if ( err == 0 )  // ok ?
+               {
+                   m_main->ChangePhase(PHASE_WIN);
+               }
+               if ( err == 2 )  // fichier existe déjà ?
+               {
+                   StartDeleteFile(m_ghostName);
+               }
+               break;
+           case EVENT_INTERFACE_WCANCEL:
+               m_main->ChangePhase(PHASE_WIN);
+               break;
        }
-
-       return FALSE;
    }
 
-   if ( m_phase == PHASE_WRITEs ||
-        m_phase == PHASE_READs  )
+   if ( m_phase == PHASE_READ )
    {
-       pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+       pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
        if ( pw == 0 )  return FALSE;
 
        if ( event.event == pw->RetEventMsgClose() ||
-            event.event == EVENT_INTERFACE_BACK   ||
-           (event.event == EVENT_KEYDOWN && event.param == VK_ESCAPE) )
+            event.event == EVENT_INTERFACE_OK     ||
+           (event.event == EVENT_KEYDOWN && event.param == VK_ESCAPE) ||
+           (event.event == EVENT_KEYDOWN && event.param == VK_BUTTON9) )
        {
-           m_interface->DeleteControl(EVENT_WINDOW5);
-           ChangePhase(PHASE_SIMUL);
-           StopSuspend();
+           m_main->ChangePhase(PHASE_INIT);
+           return FALSE;
        }
 
-       if ( event.event == EVENT_INTERFACE_IOLIST )
-       {
-           IOUpdateList();
-       }
-       if ( event.event == EVENT_INTERFACE_IODELETE )
-       {
-           IODeleteScene();
-           IOUpdateList();
-       }
-       if ( event.event == EVENT_INTERFACE_IOWRITE )
-       {
-           IOWriteScene();
-           m_interface->DeleteControl(EVENT_WINDOW5);
-           ChangePhase(PHASE_SIMUL);
-           StopSuspend();
-       }
-       if ( event.event == EVENT_INTERFACE_IOREAD )
+       if ( event.event == EVENT_KEYDOWN && event.param == VK_DEFAULT )
        {
-           if ( IOReadScene() )
+           if ( ReadGhostFile() )
            {
-               m_interface->DeleteControl(EVENT_WINDOW5);
-               ChangePhase(PHASE_SIMUL);
-               StopSuspend();
-               m_main->ChangePhase(PHASE_LOADING);
+               LaunchSimul();
+               return FALSE;
            }
        }
 
-       return FALSE;
+       switch( event.event )
+       {
+           case EVENT_INTERFACE_IOLIST:
+               SelectGhostList();
+               break;
+           case EVENT_INTERFACE_ROK:
+               if ( ReadGhostFile() )
+               {
+                   LaunchSimul();
+               }
+               break;
+           case EVENT_INTERFACE_RCANCEL:
+               m_main->ChangePhase(PHASE_INIT);
+               break;
+       }
    }
 
    if ( m_phase == PHASE_WELCOME1 )
@@ -3049,37 +2919,197 @@ BOOL CMainDialog::EventProcess(const Event &event)
        }
    }
 
-   if ( m_phase == PHASE_GENERIC )
+   if ( m_phase >= PHASE_GENERIC1 &&
+        m_phase <= PHASE_GENERIC5 )
    {
        if ( event.event == EVENT_INTERFACE_ABORT )
        {
            ChangePhase(PHASE_INIT);
        }
+#if _DEMO|_SE
+       if ( event.event == EVENT_INTERFACE_EXIT )
+       {
+           m_event->MakeEvent(newEvent, EVENT_QUIT);
+           m_event->AddEvent(newEvent);
+       }
+       if ( event.event == EVENT_INTERFACE_PREV )
+       {
+           if ( m_phase == PHASE_GENERIC1 )
+           {
+           }
+           else if ( m_phase == PHASE_GENERIC2 )
+           {
+               ChangePhase(PHASE_GENERIC1);
+           }
+           else if ( m_phase == PHASE_GENERIC3 )
+           {
+               ChangePhase(PHASE_GENERIC2);
+           }
+           else if ( m_phase == PHASE_GENERIC4 )
+           {
+               ChangePhase(PHASE_GENERIC3);
+           }
+           else
+           {
+               ChangePhase(PHASE_GENERIC4);
+           }
+       }
+       if ( event.event == EVENT_INTERFACE_NEXT )
+       {
+           if ( m_phase == PHASE_GENERIC1 )
+           {
+               ChangePhase(PHASE_GENERIC2);
+           }
+           else if ( m_phase == PHASE_GENERIC2 )
+           {
+               ChangePhase(PHASE_GENERIC3);
+           }
+           else if ( m_phase == PHASE_GENERIC3 )
+           {
+               ChangePhase(PHASE_GENERIC4);
+           }
+           else if ( m_phase == PHASE_GENERIC4 )
+           {
+               ChangePhase(PHASE_GENERIC5);
+           }
+           else
+           {
+           }
+       }
+#endif
 
        if ( event.event == EVENT_KEYDOWN )
        {
-           if ( event.param == VK_ESCAPE )
+           if ( event.param == VK_ESCAPE  ||
+                event.param == VK_BUTTON2 ||
+                event.param == VK_BUTTON9 )
            {
                ChangePhase(PHASE_INIT);
            }
            else
            {
+#if _DEMO|_SE
+               if ( m_phase == PHASE_GENERIC1 )
+               {
+                   ChangePhase(PHASE_GENERIC2);
+               }
+               else if ( m_phase == PHASE_GENERIC2 )
+               {
+                   ChangePhase(PHASE_GENERIC3);
+               }
+               else if ( m_phase == PHASE_GENERIC3 )
+               {
+                   ChangePhase(PHASE_GENERIC4);
+               }
+               else if ( m_phase == PHASE_GENERIC4 )
+               {
+                   ChangePhase(PHASE_GENERIC5);
+               }
+               else
+               {
+                   m_event->MakeEvent(newEvent, EVENT_QUIT);
+                   m_event->AddEvent(newEvent);
+               }
+#else
                m_event->MakeEvent(newEvent, EVENT_QUIT);
                m_event->AddEvent(newEvent);
+#endif
            }
        }
 
        if ( event.event == EVENT_LBUTTONDOWN ||
             event.event == EVENT_RBUTTONDOWN )
        {
+#if _DEMO|_SE
+           if ( m_phase == PHASE_GENERIC1 )
+           {
+               ChangePhase(PHASE_GENERIC2);
+           }
+           else if ( m_phase == PHASE_GENERIC2 )
+           {
+               ChangePhase(PHASE_GENERIC3);
+           }
+           else if ( m_phase == PHASE_GENERIC3 )
+           {
+               ChangePhase(PHASE_GENERIC4);
+           }
+           else if ( m_phase == PHASE_GENERIC4 )
+           {
+               ChangePhase(PHASE_GENERIC5);
+           }
+           else
+           {
+               m_event->MakeEvent(newEvent, EVENT_QUIT);
+               m_event->AddEvent(newEvent);
+           }
+#else
            m_event->MakeEvent(newEvent, EVENT_QUIT);
            m_event->AddEvent(newEvent);
+#endif
        }
    }
 
    return TRUE;
 }
 
+// Change le bouton que a le focus.
+
+void CMainDialog::ChangeTabOrder(EventMsg window, int dir, int param)
+{
+   CWindow*    pw;
+   CControl*   pc;
+   CControl*   pn;
+   int         rank, i;
+
+   pw = (CWindow*)m_interface->SearchControl(window);
+   if ( pw == 0 )  return;
+
+   pc = pw->SearchControl();  // cherche bouton avec le focus
+   if ( pc == 0 )  return;
+
+   rank = pc->RetTabOrder();
+   if ( rank == -1 )  return;
+
+   for ( i=0 ; i<30 ; i++ )
+   {
+       rank += dir;
+       if ( rank <  0 )  rank = 29;
+       if ( rank > 29 )  rank =  0;
+       pn = pw->SearchControl(rank);  // cherche le nouveau bouton
+       if ( pn == 0 )  continue;
+       if ( !pn->TestState(STATE_VISIBLE) )  continue;
+       if ( !pn->TestState(STATE_ENABLE ) )  continue;
+       break;
+   }
+   if ( pn == 0 ) return;
+
+   pc->SetFocus(FALSE);
+   pn->SetFocus(TRUE);
+}
+
+// Débute une mission.
+
+void CMainDialog::LaunchSimul()
+{
+   if ( m_bDuel )
+   {
+       if ( m_duelType == 's' )  strcpy(m_sceneName, "scene");
+       if ( m_duelType == 'f' )  strcpy(m_sceneName, "free");
+       if ( m_duelType == 'u' )  strcpy(m_sceneName, "user");
+       if ( m_duelType == 'p' )  strcpy(m_sceneName, "proto");
+       m_sceneRank = m_duelMission;
+   }
+   else
+   {
+       if ( m_phaseTerm == PHASE_MISSION )  strcpy(m_sceneName, "scene");
+       if ( m_phaseTerm == PHASE_FREE    )  strcpy(m_sceneName, "free");
+       if ( m_phaseTerm == PHASE_USER    )  strcpy(m_sceneName, "user");
+       if ( m_phaseTerm == PHASE_PROTO   )  strcpy(m_sceneName, "proto");
+       m_sceneRank = m_sel[m_index];
+   }
+   m_main->ChangePhase(PHASE_LOADING);
+}
+
 
 // Fait bouger les reflets.
 
@@ -3091,7 +3121,7 @@ void CMainDialog::GlintMove()
 
    if ( m_phase == PHASE_SIMUL )  return;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw == 0 )  return;
 
    if ( m_phase == PHASE_INIT )
@@ -3125,13 +3155,7 @@ void CMainDialog::GlintMove()
        }
    }
 
-   if ( m_phase == PHASE_NAME    ||
-        m_phase == PHASE_TRAINER ||
-        m_phase == PHASE_MISSION ||
-        m_phase == PHASE_FREE    ||
-        m_phase == PHASE_TEEN    ||
-        m_phase == PHASE_USER    ||
-        m_phase == PHASE_PROTO   )
+   if ( m_phase == PHASE_NAME )
    {
        pg = (CGroup*)pw->SearchControl(EVENT_INTERFACE_GLINTl);
        if ( pg != 0 )
@@ -3162,49 +3186,10 @@ void CMainDialog::GlintMove()
        }
    }
 
-   if ( m_phase == PHASE_SETUPd  ||
-        m_phase == PHASE_SETUPg  ||
-        m_phase == PHASE_SETUPp  ||
-        m_phase == PHASE_SETUPc  ||
-        m_phase == PHASE_SETUPs  ||
-        m_phase == PHASE_SETUPds ||
-        m_phase == PHASE_SETUPgs ||
-        m_phase == PHASE_SETUPps ||
-        m_phase == PHASE_SETUPcs ||
-        m_phase == PHASE_SETUPss )
-   {
-       pg = (CGroup*)pw->SearchControl(EVENT_INTERFACE_GLINTu);
-       if ( pg != 0 )
-       {
-           zoom.y = sinf(m_glintTime*0.27f);
-           pos.x = 0.10f;
-           pos.y = 0.76f;
-           dim.x = 0.80f;
-           dim.y = 0.32f+0.20f*zoom.y;
-           pos.y -= dim.y;
-           pg->SetPos(pos);
-           pg->SetDim(dim);
-       }
-
-       pg = (CGroup*)pw->SearchControl(EVENT_INTERFACE_GLINTr);
-       if ( pg != 0 )
-       {
-           zoom.x = sinf(m_glintTime*0.29f);
-           zoom.y = sinf(m_glintTime*0.14f);
-           pos.x = 0.90f;
-           pos.y = 0.10f;
-           dim.x = 0.40f+0.20f*zoom.x;
-           dim.y = 0.40f+0.20f*zoom.y;
-           pos.x -= dim.x;
-           pg->SetPos(pos);
-           pg->SetDim(dim);
-       }
-   }
-
-   if ( m_phase == PHASE_WRITE  ||
-        m_phase == PHASE_READ   ||
-        m_phase == PHASE_WRITEs ||
-        m_phase == PHASE_READs  )
+   if ( m_phase == PHASE_FREE    ||
+        m_phase == PHASE_USER    ||
+        m_phase == PHASE_PROTO   ||
+        m_phase == PHASE_CAR     )
    {
        pg = (CGroup*)pw->SearchControl(EVENT_INTERFACE_GLINTl);
        if ( pg != 0 )
@@ -3234,16 +3219,42 @@ void CMainDialog::GlintMove()
            pg->SetDim(dim);
        }
    }
-}
 
-
-// Retourne la position pour un son.
-
-D3DVECTOR SoundPos(FPOINT pos)
-{
-   D3DVECTOR   s;
-
-   s.x = (pos.x-0.5f)*2.0f;
+   if ( m_phase == PHASE_SETUPd  ||
+        m_phase == PHASE_SETUPg  ||
+        m_phase == PHASE_SETUPp  ||
+        m_phase == PHASE_SETUPc  ||
+        m_phase == PHASE_SETUPs  ||
+        m_phase == PHASE_SETUPds ||
+        m_phase == PHASE_SETUPgs ||
+        m_phase == PHASE_SETUPps ||
+        m_phase == PHASE_SETUPcs ||
+        m_phase == PHASE_SETUPss )
+   {
+       pg = (CGroup*)pw->SearchControl(EVENT_INTERFACE_GLINTr);
+       if ( pg != 0 )
+       {
+           zoom.x = sinf(m_glintTime*0.29f);
+           zoom.y = sinf(m_glintTime*0.14f);
+           pos.x = 0.90f;
+           pos.y = 0.10f;
+           dim.x = 0.40f+0.20f*zoom.x;
+           dim.y = 0.40f+0.20f*zoom.y;
+           pos.x -= dim.x;
+           pg->SetPos(pos);
+           pg->SetDim(dim);
+       }
+   }
+}
+
+
+// Retourne la position pour un son.
+
+D3DVECTOR SoundPos(FPOINT pos)
+{
+   D3DVECTOR   s;
+
+   s.x = (pos.x-0.5f)*2.0f;
    s.y = (pos.y-0.5f)*2.0f;
    s.z = 0.0f;
 
@@ -3267,8 +3278,6 @@ D3DVECTOR SoundRand()
 
 void CMainDialog::FrameParticule(float rTime)
 {
-#if _NEWLOOK
-#else
    D3DVECTOR   pos, speed;
    FPOINT      dim;
    float       *pParti, *pGlint;
@@ -3353,11 +3362,8 @@ void CMainDialog::FrameParticule(float rTime)
        pGlint = glintPosInit;
    }
    else if ( m_phase == PHASE_NAME    ||
-             m_phase == PHASE_TRAINER ||
-             m_phase == PHASE_DEFI    ||
              m_phase == PHASE_MISSION ||
              m_phase == PHASE_FREE    ||
-             m_phase == PHASE_TEEN    ||
              m_phase == PHASE_USER    ||
              m_phase == PHASE_PROTO   ||
              m_phase == PHASE_SETUPd  ||
@@ -3418,14 +3424,14 @@ void CMainDialog::FrameParticule(float rTime)
                    dim.y = dim.x/0.75f;
                    m_particule->CreateParticule(pos, speed, dim,
                                                 rand()%2?PARTIGLINT:PARTICONTROL,
-                                                Rand()*0.4f+0.4f, 0.0f, 0.0f,
+                                                Rand()*0.4f+0.4f, 0.0f,
                                                 SH_INTERFACE);
                    m_partiTime[i] = 0.5f+Rand()*0.5f;
                }
 
                if ( r == 2 )
                {
-                   ii = rand()%7;
+                   ii = rand()%5;
                    if ( ii == 0 )
                    {
                        m_sound->Play(SOUND_ENERGY, SoundRand(), 0.2f+Rand()*0.2f);
@@ -3451,16 +3457,6 @@ void CMainDialog::FrameParticule(float rTime)
                        m_sound->Play(SOUND_RADAR, SoundRand(), 0.2f+Rand()*0.2f);
                        m_partiTime[i] = 0.5f+Rand()*1.0f;
                    }
-                   if ( ii == 5 )
-                   {
-                       m_sound->Play(SOUND_GFLAT, SoundRand(), 0.3f+Rand()*0.3f);
-                       m_partiTime[i] = 2.0f+Rand()*4.0f;
-                   }
-                   if ( ii == 6 )
-                   {
-                       m_sound->Play(SOUND_ALARMt, SoundRand(), 0.1f+Rand()*0.1f);
-                       m_partiTime[i] = 2.0f+Rand()*4.0f;
-                   }
                }
            }
        }
@@ -3483,7 +3479,7 @@ void CMainDialog::FrameParticule(float rTime)
                    dim.x = 0.005f+Rand()*0.005f;
                    dim.y = dim.x/0.75f;
                    m_particule->CreateParticule(pos, speed, dim, PARTIBLITZ,
-                                                Rand()*0.2f+0.2f, 0.0f, 0.0f,
+                                                Rand()*0.2f+0.2f, 0.0f,
                                                 SH_INTERFACE);
                    pos.x = m_partiPos[i].x;
                    pos.y = m_partiPos[i].y;
@@ -3495,7 +3491,7 @@ void CMainDialog::FrameParticule(float rTime)
                    dim.y = dim.x/0.75f;
                    m_particule->CreateParticule(pos, speed, dim,
                                                 (ParticuleType)(PARTILENS1+rand()%3),
-                                                Rand()*0.5f+0.5f, 2.0f, 0.0f,
+                                                Rand()*0.5f+0.5f, 2.0f,
                                                 SH_INTERFACE);
                }
                if ( m_partiPhase[i] == 2 )  // étincelles ?
@@ -3511,7 +3507,7 @@ void CMainDialog::FrameParticule(float rTime)
                    dim.x = 0.005f+Rand()*0.005f;
                    dim.y = dim.x/0.75f;
                    m_particule->CreateParticule(pos, speed, dim, PARTIBLITZ,
-                                                Rand()*0.2f+0.2f, 0.0f, 0.0f,
+                                                Rand()*0.2f+0.2f, 0.0f,
                                                 SH_INTERFACE);
                    pos.x = m_partiPos[i].x;
                    pos.y = m_partiPos[i].y;
@@ -3522,7 +3518,7 @@ void CMainDialog::FrameParticule(float rTime)
                    dim.x = 0.005f+Rand()*0.005f;
                    dim.y = dim.x/0.75f;
                    m_particule->CreateParticule(pos, speed, dim, PARTISCRAPS,
-                                                Rand()*0.5f+0.5f, 2.0f, 0.0f,
+                                                Rand()*0.5f+0.5f, 2.0f,
                                                 SH_INTERFACE);
                }
                if ( m_partiPhase[i] == 3 )  // fumée ?
@@ -3538,7 +3534,7 @@ void CMainDialog::FrameParticule(float rTime)
                    dim.x = 0.03f+Rand()*0.07f;
                    dim.y = dim.x/0.75f;
                    m_particule->CreateParticule(pos, speed, dim, PARTICRASH,
-                                                Rand()*0.4f+0.4f, 0.0f, 0.0f,
+                                                Rand()*0.4f+0.4f, 0.0f,
                                                 SH_INTERFACE);
                }
            }
@@ -3549,7 +3545,6 @@ void CMainDialog::FrameParticule(float rTime)
            }
        }
    }
-#endif
 }
 
 // Quelques jolies particules pour suivre la souris.
@@ -3566,7 +3561,8 @@ void CMainDialog::NiceParticule(FPOINT mouse, BOOL bPress)
          m_phase == PHASE_MODEL ) &&
         !m_bDialog             )  return;
 
-   if ( bPress )
+#if 0
+   if ( TRUE )
    {
        pos.x = mouse.x;
        pos.y = mouse.y;
@@ -3577,7 +3573,7 @@ void CMainDialog::NiceParticule(FPOINT mouse, BOOL bPress)
        dim.x = 0.005f+Rand()*0.005f;
        dim.y = dim.x/0.75f;
        m_particule->CreateParticule(pos, speed, dim, PARTISCRAPS,
-                                    Rand()*0.5f+0.5f, 2.0f, 0.0f,
+                                    Rand()*0.5f+0.5f, 2.0f,
                                     SH_INTERFACE);
    }
    else
@@ -3592,37 +3588,33 @@ void CMainDialog::NiceParticule(FPOINT mouse, BOOL bPress)
        dim.y = dim.x/0.75f;
        m_particule->CreateParticule(pos, speed, dim,
                                     (ParticuleType)(PARTILENS1+rand()%3),
-                                    Rand()*0.5f+0.5f, 2.0f, 0.0f,
+                                    Rand()*0.5f+0.5f, 2.0f,
                                     SH_INTERFACE);
    }
+#else
+   pos.x = mouse.x;
+   pos.y = mouse.y;
+   pos.z = 0.0f;
+   speed.x = (Rand()-0.5f)*0.5f;
+   speed.y = (0.3f+Rand()*0.3f);
+   speed.z = 0.0f;
+   dim.x = 0.01f+Rand()*0.01f;
+   dim.y = dim.x/0.75f;
+   m_particule->CreateParticule(pos, speed, dim, PARTILENS4,
+                                Rand()*0.5f+0.5f, 2.0f,
+                                SH_INTERFACE);
+#endif
 }
 
 
 
-// Spécifie le dossier spécial utilisateur si nécessaire.
-
-void CMainDialog::SetUserDir(char *base, int rank)
-{
-   char    dir[100];
-
-   if ( strcmp(base, "user") == 0 && rank >= 100 )
-   {
-       sprintf(dir, "%s\\%s", m_userDir, m_userList[rank/100-1]);
-       UserDir(TRUE, dir);
-   }
-   else
-   {
-       UserDir(FALSE, "");
-   }
-}
-
 // Construit le nom de fichier d'une mission.
 
 void CMainDialog::BuildSceneName(char *filename, char *base, int rank)
 {
    if ( strcmp(base, "user") == 0 )
    {
-       sprintf(filename, "%s\\%s\\scene%.2d.txt", m_userDir, m_userList[rank/100-1], rank%100);
+       sprintf(filename, "%s\\%s\\scene%.2d.txt", m_userDir, m_userList[rank/10-1], rank%10);
    }
    else
    {
@@ -3657,9 +3649,10 @@ void CMainDialog::ReadNameList()
    char                dir[_MAX_FNAME];
    char                temp[_MAX_FNAME];
    char                filenames[_MAX_FNAME][100];
+   char*               gamer;
    int                 nbFilenames, i;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw == 0 )  return;
    pl = (CList*)pw->SearchControl(EVENT_INTERFACE_NLIST);
    if ( pl == 0 )  return;
@@ -3679,6 +3672,7 @@ void CMainDialog::ReadNameList()
        }
        while ( _findnext(hFile, &fBuffer) == 0 && nbFilenames < 100 );
    }
+   _findclose(hFile);
    do  // trie tous les noms :
    {
        bDo = FALSE;
@@ -3699,6 +3693,18 @@ void CMainDialog::ReadNameList()
    {
        pl->SetName(i, filenames[i]);
    }
+
+   gamer = m_main->RetGamerName();
+   for ( i=0 ; i<nbFilenames ; i++ )
+   {
+       if ( stricmp(gamer, pl->RetName(i)) == 0 )
+       {
+           pl->SetSelect(i);
+           pl->ShowSelect();
+           return;
+       }
+   }
+   pl->SetSelect(-1);
 }
 
 // Met à jour les contrôles des joueurs.
@@ -3708,192 +3714,103 @@ void CMainDialog::UpdateNameControl()
    CWindow*    pw;
    CList*      pl;
    CButton*    pb;
-   CEdit*      pe;
-   char        name[100];
-   char*       gamer;
+   CCheck*     pc;
    int         total, sel;
+   BOOL        bOK;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw == 0 )  return;
    pl = (CList*)pw->SearchControl(EVENT_INTERFACE_NLIST);
    if ( pl == 0 )  return;
-   pe = (CEdit*)pw->SearchControl(EVENT_INTERFACE_NEDIT);
-   if ( pe == 0 )  return;
 
-   gamer = m_main->RetGamerName();
    total = pl->RetTotal();
    sel   = pl->RetSelect();
-   pe->GetText(name, 100);
+   bOK = ( total>0 && sel!=-1 );
 
-   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_NCANCEL);
+//?    pl->SetState(STATE_ENABLE, bOK);
+   pl->SetState(STATE_ENABLE, total>0);
+
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_NOK);
    if ( pb != 0 )
    {
-       pb->SetState(STATE_ENABLE, gamer[0]!=0);
+       pb->SetState(STATE_ENABLE, bOK);
    }
 
    pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_NDELETE);
    if ( pb != 0 )
    {
-       pb->SetState(STATE_ENABLE, total>0 && sel!=-1);
+       pb->SetState(STATE_ENABLE, bOK);
    }
 
-   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_NOK);
-   if ( pb != 0 )
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_LEVEL1);
+   if ( pc != 0 )
    {
-       pb->SetState(STATE_ENABLE, name[0]!=0 || sel!=-1);
+       pc->SetState(STATE_ENABLE, bOK);
+       pc->SetState(STATE_CHECK, m_perso.level==1);
    }
 
-   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_PERSO);
-   if ( pb != 0 )
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_LEVEL2);
+   if ( pc != 0 )
    {
-       pb->SetState(STATE_ENABLE, name[0]!=0 || sel!=-1);
+       pc->SetState(STATE_ENABLE, bOK);
+       pc->SetState(STATE_CHECK, m_perso.level==2);
    }
-}
-
-// Met à jour la liste des joueurs en fonction du nom frapé.
-
-void CMainDialog::UpdateNameList()
-{
-   CWindow*    pw;
-   CList*      pl;
-   CEdit*      pe;
-   char        name[100];
-   int         total, sel, i;
-
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return;
-   pl = (CList*)pw->SearchControl(EVENT_INTERFACE_NLIST);
-   if ( pl == 0 )  return;
-   pe = (CEdit*)pw->SearchControl(EVENT_INTERFACE_NEDIT);
-   if ( pe == 0 )  return;
-
-   pe->GetText(name, 100);
-   total = pl->RetTotal();
-   sel   = pl->RetSelect();
 
-   for ( i=0 ; i<total ; i++ )
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_LEVEL3);
+   if ( pc != 0 )
    {
-       if ( stricmp(name, pl->RetName(i)) == 0 )
-       {
-           pl->SetSelect(i);
-           pl->ShowSelect(FALSE);
-           return;
-       }
+       pc->SetState(STATE_ENABLE, bOK);
+       pc->SetState(STATE_CHECK, m_perso.level==3);
    }
 
-   pl->SetSelect(-1);
-}
-
-// Met à jour le nom du joueur et fonction de la liste sélectionnée.
-
-void CMainDialog::UpdateNameEdit()
-{
-   CWindow*    pw;
-   CList*      pl;
-   CEdit*      pe;
-   char*       name;
-   int         sel;
-
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return;
-   pl = (CList*)pw->SearchControl(EVENT_INTERFACE_NLIST);
-   if ( pl == 0 )  return;
-   pe = (CEdit*)pw->SearchControl(EVENT_INTERFACE_NEDIT);
-   if ( pe == 0 )  return;
-
-   sel = pl->RetSelect();
-   if ( sel == -1 )
-   {
-       pe->SetText("");
-       pe->SetCursor(0, 0);
-   }
-   else
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_LEVEL4);
+   if ( pc != 0 )
    {
-       name = pl->RetName(sel);
-       pe->SetText(name);
-       pe->SetCursor(strlen(name), 0);
+       pc->SetState(STATE_ENABLE, bOK);
+       pc->SetState(STATE_CHECK, m_perso.level==4);
    }
-
-   UpdateNameControl();
-}
-
-// Met à jour la représentation du joueur en fonction de la liste sélectionnée.
-
-void CMainDialog::UpdateNameFace()
-{
-   CWindow*    pw;
-   CList*      pl;
-   char*       name;
-   int         sel;
-
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return;
-   pl = (CList*)pw->SearchControl(EVENT_INTERFACE_NLIST);
-   if ( pl == 0 )  return;
-
-   sel = pl->RetSelect();
-   if ( sel == -1 )  return;
-   name = pl->RetName(sel);
-
-   ReadGamerPerso(name);
 }
 
 // Sélectionne un joueur.
 
-void CMainDialog::NameSelect()
+BOOL CMainDialog::NameSelect()
 {
    CWindow*    pw;
    CList*      pl;
-   CEdit*      pe;
-   char        name[100];
    int         sel;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return;
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return FALSE;
    pl = (CList*)pw->SearchControl(EVENT_INTERFACE_NLIST);
-   if ( pl == 0 )  return;
-   pe = (CEdit*)pw->SearchControl(EVENT_INTERFACE_NEDIT);
-   if ( pe == 0 )  return;
+   if ( pl == 0 )  return FALSE;
 
-   pe->GetText(name, 100);
    sel  = pl->RetSelect();
+   if ( sel == -1 )  return FALSE;
+   m_main->SetGamerName(pl->RetName(sel));
 
-   if ( sel == -1 )
-   {
-       NameCreate();
-   }
-   else
-   {
-       m_main->SetGamerName(pl->RetName(sel));
-       m_main->ChangePhase(PHASE_INIT);
-   }
-
-   RetGamerFace(m_main->RetGamerName());
-
+   ReadGamerInfo();
    SetProfileString("Gamer", "LastName", m_main->RetGamerName());
+   return TRUE;
 }
 
 // Crée un nouveau joueur.
 
-void CMainDialog::NameCreate()
+BOOL CMainDialog::NameCreate()
 {
    CWindow*    pw;
-   CEdit*      pe;
+   CButton*    pb;
+   CList*      pl;
+   CCheck*     pc;
    char        name[100];
    char        dir[100];
    char        c;
    int         len, i, j;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return;
-   pe = (CEdit*)pw->SearchControl(EVENT_INTERFACE_NEDIT);
-   if ( pe == 0 )  return;
-
-   pe->GetText(name, 100);
+   strcpy(name, m_dialogName);
    if ( name[0] == 0 )
    {
        m_sound->Play(SOUND_TZOING);
-       return;
+       return FALSE;
    }
 
    len = strlen(name);
@@ -3917,7 +3834,7 @@ void CMainDialog::NameCreate()
    if ( j == 0 )
    {
        m_sound->Play(SOUND_TZOING);
-       return;
+       return FALSE;
    }
 
    _mkdir(m_savegameDir);  // si n'existe pas encore !
@@ -3926,16 +3843,36 @@ void CMainDialog::NameCreate()
    if ( _mkdir(dir) != 0 )
    {
        m_sound->Play(SOUND_TZOING);
-       pe->SetText(name);
-       pe->SetCursor(strlen(name), 0);
-       pe->SetFocus(TRUE);
-       return;
+       return FALSE;
    }
 
-   SetGamerFace(name, 0);
-
    m_main->SetGamerName(name);
-   m_main->ChangePhase(PHASE_INIT);
+   FlushPerso();
+   WriteGamerInfo();
+   ReadNameList();
+   UpdateNameControl();
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return TRUE;
+
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_NOK);
+   if ( pb != 0 )  pb->SetFocus(TRUE);
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_NCREATE);
+   if ( pb != 0 )  pb->SetFocus(FALSE);
+
+   pl = (CList*)pw->SearchControl(EVENT_INTERFACE_NLIST);
+   if ( pl != 0 )  pl->SetFocus(FALSE);
+
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_LEVEL1);
+   if ( pc != 0 )  pc->SetFocus(FALSE);
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_LEVEL2);
+   if ( pc != 0 )  pc->SetFocus(FALSE);
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_LEVEL3);
+   if ( pc != 0 )  pc->SetFocus(FALSE);
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_LEVEL4);
+   if ( pc != 0 )  pc->SetFocus(FALSE);
+
+   return TRUE;
 }
 
 // Supprime un dossier et toute sa descendance.
@@ -3968,8 +3905,9 @@ BOOL RemoveDir(char *dirname)
        }
        while ( _findnext(hFile, &fBuffer) == 0 );
    }
+   _findclose(hFile);
 
-   if ( _rmdir(dirname) != 0 )
+   if ( RemoveDirectory(dirname) == 0 )
    {
        return FALSE;
    }
@@ -3982,11 +3920,13 @@ void CMainDialog::NameDelete()
 {
    CWindow*    pw;
    CList*      pl;
+   CButton*    pb;
+   CCheck*     pc;
    int         sel;
    char*       gamer;
    char        dir[100];
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw == 0 )  return;
    pl = (CList*)pw->SearchControl(EVENT_INTERFACE_NLIST);
    if ( pl == 0 )  return;
@@ -4009,12 +3949,64 @@ void CMainDialog::NameDelete()
 
    m_main->SetGamerName("");
    pl->SetSelect(-1);
-
    ReadNameList();
-   UpdateNameList();
    UpdateNameControl();
+
+   if ( pl->RetTotal() > 0 )
+   {
+       pl->SetSelect(0);
+       m_main->SetGamerName(pl->RetName(0));
+       ReadGamerInfo();
+       UpdateNameControl();
+
+       pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_NOK);
+       if ( pb != 0 )  pb->SetFocus(TRUE);
+       pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_NCREATE);
+       if ( pb != 0 )  pb->SetFocus(FALSE);
+   }
+   else
+   {
+       pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_NOK);
+       if ( pb != 0 )  pb->SetFocus(FALSE);
+       pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_NCREATE);
+       if ( pb != 0 )  pb->SetFocus(TRUE);
+   }
+
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_NDELETE);
+   if ( pb != 0 )  pb->SetFocus(FALSE);
+
+   pl->SetFocus(FALSE);
+
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_LEVEL1);
+   if ( pc != 0 )  pc->SetFocus(FALSE);
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_LEVEL2);
+   if ( pc != 0 )  pc->SetFocus(FALSE);
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_LEVEL3);
+   if ( pc != 0 )  pc->SetFocus(FALSE);
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_LEVEL4);
+   if ( pc != 0 )  pc->SetFocus(FALSE);
 }
 
+// Choix d'un autre niveau de difficulté.
+
+void CMainDialog::LevelSelect(int level)
+{
+   CWindow*    pw;
+   CList*      pl;
+   int         sel;
+
+   m_perso.level = level;
+   UpdateNameControl();
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return;
+   pl = (CList*)pw->SearchControl(EVENT_INTERFACE_NLIST);
+   if ( pl == 0 )  return;
+   sel = pl->RetSelect();
+   if ( sel == -1 )  return;
+
+   WriteGamerInfo();
+}
 
 
 // Teste si deux couleurs sont égales ou presque.
@@ -4030,778 +4022,812 @@ BOOL EqColor(const D3DCOLORVALUE &c1, const D3DCOLORVALUE &c2)
 
 void CMainDialog::UpdatePerso()
 {
+   CObject*        vehicle;
+   CPhysics*       physics;
+   CMotion*        motion;
+   Character*      character;
    CWindow*        pw;
-   CLabel*         pl;
    CButton*        pb;
-   CColor*         pc;
-   CSlider*        ps;
+   CColor*         pco;
+   CGauge*         pg;
+   CGroup*         pgr;
+   CLabel*         pl;
    D3DCOLORVALUE   color;
-   char            name[100];
-   int             i;
+   CarSpec         missionSpec, carSpec;
+   char            text[100];
+   char            res[100];
+   char            car[50];
+   int             i, icon = 0;
+   float           value;
+   BOOL            bOK;
+
+   vehicle = m_main->SearchObject(OBJECT_CAR);
+   if ( vehicle == 0 )  return;
+   physics = vehicle->RetPhysics();
+   if ( physics == 0 )  return;
+   motion = vehicle->RetMotion();
+   if ( motion == 0 )  return;
+   character = vehicle->RetCharacter();
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw == 0 )  return;
 
-   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_PHEAD);
-   if ( pb != 0 )
-   {
-       pb->SetState(STATE_CHECK, m_persoTab==0);
-   }
-   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_PBODY);
-   if ( pb != 0 )
-   {
-       pb->SetState(STATE_CHECK, m_persoTab==1);
-   }
+   pg = (CGauge*)pw->SearchControl(EVENT_INTERFACE_PGSPEED);
+   if ( pg == 0 )  return;
+   value = physics->RetLinMotionX(MO_ADVSPEED);
+   pg->SetLevel(value/180.0f);
+   pl = (CLabel*)pw->SearchControl(EVENT_INTERFACE_PLSPEED);
+   if ( pl == 0 )  return;
+#if _MPH
+   value *= 0.6f;  // approximatif: 100 KPH = 60 MPH !
+#endif
+   sprintf(text, "%d", (int)value);
+   pl->SetName(text);
+
+   pg = (CGauge*)pw->SearchControl(EVENT_INTERFACE_PGACCEL);
+   if ( pg == 0 )  return;
+   value = physics->RetLinMotionX(MO_ADVACCEL);
+   pg->SetLevel(value/100.0f);
+   pl = (CLabel*)pw->SearchControl(EVENT_INTERFACE_PLACCEL);
+   if ( pl == 0 )  return;
+   sprintf(text, "%d", (int)value);
+   pl->SetName(text);
+
+   pg = (CGauge*)pw->SearchControl(EVENT_INTERFACE_PGGRIP);
+   if ( pg == 0 )  return;
+   value = 100.0f-character->gripSlide;
+   pg->SetLevel(value/50.0f);
+   pl = (CLabel*)pw->SearchControl(EVENT_INTERFACE_PLGRIP);
+   if ( pl == 0 )  return;
+   sprintf(text, "%d", (int)value);
+   pl->SetName(text);
+
+   pg = (CGauge*)pw->SearchControl(EVENT_INTERFACE_PGSOLID);
+   if ( pg == 0 )  return;
+   value = (float)motion->RetUsedPart();
+   pg->SetLevel(value/30.0f);
+   pl = (CLabel*)pw->SearchControl(EVENT_INTERFACE_PLSOLID);
+   if ( pl == 0 )  return;
+   sprintf(text, "%d", (int)value);
+   pl->SetName(text);
+
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_PPREV);
+   if ( pb == 0 )  return;
+   pb->SetState(STATE_ENABLE, m_perso.selectCar > 0);
+
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_PNEXT);
+   if ( pb == 0 )  return;
+#if !_SE
+   pb->SetState(STATE_ENABLE, m_perso.selectCar < m_perso.buyable-1 ||
+                              m_perso.selectCar < m_perso.bonus-1   );
+#endif
 
-   pl = (CLabel*)pw->SearchControl(EVENT_LABEL11);
-   if ( pl != 0 )
+   for ( i=0 ; i<15 ; i++ )
    {
-       if ( m_persoTab == 0 )
-       {
-           pl->SetState(STATE_VISIBLE);
-           GetResource(RES_TEXT, RT_PERSO_FACE, name);
-           pl->SetName(name);
-       }
-       else
-       {
-           pl->ClearState(STATE_VISIBLE);
-       }
+       pco = (CColor*)pw->SearchControl((EventMsg)(EVENT_INTERFACE_PCOLOR0+i));
+       if ( pco == 0 )  break;
+       pco->SetState(STATE_VISIBLE);
+       color.r = perso_color[3*i+0]/255.0f;
+       color.g = perso_color[3*i+1]/255.0f;
+       color.b = perso_color[3*i+2]/255.0f;
+       color.a = 0.0f;
+       pco->SetColor(color);
+       pco->SetState(STATE_CHECK, EqColor(color, m_perso.colorBody[m_perso.selectCar]));
    }
 
-   pl = (CLabel*)pw->SearchControl(EVENT_LABEL12);
-   if ( pl != 0 )
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_PSUBMOD0);
+   if ( pb == 0 )  return;
+   pb->SetState(STATE_CHECK, m_perso.subModel[m_perso.selectCar]==0);
+
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_PSUBMOD1);
+   if ( pb == 0 )  return;
+   pb->SetState(STATE_CHECK, m_perso.subModel[m_perso.selectCar]==1);
+
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_PSUBMOD2);
+   if ( pb == 0 )  return;
+   pb->SetState(STATE_CHECK, m_perso.subModel[m_perso.selectCar]==2);
+
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_PSUBMOD3);
+   if ( pb == 0 )  return;
+   pb->SetState(STATE_CHECK, m_perso.subModel[m_perso.selectCar]==3);
+
+#if _SE
+   if ( m_perso.stateCars[m_perso.selectCar] != SC_FORSALE )
+#else
+   if ( m_perso.selectCar < m_perso.total ||
+        m_perso.selectCar < m_perso.bonus )  // sélectionne ?
+#endif
+   {
+       pl = (CLabel*)pw->SearchControl(EVENT_INTERFACE_PPRICE);
+       if ( pl == 0 )  return;
+       pl->SetFontType(FONT_COLOBOT);
+       pl->SetState(STATE_VISIBLE);
+       NamePerso(car, m_perso.usedCars[m_perso.selectCar]);
+       pl->SetName(car);  // nom du véhicule
+
+       pl = (CLabel*)pw->SearchControl(EVENT_INTERFACE_PPESETAS);
+       if ( pl == 0 )  return;
+       pl->ClearState(STATE_VISIBLE);
+
+       pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_POK);
+       if ( pb == 0 )  return;
+       GetResource(RES_EVENT, EVENT_INTERFACE_POK, res);
+       pb->SetName(res);
+       pb->ClearState(STATE_CHECK);
+   }
+   else    // achète ?
+   {
+       pl = (CLabel*)pw->SearchControl(EVENT_INTERFACE_PPRICE);
+       if ( pl == 0 )  return;
+       pl->SetFontType(FONT_HILITE);
+       pl->SetState(STATE_VISIBLE);
+       GetResource(RES_EVENT, EVENT_INTERFACE_PPRICE, res);
+       NamePerso(car, m_perso.usedCars[m_perso.selectCar]);
+       sprintf(text, res, car, PricePerso(m_perso.usedCars[m_perso.selectCar]));
+       pl->SetName(text);  // prix du véhicule
+
+       pl = (CLabel*)pw->SearchControl(EVENT_INTERFACE_PPESETAS);
+       if ( pl == 0 )  return;
+       pl->SetState(STATE_VISIBLE);
+       GetResource(RES_EVENT, EVENT_INTERFACE_PPESETAS, res);
+       sprintf(text, res, m_perso.pesetas);
+       pl->SetName(text);  // somme disponible
+
+       pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_POK);
+       if ( pb == 0 )  return;
+       GetResource(RES_TEXT, RT_PERSO_BUY, res);
+       pb->SetName(res);
+       pb->SetState(STATE_CHECK);
+   }
+
+   // Teste si la voiture choisie a des spécifications compatibles
+   // avec la mission à effectuer.
+   bOK = TRUE;
+   res[0] = 0;
+   ReadCarSpec(m_sel[m_index], missionSpec);
+   SpecPerso(carSpec, m_perso.usedCars[m_perso.selectCar]);
+//?    if ( m_perso.level < 3 && carSpec.minSpeed != NAN )
+#if _DEMO
+   if ( m_perso.selectCar != 2 )  // pas tijuana taxi ?
    {
-       if ( m_persoTab == 0 )
+       bOK = FALSE;
+       GetResource(RES_TEXT, RT_SPEC_DEMO, res);
+   }
+#else
+#if _SE
+   icon = 29;  // rouge
+   if ( m_perso.stateCars[m_perso.selectCar] == SC_SHOWCASE )  // en vitrine ?
+   {
+       if ( m_perso.usedCars[m_perso.selectCar] == 4 ||  // firecraker ?
+            m_perso.usedCars[m_perso.selectCar] == 5 ||  // hooligan ?
+            m_perso.usedCars[m_perso.selectCar] == 1 )   // tijuana taxi ?
        {
-           pl->SetState(STATE_VISIBLE);
-           GetResource(RES_TEXT, RT_PERSO_GLASSES, name);
-           pl->SetName(name);
+           GetResource(RES_TEXT, RT_SPEC_DISPO, res);
+           icon = 30;  // bleu
        }
        else
        {
-           pl->ClearState(STATE_VISIBLE);
+           GetResource(RES_TEXT, RT_SPEC_DEMO, res);
        }
+       bOK = FALSE;
    }
-
-   pl = (CLabel*)pw->SearchControl(EVENT_LABEL13);
-   if ( pl != 0 )
-   {
-       if ( m_persoTab == 0 )  GetResource(RES_TEXT, RT_PERSO_HAIR, name);
-       else                    GetResource(RES_TEXT, RT_PERSO_BAND, name);
-       pl->SetName(name);
-   }
-
-   pl = (CLabel*)pw->SearchControl(EVENT_LABEL14);
-   if ( pl != 0 )
+#else
+   if ( carSpec.minSpeed != NAN )
    {
-       if ( m_persoTab == 0 )
+       if ( missionSpec.minSpeed != NAN &&
+            carSpec.minSpeed < missionSpec.minSpeed )
        {
-           pl->ClearState(STATE_VISIBLE);
+           bOK = FALSE;
+           GetResource(RES_TEXT, RT_SPEC_MINSPEED, res);
        }
-       else
+       if ( missionSpec.maxSpeed != NAN &&
+            carSpec.minSpeed > missionSpec.maxSpeed )
        {
-           pl->SetState(STATE_VISIBLE);
-           GetResource(RES_TEXT, RT_PERSO_COMBI, name);
-           pl->SetName(name);
+           bOK = FALSE;
+           GetResource(RES_TEXT, RT_SPEC_MAXSPEED, res);
        }
    }
+#endif
+#endif
 
-   for ( i=0 ; i<4 ; i++ )
-   {
-       pb = (CButton*)pw->SearchControl((EventMsg)(EVENT_INTERFACE_PFACE1+i));
-       if ( pb == 0 )  break;
-       pb->SetState(STATE_VISIBLE, m_persoTab==0);
-       pb->SetState(STATE_CHECK, i==m_perso.face);
-   }
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_POK);
+   if ( pb == 0 )  return;
+   pb->SetState(STATE_ENABLE, bOK);
 
-   for ( i=0 ; i<10 ; i++ )
-   {
-       pb = (CButton*)pw->SearchControl((EventMsg)(EVENT_INTERFACE_PGLASS0+i));
-       if ( pb == 0 )  break;
-       pb->SetState(STATE_VISIBLE, m_persoTab==0);
-       pb->SetState(STATE_CHECK, i==m_perso.glasses);
-   }
+   pgr = (CGroup*)pw->SearchControl(EVENT_INTERFACE_PSPECB);
+   if ( pgr == 0 )  return;
+   pgr->SetState(STATE_VISIBLE, !bOK);
+#if _SE
+   pgr->SetIcon(icon);
+#endif
+   pl = (CLabel*)pw->SearchControl(EVENT_INTERFACE_PSPECT);
+   if ( pl == 0 )  return;
+   pl->SetState(STATE_VISIBLE, !bOK);
+   pl->SetName(res);
+}
 
-   for ( i=0 ; i<3*3 ; i++ )
-   {
-       pc = (CColor*)pw->SearchControl((EventMsg)(EVENT_INTERFACE_PC0a+i));
-       if ( pc == 0 )  break;
-       if ( m_persoTab == 0 )
-       {
-           pc->ClearState(STATE_VISIBLE);
-       }
-       else
-       {
-           pc->SetState(STATE_VISIBLE);
-           color.r = perso_color[3*10*1+3*i+0]/255.0f;
-           color.g = perso_color[3*10*1+3*i+1]/255.0f;
-           color.b = perso_color[3*10*1+3*i+2]/255.0f;
-           color.a = 0.0f;
-           pc->SetColor(color);
-           pc->SetState(STATE_CHECK, EqColor(color, m_perso.colorCombi));
-       }
+// Met à jour l'élévation de la caméra selon le slider correspondant.
 
-       pc = (CColor*)pw->SearchControl((EventMsg)(EVENT_INTERFACE_PC0b+i));
-       if ( pc == 0 )  break;
-       color.r = perso_color[3*10*2*m_persoTab+3*i+0]/255.0f;
-       color.g = perso_color[3*10*2*m_persoTab+3*i+1]/255.0f;
-       color.b = perso_color[3*10*2*m_persoTab+3*i+2]/255.0f;
-       color.a = 0.0f;
-       pc->SetColor(color);
-       pc->SetState(STATE_CHECK, EqColor(color, m_persoTab?m_perso.colorBand:m_perso.colorHair));
-   }
+void CMainDialog::ElevationPerso()
+{
+   CWindow*    pw;
+   CSlider*    ps;
 
-   for ( i=0 ; i<3 ; i++ )
-   {
-       ps = (CSlider*)pw->SearchControl((EventMsg)(EVENT_INTERFACE_PCRa+i));
-       if ( ps == 0 )  break;
-       ps->SetState(STATE_VISIBLE, m_persoTab==1);
-   }
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return;
 
-   if ( m_persoTab == 1 )
-   {
-       color = m_perso.colorCombi;
-       ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PCRa);
-       if ( ps != 0 )  ps->SetVisibleValue(color.r*255.0f);
-       ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PCGa);
-       if ( ps != 0 )  ps->SetVisibleValue(color.g*255.0f);
-       ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PCBa);
-       if ( ps != 0 )  ps->SetVisibleValue(color.b*255.0f);
-   }
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PELEV);
+   if ( ps == 0 )  return;
 
-   if ( m_persoTab == 0 )  color = m_perso.colorHair;
-   else                    color = m_perso.colorBand;
-   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PCRb);
-   if ( ps != 0 )  ps->SetVisibleValue(color.r*255.0f);
-   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PCGb);
-   if ( ps != 0 )  ps->SetVisibleValue(color.g*255.0f);
-   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PCBb);
-   if ( ps != 0 )  ps->SetVisibleValue(color.b*255.0f);
+   m_persoElevation = ps->RetVisibleValue();
 }
 
 // Met à jour la caméra pour le personnage.
 
 void CMainDialog::CameraPerso()
 {
-   if ( m_persoTab == 0 )
-   {
-//?        m_camera->Init(D3DVECTOR(4.0f, 0.0f, 0.0f),
-//?                       D3DVECTOR(0.0f, 0.0f, 1.0f), 0.0f);
-       m_camera->Init(D3DVECTOR(6.0f, 0.0f, 0.0f),
-                      D3DVECTOR(0.0f, 0.2f, 1.5f), 0.0f);
-   }
-   else
-   {
-       m_camera->Init(D3DVECTOR(18.0f, 0.0f, 4.5f),
-                      D3DVECTOR(0.0f, 1.6f, 4.5f), 0.0f);
-   }
+   D3DVECTOR   eye, look;
+
+   eye = RotateView(D3DVECTOR(0.0f, 0.0f, 0.0f), m_persoAngle, m_persoElevation, 20.0f);
+//?    look.y -= powf(eye.y, 5.0f)/10000.0f;  // empirique !
+   look.y -= powf(eye.y, 7.0f)/4000000.0f;  // empirique !
+   look.x = 0.0f;
+   look.z = 0.0f;
+   eye.y  += 2.0f+(0.7f+m_persoElevation)*2.0f;
+   look.y += 2.0f+(0.7f+m_persoElevation)*2.0f;
+   m_camera->Init(eye, look, 0.0f);
 
    m_camera->SetType(CAMERA_SCRIPT);
    m_camera->FixCamera();
 }
 
-// Met une couleur fixe.
+// Gestion de l'argent du joueur.
 
-void CMainDialog::FixPerso(int rank, int index)
+void CMainDialog::SetPesetas(int value)
 {
-   if ( m_persoTab == 0 )
-   {
-       if ( index == 1 )
-       {
-           m_perso.colorHair.r = perso_color[3*10*0+rank*3+0]/255.0f;
-           m_perso.colorHair.g = perso_color[3*10*0+rank*3+1]/255.0f;
-           m_perso.colorHair.b = perso_color[3*10*0+rank*3+2]/255.0f;
-       }
-   }
-   if ( m_persoTab == 1 )
-   {
-       if ( index == 0 )
-       {
-           m_perso.colorCombi.r = perso_color[3*10*1+rank*3+0]/255.0f;
-           m_perso.colorCombi.g = perso_color[3*10*1+rank*3+1]/255.0f;
-           m_perso.colorCombi.b = perso_color[3*10*1+rank*3+2]/255.0f;
-       }
-       if ( index == 1 )
-       {
-           m_perso.colorBand.r = perso_color[3*10*2+rank*3+0]/255.0f;
-           m_perso.colorBand.g = perso_color[3*10*2+rank*3+1]/255.0f;
-           m_perso.colorBand.b = perso_color[3*10*2+rank*3+2]/255.0f;
-       }
-   }
+   if ( value > 99999 )  value = 99999;
+   m_perso.pesetas = value;
+   WriteGamerInfo();
 }
 
-// Met à jour les couleurs du personnage.
-
-void CMainDialog::ColorPerso()
+int CMainDialog::RetPesetas()
 {
-   CWindow*        pw;
-   CSlider*        ps;
-   D3DCOLORVALUE   color;
+   return m_perso.pesetas;
+}
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return;
+// Indique s'il faut utiliser une voiture fantome.
 
-   color.a = 0.0f;
-
-   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PCRa);
-   if ( ps != 0 )  color.r = ps->RetVisibleValue()/255.0f;
-   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PCGa);
-   if ( ps != 0 )  color.g = ps->RetVisibleValue()/255.0f;
-   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PCBa);
-   if ( ps != 0 )  color.b = ps->RetVisibleValue()/255.0f;
-   if ( m_persoTab == 1 )  m_perso.colorCombi = color;
-
-   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PCRb);
-   if ( ps != 0 )  color.r = ps->RetVisibleValue()/255.0f;
-   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PCGb);
-   if ( ps != 0 )  color.g = ps->RetVisibleValue()/255.0f;
-   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PCBb);
-   if ( ps != 0 )  color.b = ps->RetVisibleValue()/255.0f;
-   if ( m_persoTab == 0 )  m_perso.colorHair = color;
-   else                    m_perso.colorBand = color;
+BOOL CMainDialog::RetGhost()
+{
+   return (m_bGhostExist && m_bGhostEnable);
 }
 
-// Met à jour les paramètres par défaut du personnage.
-
-void CMainDialog::DefPerso()
+BOOL CMainDialog::RetGhostExist()
 {
-   m_perso.colorCombi.r = 206.0f/256.0f;
-   m_perso.colorCombi.g = 206.0f/256.0f;
-   m_perso.colorCombi.b = 204.0f/256.0f;  // ~blanc
-   m_perso.colorBand.r  = 255.0f/256.0f;
-   m_perso.colorBand.g  = 132.0f/256.0f;
-   m_perso.colorBand.b  =   1.0f/256.0f;  // orange
+   return m_bGhostExist;
+}
 
-   if ( m_perso.face == 0 )  // normal ?
-   {
-       m_perso.glasses = 0;
-       m_perso.colorHair.r =  90.0f/256.0f;
-       m_perso.colorHair.g =  95.0f/256.0f;
-       m_perso.colorHair.b =  85.0f/256.0f;  // noir
-   }
-   if ( m_perso.face == 1 )  // chauve ?
-   {
-       m_perso.glasses = 0;
-       m_perso.colorHair.r =  83.0f/256.0f;
-       m_perso.colorHair.g =  64.0f/256.0f;
-       m_perso.colorHair.b =  51.0f/256.0f;  // brun
-   }
-   if ( m_perso.face == 2 )  // carlos ?
+// Indique le niveau de difficulté.
+
+int CMainDialog::RetLevel()
+{
+   if ( m_bDuel )
    {
-       m_perso.glasses = 1;
-       m_perso.colorHair.r =  85.0f/256.0f;
-       m_perso.colorHair.g =  48.0f/256.0f;
-       m_perso.colorHair.b =   9.0f/256.0f;  // brun
+       return m_duelLevel;
    }
-   if ( m_perso.face == 3 )  // blond ?
+   else
    {
-       m_perso.glasses = 4;
-       m_perso.colorHair.r = 255.0f/256.0f;
-       m_perso.colorHair.g = 255.0f/256.0f;
-       m_perso.colorHair.b = 181.0f/256.0f;  // jaune
+       return m_perso.level;
    }
-
-   m_perso.colorHair.a  = 0.0f;
-   m_perso.colorCombi.a = 0.0f;
-   m_perso.colorBand.a  = 0.0f;
-}
-
-
-// Indique s'il existe au moins une sauvegarde.
-
-BOOL CMainDialog::IsIOReadScene()
-{
-   FILE*   file;
-   char    filename[100];
-
-   sprintf(filename, "%s\\%s\\save%c%.3d\\data.sav", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], 0);
-   file = fopen(filename, "r");
-   if ( file == NULL )  return FALSE;
-   fclose(file);
-   return TRUE;
 }
 
-// Construit le nom du fichier par défaut.
+// Indique s'il est possible d'acheter une ou plusieurs voitures.
 
-void CMainDialog::IOReadName()
+BOOL CMainDialog::IsBuyablePerso()
 {
-   FILE*       file;
-   CWindow*    pw;
-   CEdit*      pe;
-   char        filename[_MAX_FNAME];
-   char        op[100];
-   char        line[500];
-   char        resume[100];
-   char        name[100];
-   time_t      now;
-   int         i;
+   int     i, model;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return;
-   pe = (CEdit*)pw->SearchControl(EVENT_INTERFACE_IONAME);
-   if ( pe == 0 )  return;
+   if ( !m_bPesetas )  return FALSE;  // course simple ?
 
-   sprintf(resume, "%s %d", m_sceneName, m_chap[m_index]+1);
-   BuildSceneName(filename, m_sceneName, (m_chap[m_index]+1)*100);
-   file = fopen(filename, "r");
-   if ( file != NULL )
+   for ( i=0 ; i<50 ; i++ )
    {
-       while ( fgets(line, 500, file) != NULL )
+       model = RetPersoModel(i);
+       if ( model != 0 &&
+            !UsedPerso(model) &&
+            PricePerso(model) <= m_perso.pesetas )
        {
-           for ( i=0 ; i<500 ; i++ )
-           {
-               if ( line[i] == '\t' )  line[i] = ' ';  // remplace tab par space
-               if ( line[i] == '/' && line[i+1] == '/' )
-               {
-                   line[i] = 0;
-                   break;
-               }
-           }
-
-           sprintf(op, "Title.%c", RetLanguageLetter());
-           if ( Cmd(line, op) )
-           {
-               OpString(line, "resume", resume);
-               break;
-           }
+           return TRUE;
        }
-       fclose(file);
    }
-
-   time(&now);
-   TimeToAscii(now, line);
-   sprintf(name, "%s %d - %s", resume, m_sel[m_index]+1, line);
-   pe->SetText(name);
-   pe->SetCursor(strlen(name), 0);
-   pe->SetFocus(TRUE);
+   return FALSE;
 }
 
-// Met à jour la liste des parties enregistrées sur disque.
+// Met à jour toutes les voitures que le joueur peut acheter.
 
-void CMainDialog::IOReadList()
+void CMainDialog::BuyablePerso()
 {
-   FILE*       file = NULL;
-   CWindow*    pw;
-   CList*      pl;
-   char        filename[100];
-   char        line[500];
-   char        name[100];
-   int         i, j;
-
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return;
-   pl = (CList*)pw->SearchControl(EVENT_INTERFACE_IOLIST);
-   if ( pl == 0 )  return;
+   int     i, index, model, max;
 
-   pl->Flush();
+   m_perso.bonus = m_perso.total;
 
-   for ( j=0 ; j<999 ; j++ )
+   if ( !m_bPesetas )  // course simple ?
    {
-       sprintf(filename, "%s\\%s\\save%c%.3d\\data.sav", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], j);
-       file = fopen(filename, "r");
-       if ( file == NULL )  break;
+       m_perso.buyable = m_perso.total;
 
-       strcmp(name, filename);  // nom par défaut
-       while ( fgets(line, 500, file) != NULL )
+       if ( !UsedPerso(8) )  // torpedo ?
        {
-           for ( i=0 ; i<500 ; i++ )
-           {
-               if ( line[i] == '\t' )  line[i] = ' ';  // remplace tab par space
-               if ( line[i] == '/' && line[i+1] == '/' )
-               {
-                   line[i] = 0;
-                   break;
-               }
-           }
-
-           if ( Cmd(line, "Title") )
-           {
-               OpString(line, "text", name);
-               break;
-           }
+           index = m_perso.total;
+           m_perso.usedCars[index] = 8;
+           m_perso.subModel[index] = 0;
+           DefPerso(index);  // met la couleur standard
+           m_perso.bonus = index+1;
        }
-       fclose(file);
-
-       pl->SetName(j, name);
-   }
-
-   if ( m_phase == PHASE_WRITE  ||
-        m_phase == PHASE_WRITEs )
-   {
-       GetResource(RES_TEXT, RT_IO_NEW, name);
-       pl->SetName(j, name);
-       j ++;
+       return;
    }
 
-   pl->SetSelect(j-1);
-   pl->ShowSelect(FALSE);  // montre la ligne sélectionnée
-}
-
-// Met à jour les boutons en fonction de la partie sélectionnée
-// dans la liste.
-
-void CMainDialog::IOUpdateList()
-{
-   FILE*       file = NULL;
-   CWindow*    pw;
-   CList*      pl;
-   CButton*    pb;
-   CImage*     pi;
-   char        filename[100];
-   int         sel, max;
-
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return;
-   pl = (CList*)pw->SearchControl(EVENT_INTERFACE_IOLIST);
-   if ( pl == 0 )  return;
-   pi = (CImage*)pw->SearchControl(EVENT_INTERFACE_IOIMAGE);
-   if ( pi == 0 )  return;
-
-   sel = pl->RetSelect();
-   max = pl->RetTotal();
-
-   sprintf(filename, "%s\\%s\\save%c%.3d\\screen.bmp", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], sel);
-
-   if ( m_phase == PHASE_WRITE  ||
-        m_phase == PHASE_WRITEs )
+#if _SE
+   i = 0;
+   m_perso.buyable = m_perso.total;
+   for ( index=0 ; index<m_perso.total ; index++ )
    {
-       if ( sel < max-1 )
+       model = m_perso.usedCars[index];
+       if ( model != 0 &&
+            (model == 4 ||    // firecraker ?
+             model == 5 ||    // hooligan ?
+             model == 1 ) &&  // tijuana taxi ?
+            !UsedPerso(model) &&
+            PricePerso(model) <= m_perso.pesetas )
        {
-           pi->SetFilenameImage(filename);
+           m_perso.subModel[index] = 0;
+           DefPerso(index);  // met la couleur standard
+           m_perso.stateCars[index] = SC_FORSALE;  // voiture à vendre
+           m_perso.buyable = index;
+           m_perso.selectCar = index;
        }
-       else
-       {
-           pi->SetFilenameImage("");
-       }
-
-       pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_IODELETE);
-       if ( pb != 0 )
+   }
+#else
+   index = m_perso.total;
+   for ( i=0 ; i<50 ; i++ )
+   {
+       model = RetPersoModel(i);
+       if ( model != 0 &&
+            !UsedPerso(model) &&
+            PricePerso(model) <= m_perso.pesetas )
        {
-           pb->SetState(STATE_ENABLE, sel < max-1);
+           m_perso.usedCars[index] = model;
+           m_perso.subModel[index] = 0;
+           DefPerso(index);  // met la couleur standard
+           index ++;
        }
    }
-   else
+   m_perso.buyable = index;
+   
+   if ( index > m_perso.total )
+   {
+       m_perso.selectCar = index-1;  // sélectionne la voiture à acheter
+   }
+
+   max = m_perso.total;
+   if ( max < m_perso.bonus   )  max = m_perso.bonus;
+   if ( max < m_perso.buyable )  max = m_perso.buyable;
+   if ( m_perso.selectCar >= max && max > 0 )
    {
-       pi->SetFilenameImage(filename);
+       m_perso.selectCar = max-1;
    }
+#endif
 }
 
-// Supprime la scène sélectionnée.
+// Sélectionne la voiture suivante ou précédente.
 
-void CMainDialog::IODeleteScene()
+void CMainDialog::NextPerso(int dir)
 {
-   CWindow*            pw;
-   CList*              pl;
-   char                dir[100];
-   char                old[100];
-   long                hFile;
-   struct _finddata_t  fBuffer;
-   int                 sel, max, i;
-
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return;
-   pl = (CList*)pw->SearchControl(EVENT_INTERFACE_IOLIST);
-   if ( pl == 0 )  return;
+   int     i;
 
-   sel = pl->RetSelect();
-   if ( sel == -1 )
+   if ( dir > 0 )  // voiture suivante ?
    {
-       m_sound->Play(SOUND_TZOING);
-       return;
+       i = m_perso.selectCar+1;
+#if _SE
+       if ( i >= m_perso.total )  i = 0;
+#else
+       if ( i >= m_perso.buyable &&
+            i >= m_perso.bonus   )  i = 0;
+#endif
+       m_perso.selectCar = i;
    }
-
-   // Supprime tout le contenu du dossier.
-   sprintf(dir, "%s\\%s\\save%c%.3d\\*", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], sel);
-   hFile = _findfirst(dir, &fBuffer);
-   if ( hFile != -1 )
+   else    // voiture précédente ?
    {
-       do
+       i = m_perso.selectCar-1;
+#if _SE
+       if ( i < 0 )  i = m_perso.total-1;
+#else
+       if ( i < 0 )
        {
-           if ( fBuffer.name[0] != '.' )
-           {
-               sprintf(dir, "%s\\%s\\save%c%.3d\\%s", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], sel, fBuffer.name);
-               remove(dir);
-           }
+           if ( m_perso.buyable > m_perso.bonus )  i = m_perso.buyable-1;
+           else                                    i = m_perso.bonus-1;
        }
-       while ( _findnext(hFile, &fBuffer) == 0 );
+#endif
+       m_perso.selectCar = i;
    }
+}
 
-   sprintf(dir, "%s\\%s\\save%c%.3d", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], sel);
-   if ( _rmdir(dir) != 0 )
+// Sélectionne ou achète la voiture courante.
+
+void CMainDialog::SelectPerso()
+{
+#if _SE
+   if ( m_perso.stateCars[m_perso.selectCar] != SC_FORSALE )
+#else
+   if ( m_perso.selectCar < m_perso.total ||
+        m_perso.selectCar < m_perso.bonus )  // sélectionne ?
+#endif
    {
-       m_sound->Play(SOUND_TZOING);
-       return;
+       WriteGamerInfo();
    }
-
-   max = pl->RetTotal();
-   for ( i=sel+1 ; i<max ; i++ )
+   else    // achète ?
    {
-       sprintf(old, "%s\\%s\\save%c%.3d", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], i);
-       sprintf(dir, "%s\\%s\\save%c%.3d", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], i-1);
-       rename(old, dir);
+       BuyPerso();
    }
-   IOReadList();
 }
 
-// Ecrit la scène.
+// Achète une voiture.
 
-BOOL CMainDialog::IOWriteScene()
+void CMainDialog::BuyPerso()
 {
-   CWindow*    pw;
-   CList*      pl;
-   CEdit*      pe;
-   char        filename[100];
-   char        filecbot[100];
-   char        info[100];
-   int         sel;
+   int     model, sel;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return FALSE;
-   pl = (CList*)pw->SearchControl(EVENT_INTERFACE_IOLIST);
-   if ( pl == 0 )  return FALSE;
-   pe = (CEdit*)pw->SearchControl(EVENT_INTERFACE_IONAME);
-   if ( pe == 0 )  return FALSE;
+   if ( m_perso.total >= 49 )  return;
 
-   sel = pl->RetSelect();
-   if ( sel == -1 )  return FALSE;
+   sel = m_perso.selectCar;
+   model = m_perso.usedCars[m_perso.selectCar];
 
-   _mkdir("Savegame");  // si n'existe pas encore !
-   sprintf(filename, "%s\\%s", m_savegameDir, m_main->RetGamerName());
-   _mkdir(filename);
-   sprintf(filename, "%s\\%s\\save%c%.3d", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], sel);
-   _mkdir(filename);
+#if _SE
+   m_perso.stateCars[m_perso.selectCar] = SC_OWNER;
+#else
+   m_perso.selectCar = m_perso.total;
+   m_perso.total ++;
+#endif
 
-   sprintf(filename, "%s\\%s\\save%c%.3d\\data.sav", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], sel);
-   sprintf(filecbot, "%s\\%s\\save%c%.3d\\cbot.run", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], sel);
-   pe->GetText(info, 100);
-   m_main->IOWriteScene(filename, filecbot, info);
+   m_perso.usedCars[m_perso.selectCar] = model;
+   m_perso.subModel[m_perso.selectCar] = m_perso.subModel[sel];
+   m_perso.colorBody[m_perso.selectCar] = m_perso.colorBody[sel];
 
-   m_shotDelay = 3;
-   sprintf(m_shotName, "%s\\%s\\save%c%.3d\\screen.bmp", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], sel);
+   m_perso.pesetas -= PricePerso(model);  // débite le compte du joueur
 
-   return TRUE;
+   WriteGamerInfo();
 }
 
-// Lit la scène.
+// Achète toutes les voitures.
 
-BOOL CMainDialog::IOReadScene()
+void CMainDialog::BuyAllPerso()
 {
-   FILE*       file;
-   CWindow*    pw;
-   CList*      pl;
-   char        filename[100];
-   char        filecbot[100];
-   char        line[500];
-   char        dir[100];
-   int         sel, i;
+   int     i, rank;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return FALSE;
-   pl = (CList*)pw->SearchControl(EVENT_INTERFACE_IOLIST);
-   if ( pl == 0 )  return FALSE;
+   m_perso.total = 0;
 
-   sel = pl->RetSelect();
-   if ( sel == -1 )  return FALSE;
+   for ( i=0 ; i<50 ; i++ )
+   {
+       rank = RetPersoModel(i);
+       if ( rank == 0 )  break;
 
-   sprintf(filename, "%s\\%s\\save%c%.3d\\data.sav", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], sel);
-   sprintf(filecbot, "%s\\%s\\save%c%.3d\\cbot.run", m_savegameDir, m_main->RetGamerName(), m_sceneName[0], sel);
+       m_perso.usedCars[i] = rank;
+       m_perso.subModel[i] = 0;
+       m_perso.stateCars[i] = i==0?SC_OWNER:SC_SHOWCASE;
+       DefPerso(i);
+       m_perso.total ++;
+   }
 
-   file = fopen(filename, "r");
-   if ( file == NULL )  return FALSE;
+   m_perso.buyable = m_perso.total;
+   m_perso.bonus   = m_perso.total;
+   m_perso.selectCar = 0;
 
-   while ( fgets(line, 500, file) != NULL )
-   {
-       for ( i=0 ; i<500 ; i++ )
-       {
-           if ( line[i] == '\t' )  line[i] = ' ';  // remplace tab par space
-           if ( line[i] == '/' && line[i+1] == '/' )
-           {
-               line[i] = 0;
-               break;
-           }
-       }
+#if !_SE
+   WriteGamerInfo();
+#endif
+}
 
-       if ( Cmd(line, "Mission") )
-       {
-           OpString(line, "base", m_sceneName);
-           m_sceneRank = OpInt(line, "rank", 0);
+// Retourne le modèle d'une voiture dans l'ordre des performances.
 
-           if ( strcmp(m_sceneName, "user") == 0 )
-           {
-               m_sceneRank = m_sceneRank%100;
-               OpString(line, "dir", dir);
-               for ( i=0 ; i<m_userTotal ; i++ )
-               {
-                   if ( strcmp(m_userList[i], dir) == 0 )
-                   {
-                       m_sceneRank += (i+1)*100;
-                       break;
-                   }
-               }
-               if ( m_sceneRank/100 == 0 )
-               {
-                   fclose(file);
-                   return FALSE;
-               }
-           }
-       }
+int CMainDialog::RetPersoModel(int rank)
+{
+   if ( rank == 0 )  return 4;  // firecraker
+   if ( rank == 1 )  return 5;  // hooligan
+   if ( rank == 2 )  return 1;  // tijuana taxi
+   if ( rank == 3 )  return 3;  // pickup
+   if ( rank == 4 )  return 7;  // reo
+   if ( rank == 5 )  return 2;  // ford 32
+   if ( rank == 6 )  return 6;  // chevy
+   if ( rank == 7 )  return 8;  // torpedo
+   return 0;  // terminateur
+}
+
+// Retourne l'index d'un modèle de voiture.
+
+int CMainDialog::IndexPerso(int model)
+{
+   int     i, max;
+
+   if ( m_perso.total > m_perso.bonus )  max = m_perso.total;
+   else                                  max = m_perso.bonus;
+
+   for ( i=0 ; i<max ; i++ )
+   {
+       if ( model == m_perso.usedCars[i] )  return i;
    }
-   fclose(file);
+   return -1;
+}
 
-   m_chap[m_index] = (m_sceneRank/100)-1;
-   m_sel[m_index]  = (m_sceneRank%100)-1;
+// Indique si un modèle de voiture est acheté par le joueur.
 
-   strcpy(m_sceneRead, filename);
-   strcpy(m_stackRead, filecbot);
-   return TRUE;
+BOOL CMainDialog::UsedPerso(int model)
+{
+   int     i, max;
+
+   if ( m_perso.total > m_perso.bonus )  max = m_perso.total;
+   else                                  max = m_perso.bonus;
+
+   for ( i=0 ; i<max ; i++ )
+   {
+#if _SE
+       if ( model == m_perso.usedCars[i] &&
+            m_perso.stateCars[i] == SC_OWNER )  return TRUE;
+#else
+       if ( model == m_perso.usedCars[i] )  return TRUE;
+#endif
+   }
+   return FALSE;
 }
 
+// Retourne le prix d'un modèle de voiture.
 
-// Retourne le nombre de chapitres accessibles.
+int CMainDialog::PricePerso(int model)
+{
+   if ( model == 4 )  return     2;  // firecraker
+   if ( model == 5 )  return    10;  // hooligan
+   if ( model == 1 )  return    40;  // tijuana taxi
+   if ( model == 3 )  return   150;  // pickup
+   if ( model == 7 )  return   600;  // reo
+   if ( model == 2 )  return  2500;  // ford 32
+   if ( model == 6 )  return 10000;  // chevy
+   if ( model == 8 )  return 12000;  // torpedo
+   return 0;
+}
 
-int CMainDialog::RetChapPassed()
+// Retourne le nom d'un modèle de voiture.
+
+void CMainDialog::NamePerso(char *buffer, int model)
 {
-   int         j;
+   strcpy(buffer, "?");
+   if ( model == 4 )  strcpy(buffer, "Basic Buzzing Buggy");  // firecraker
+   if ( model == 5 )  strcpy(buffer, "Hooly Wheely");         // hooligan
+   if ( model == 1 )  strcpy(buffer, "Mellow Cab");           // tijuana taxi
+   if ( model == 3 )  strcpy(buffer, "Daddy's Pickup");       // pickup
+   if ( model == 7 )  strcpy(buffer, "Don Carleone");         // reo
+   if ( model == 2 )  strcpy(buffer, "Drag Star");            // ford 32
+   if ( model == 6 )  strcpy(buffer, "Big Buzzing Bee");      // chevy
+   if ( model == 8 )  strcpy(buffer, "Speedy Torpedo");       // torpedo
+}
 
-   if ( m_main->RetShowAll() )  return 9;
+// Retourne les spécifications d'un modèle de voiture.
 
-   for ( j=0 ; j<9 ; j++ )
+void CMainDialog::SpecPerso(CarSpec &spec, int model)
+{
+   spec.minSpeed = NAN;
+   spec.maxSpeed = NAN;
+
+   if ( model == 4 )  // firecraker
    {
-       if ( !RetGamerInfoPassed((j+1)*100) )
-       {
-           return j;
-       }
+       spec.minSpeed = 120.0f;
+       spec.maxSpeed = 120.0f;
+   }
+   if ( model == 5 )  // hooligan
+   {
+       spec.minSpeed = 120.0f;
+       spec.maxSpeed = 120.0f;
+   }
+   if ( model == 1 )  // tijuana taxi
+   {
+       spec.minSpeed = 120.0f;
+       spec.maxSpeed = 120.0f;
+   }
+   if ( model == 3 )  // pickup
+   {
+       spec.minSpeed = 130.0f;
+       spec.maxSpeed = 130.0f;
+   }
+   if ( model == 7 )  // reo
+   {
+       spec.minSpeed = 140.0f;
+       spec.maxSpeed = 140.0f;
+   }
+   if ( model == 2 )  // ford 32
+   {
+       spec.minSpeed = 150.0f;
+       spec.maxSpeed = 150.0f;
+   }
+   if ( model == 6 )  // chevy
+   {
+       spec.minSpeed = 160.0f;
+       spec.maxSpeed = 160.0f;
+   }
+   if ( model == 8 )  // torpedo
+   {
+       spec.minSpeed = 170.0f;
+       spec.maxSpeed = 170.0f;
+   }
+}
+
+// Met une couleur fixe.
+
+void CMainDialog::FixPerso(int rank)
+{
+   m_perso.colorBody[m_perso.selectCar].r = perso_color[rank*3+0]/255.0f;
+   m_perso.colorBody[m_perso.selectCar].g = perso_color[rank*3+1]/255.0f;
+   m_perso.colorBody[m_perso.selectCar].b = perso_color[rank*3+2]/255.0f;
+}
+
+// Initialise le personnage de base lors de la création d'un joueur.
+
+void CMainDialog::FlushPerso()
+{
+   ZeroMemory(&m_perso, sizeof(GamerPerso));
+   m_perso.usedCars[0] = 4;  // firecraker
+   m_perso.subModel[0] = 0;  // peinture de base
+   m_perso.total = 1;
+   m_perso.bonus = 1;
+   m_perso.selectCar = 0;
+   m_perso.pesetas = 0;
+   m_perso.level = 3;  // niveau intermédiaire (costaud)
+   DefPerso(0);  // met la couleur standard
+}
+
+// Met la couleur standard à une voiture.
+
+void CMainDialog::DefPerso(int rank)
+{
+   int     model, color;
+
+   model = m_perso.usedCars[rank];
+   color = 0;  // couleur standard selon model
+   if ( m_perso.subModel[rank] == 0 )
+   {
+       if ( model == 1 )  color =  0;  // jaune  - tijuana taxi
+       if ( model == 2 )  color =  4;  // violet - ford 32
+       if ( model == 3 )  color =  1;  // bleu   - pickup
+       if ( model == 4 )  color =  2;  // rouge  - firecraker
+       if ( model == 5 )  color =  3;  // noir   - hooligan
+       if ( model == 6 )  color =  7;  // rose   - chevy
+       if ( model == 7 )  color = 12;  // violet - reo
+       if ( model == 8 )  color =  2;  // rouge  - torpedo
+   }
+   if ( m_perso.subModel[rank] == 1 )
+   {
+       if ( model == 1 )  color = 13;  // cyan   - tijuana taxi
+       if ( model == 2 )  color = 13;  // cyan   - ford 32
+       if ( model == 3 )  color =  6;  // brun   - pickup
+       if ( model == 4 )  color = 12;  // violet - firecraker
+       if ( model == 5 )  color =  4;  // violet - hooligan
+       if ( model == 6 )  color = 11;  // bleu   - chevy
+       if ( model == 7 )  color =  6;  // brun   - reo
+       if ( model == 8 )  color = 12;  // violet - torpedo
+   }
+   if ( m_perso.subModel[rank] == 2 )
+   {
+       if ( model == 1 )  color = 12;  // violet - tijuana taxi
+       if ( model == 2 )  color = 12;  // violet - ford 32
+       if ( model == 3 )  color = 12;  // violet - pickup
+       if ( model == 4 )  color =  4;  // violet - firecraker
+       if ( model == 5 )  color = 12;  // violet - hooligan
+       if ( model == 6 )  color =  4;  // violet - chevy
+       if ( model == 7 )  color =  7;  // rose   - reo
+       if ( model == 8 )  color =  6;  // brun   - torpedo
+   }
+   if ( m_perso.subModel[rank] == 3 )
+   {
+       if ( model == 1 )  color =  1;  // bleu   - tijuana taxi
+       if ( model == 2 )  color =  0;  // jaune  - ford 32
+       if ( model == 3 )  color =  3;  // noir   - pickup
+       if ( model == 4 )  color =  5;  // blanc  - firecraker
+       if ( model == 5 )  color =  1;  // bleu   - hooligan
+       if ( model == 6 )  color = 12;  // violet - chevy
+       if ( model == 7 )  color =  3;  // noir   - reo
+       if ( model == 8 )  color = 10;  // jaune  - torpedo
+   }
+
+   m_perso.colorBody[rank].r = perso_color[color*3+0]/255.0f;
+   m_perso.colorBody[rank].g = perso_color[color*3+1]/255.0f;
+   m_perso.colorBody[rank].b = perso_color[color*3+2]/255.0f;
+   m_perso.colorBody[rank].a = 0.0f;
+}
+
+// Retourne le modèle de la voiture choisie.
+
+int CMainDialog::RetModel()
+{
+   if ( m_bDuel )
+   {
+       return m_duelModel;
+   }
+   else
+   {
+       return m_perso.usedCars[m_perso.selectCar];
+   }
+}
+
+int CMainDialog::RetSubModel()
+{
+   if ( m_bDuel )
+   {
+       return m_duelSubModel;
+   }
+   else
+   {
+       return m_perso.subModel[m_perso.selectCar];
    }
-   return 9;
 }
 
+
 // Met à jour les listes selon le cheat code.
 
 void CMainDialog::AllMissionUpdate()
 {
-   if ( m_phase == PHASE_TRAINER ||
-        m_phase == PHASE_DEFI    ||
-        m_phase == PHASE_MISSION ||
+   if ( m_phase == PHASE_MISSION ||
         m_phase == PHASE_FREE    ||
-        m_phase == PHASE_TEEN    ||
         m_phase == PHASE_USER    ||
         m_phase == PHASE_PROTO   )
    {
-       UpdateSceneChap(m_chap[m_index]);
-       UpdateSceneList(m_chap[m_index], m_sel[m_index]);
+       UpdateSceneList(m_sel[m_index]);
    }
 }
 
-// Met à jour les chapitres des exercices ou missions.
+// Met à jour la liste des missions.
 
-void CMainDialog::UpdateSceneChap(int &chap)
+void CMainDialog::UpdateSceneList(int &sel)
 {
    FILE*       file = NULL;
    CWindow*    pw;
    CList*      pl;
-   long        hFile;
-   struct _finddata_t fileBuffer;
    char        filename[_MAX_FNAME];
    char        op[100];
    char        line[500];
    char        name[100];
-   int         i, j;
-   BOOL        bPassed, bDo;
+   int         i, j, jj, k, rank, rsel, look;
+   BOOL        bPassed;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw == 0 )  return;
-   pl = (CList*)pw->SearchControl(EVENT_INTERFACE_CHAP);
+   pl = (CList*)pw->SearchControl(EVENT_INTERFACE_LIST);
    if ( pl == 0 )  return;
 
-   pl->Flush();
-
-   if ( m_phase == PHASE_USER )
-   {
-       j = 0;
-       hFile = _findfirst("user\\*", &fileBuffer);
-       if ( hFile != -1 )
-       {
-           do
-           {
-               if ( (fileBuffer.attrib & _A_SUBDIR) != 0 &&
-                    fileBuffer.name[0] != '.' )
-               {
-                   strcpy(m_userList[j++], fileBuffer.name);
-               }
-           }
-           while ( _findnext(hFile, &fileBuffer) == 0 && j < 100 );
-       }
-       m_userTotal = j;
-
-       do  // trie tous les noms :
-       {
-           bDo = FALSE;
-           for ( i=0 ; i<m_userTotal-1 ; i++ )
-           {
-               if ( strcmp(m_userList[i], m_userList[i+1]) > 0 )
-               {
-                   strcpy(name, m_userList[i]);
-                   strcpy(m_userList[i], m_userList[i+1]);
-                   strcpy(m_userList[i+1], name);
-                   bDo = TRUE;
-               }
-           }
-       }
-       while ( bDo );
-
-       for ( j=0 ; j<m_userTotal ; j++ )
-       {
-           BuildSceneName(filename, m_sceneName, (j+1)*100);
-           file = fopen(filename, "r");
-           if ( file == NULL )
-           {
-               strcpy(name, m_userList[j]);
-           }
-           else
-           {
-               BuildResumeName(name, m_sceneName, j+1);  // nom par défaut
-               while ( fgets(line, 500, file) != NULL )
-               {
-                   for ( i=0 ; i<500 ; i++ )
-                   {
-                       if ( line[i] == '\t' )  line[i] = ' ';  // remplace tab par space
-                       if ( line[i] == '/' && line[i+1] == '/' )
-                       {
-                           line[i] = 0;
-                           break;
-                       }
-                   }
-
-                   sprintf(op, "Title.%c", RetLanguageLetter());
-                   if ( Cmd(line, op) )
-                   {
-                       OpString(line, "text", name);
-                       break;
-                   }
-               }
-               fclose(file);
-           }
+   ZeroMemory(&m_listInfo, sizeof(ListInfo)*MAXSCENE);
 
-           pl->SetName(j, name);
-           pl->SetEnable(j, TRUE);
-       }
-   }
-   else
+   pl->Flush();
+   rank = 0;
+   rsel = 0;
+   look = 1;
+   for ( k=0 ; k<99 ; k++ )
    {
-       for ( j=0 ; j<9 ; j++ )
-       {
-#if _SCHOOL
-           if ( m_phase == PHASE_MISSION )  break;
-           if ( m_phase == PHASE_FREE    )  break;
-#if _CEEBOTDEMO
-           if ( m_phase == PHASE_TRAINER && j >= 2 )  break;
+#if _DEMO
+       if ( k >= 1 )  break;
 #endif
+#if _SE
+       if ( k >= 3 )  break;
 #endif
+       BuildSceneName(filename, m_sceneName, (k+1)*10);
+       file = fopen(filename, "r");
+       if ( file == NULL )  break;
+       fclose(file);
+
+       jj = 9;
+       if ( m_phase == PHASE_FREE )  jj = 19;
+       for ( j=0 ; j<jj ; j++ )
+       {
 #if _DEMO
-           if ( m_phase == PHASE_MISSION && j >= 4 )  break;
-           if ( m_phase == PHASE_TRAINER && j >= 1 )  break;
+           if ( j >= 1 )  break;
+#endif
+#if _SE
+           if ( j >= 3 )  break;
 #endif
-           BuildSceneName(filename, m_sceneName, (j+1)*100);
+           BuildSceneName(filename, m_sceneName, (k+1)*10+(j+1));
            file = fopen(filename, "r");
            if ( file == NULL )  break;
 
@@ -4827,227 +4853,93 @@ void CMainDialog::UpdateSceneChap(int &chap)
            }
            fclose(file);
 
-           bPassed = RetGamerInfoPassed((j+1)*100);
-           sprintf(line, "%d: %s", j+1, name);
-           pl->SetName(j, line);
-           pl->SetCheck(j, bPassed);
-           pl->SetEnable(j, TRUE);
-
-           if ( m_phase == PHASE_MISSION && !m_main->RetShowAll() && !bPassed )
+           bPassed = RetGamerInfoPassed((k+1)*10+(j+1));
+           if ( m_bPesetas )
            {
-               j ++;
-               break;
+               sprintf(line, "%d/%d: %s", k+1, j+1, name);
            }
-
-#if _TEEN
-           if ( m_phase == PHASE_TRAINER && !m_main->RetShowAll() && !bPassed )
+           else
            {
-               j ++;
-               break;
+               sprintf(line, "%d: %s", j+1, name);
            }
-#endif
+           pl->SetName(rank, line);
+           pl->SetCheck(rank, bPassed);
+           pl->SetEnable(rank, TRUE);
+           pl->SetLook(rank, look);
+           m_listInfo[rank].chap = k+1;
+           m_listInfo[rank].scene = j+1;
+           if ( sel == (k+1)*10+(j+1) )  rsel = rank;
+           rank ++;
+       }
 
-           if ( m_phase == PHASE_FREE && j == m_accessChap )
-           {
-               j ++;
-               break;
-           }
+       bPassed = RetGamerInfoPassed((k+1)*10);
+       if ( !m_main->RetShowAll() && !bPassed )
+       {
+           j ++;
+           break;
        }
-   }
 
-   if ( chap > j-1 )  chap = j-1;
+       look ++;
+       if ( look > 2 )  look = 1;
+   }
 
-   pl->SetSelect(chap);
-   pl->ShowSelect(FALSE);  // montre la ligne sélectionnée
+   pl->SetSelect(rsel);
+   pl->ShowSelect();  // montre la ligne sélectionnée
 }
 
-// Met à jour la liste des exercices ou missions.
+// Retourne s'il peut exister une voiture fantome.
 
-void CMainDialog::UpdateSceneList(int chap, int &sel)
+BOOL CMainDialog::ReadGhostMode(int rank)
 {
    FILE*       file = NULL;
-   CWindow*    pw;
-   CList*      pl;
    char        filename[_MAX_FNAME];
-   char        op[100];
    char        line[500];
-   char        name[100];
-   int         i, j;
-   BOOL        bPassed;
+   int         i, mode;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return;
-   pl = (CList*)pw->SearchControl(EVENT_INTERFACE_LIST);
-   if ( pl == 0 )  return;
+   mode = FALSE;
 
-   pl->Flush();
+   BuildSceneName(filename, m_sceneBase, rank);
+   file = fopen(filename, "r");
+   if ( file == NULL )  return mode;
 
-   for ( j=0 ; j<99 ; j++ )
+   while ( fgets(line, 500, file) != NULL )
    {
-#if _SCHOOL
-       if ( m_phase == PHASE_MISSION )  break;
-       if ( m_phase == PHASE_FREE    )  break;
-#if _CEEBOTDEMO
-#if _TEEN
-       if ( m_phase == PHASE_TRAINER && j >= 5 )  break;
-#else
-       if ( m_phase == PHASE_TRAINER && j >= 3 )  break;
-#endif
-#endif
-#endif
-#if _DEMO
-       if ( m_phase == PHASE_MISSION && j >= 3 )  break;
-       if ( m_phase == PHASE_TRAINER && j >= 5 )  break;
-#endif
-       BuildSceneName(filename, m_sceneName, (chap+1)*100+(j+1));
-       file = fopen(filename, "r");
-       if ( file == NULL )  break;
-
-       BuildResumeName(name, m_sceneName, j+1);  // nom par défaut
-       while ( fgets(line, 500, file) != NULL )
+       for ( i=0 ; i<500 ; i++ )
        {
-           for ( i=0 ; i<500 ; i++ )
-           {
-               if ( line[i] == '\t' )  line[i] = ' ';  // remplace tab par space
-               if ( line[i] == '/' && line[i+1] == '/' )
-               {
-                   line[i] = 0;
-                   break;
-               }
-           }
-
-           sprintf(op, "Title.%c", RetLanguageLetter());
-           if ( Cmd(line, op) )
+           if ( line[i] == '\t' )  line[i] = ' ';  // remplace tab par space
+           if ( line[i] == '/' && line[i+1] == '/' )
            {
-               OpString(line, "text", name);
+               line[i] = 0;
                break;
            }
        }
-       fclose(file);
-
-       bPassed = RetGamerInfoPassed((chap+1)*100+(j+1));
-       sprintf(line, "%d: %s", j+1, name);
-       pl->SetName(j, line);
-       pl->SetCheck(j, bPassed);
-       pl->SetEnable(j, TRUE);
-
-       if ( m_phase == PHASE_MISSION && !m_main->RetShowAll() && !bPassed )
-       {
-           j ++;
-           break;
-       }
 
-#if _TEEN
-       if ( m_phase == PHASE_TRAINER && !m_main->RetShowAll() && !bPassed )
+       if ( Cmd(line, "Ghost") )
        {
-           j ++;
+           mode = OpInt(line, "mode", 0);
            break;
        }
-#endif
-   }
-
-   BuildSceneName(filename, m_sceneName, (chap+1)*100+(j+1));
-   file = fopen(filename, "r");
-   if ( file == NULL )
-   {
-       m_maxList = j;
-   }
-   else
-   {
-       m_maxList = j+1;  // ce n'est pas le dernier !
-       fclose(file);
-   }
-
-   if ( sel > j-1 )  sel = j-1;
-
-   pl->SetSelect(sel);
-   pl->ShowSelect(FALSE);  // montre la ligne sélectionnée
-}
-
-// Met à jour le bouton "solution" selon le cheat code.
-
-void CMainDialog::ShowSoluceUpdate()
-{
-   CWindow*    pw;
-   CEdit*      pe;
-   CCheck*     pc;
-
-   if ( m_phase == PHASE_TRAINER ||
-        m_phase == PHASE_DEFI    ||
-        m_phase == PHASE_MISSION ||
-        m_phase == PHASE_FREE    ||
-        m_phase == PHASE_TEEN    ||
-        m_phase == PHASE_USER    ||
-        m_phase == PHASE_PROTO   )
-   {
-       m_bSceneSoluce = FALSE;
-
-       pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-       if ( pw == 0 )  return;
-       pe = (CEdit*)pw->SearchControl(EVENT_INTERFACE_RESUME);
-       if ( pe == 0 )  return;
-       pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_SOLUCE);
-       if ( pc == 0 )  return;
-
-       if ( m_main->RetShowSoluce() )
-       {
-           pc->SetState(STATE_VISIBLE);
-           pc->SetState(STATE_CHECK);
-           m_bSceneSoluce = TRUE;
-       }
-       else
-       {
-           pc->ClearState(STATE_VISIBLE);
-           pc->ClearState(STATE_CHECK);
-           m_bSceneSoluce = FALSE;
-       }
    }
+   fclose(file);
+   return mode;
 }
 
-// Met à jour un résumé d'exercice ou de mission.
+// Retourne les spécifications de la voiture requise.
 
-void CMainDialog::UpdateSceneResume(int rank)
+void CMainDialog::ReadCarSpec(int rank, CarSpec &spec)
 {
    FILE*       file = NULL;
-   CWindow*    pw;
-   CEdit*      pe;
-   CCheck*     pc;
    char        filename[_MAX_FNAME];
-   char        op[100];
    char        line[500];
-   char        name[500];
-   int         i, numTry;
-   BOOL        bPassed, bVisible;
-
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return;
-   pe = (CEdit*)pw->SearchControl(EVENT_INTERFACE_RESUME);
-   if ( pe == 0 )  return;
-   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_SOLUCE);
+   int         i;
 
-   if ( pc == 0 )
-   {
-       m_bSceneSoluce = FALSE;
-   }
-   else
-   {
-       numTry  = RetGamerInfoTry(rank);
-       bPassed = RetGamerInfoPassed(rank);
-       bVisible = ( numTry > 2 || bPassed || m_main->RetShowSoluce() );
-       if ( !RetSoluce4() )  bVisible = FALSE;
-       pc->SetState(STATE_VISIBLE, bVisible);
-       if ( !bVisible )
-       {
-           pc->ClearState(STATE_CHECK);
-           m_bSceneSoluce = FALSE;
-       }
-   }
+   spec.minSpeed = NAN;
+   spec.maxSpeed = NAN;
 
-   BuildSceneName(filename, m_sceneName, rank);
+   BuildSceneName(filename, m_sceneBase, rank);
    file = fopen(filename, "r");
    if ( file == NULL )  return;
 
-   name[0] = 0;
    while ( fgets(line, 500, file) != NULL )
    {
        for ( i=0 ; i<500 ; i++ )
@@ -5060,7 +4952,176 @@ void CMainDialog::UpdateSceneResume(int rank)
            }
        }
 
-       sprintf(op, "Resume.%c", RetLanguageLetter());
+       if ( Cmd(line, "CarSpec") )
+       {
+           spec.minSpeed = OpFloat(line, "minSpeed", NAN);
+           spec.maxSpeed = OpFloat(line, "maxSpeed", NAN);
+           break;
+       }
+   }
+   fclose(file);
+}
+
+// Retourne le nb de pesetas limite à accumuler pour passer plus loin.
+
+int CMainDialog::ReadPesetasNext()
+{
+#if _DEMO
+   return ReadPesetasLimit(10);
+#else
+   int     i;
+
+   for ( i=0 ; i<100 ; i++ )
+   {
+       if ( !m_sceneInfo[i*10].bPassed )
+       {
+           return ReadPesetasLimit(i*10);
+       }
+   }
+   return 0;
+#endif
+}
+
+// Retourne le nb de pesetas limite à accumuler pour passer plus loin.
+
+int CMainDialog::ReadPesetasLimit(int rank)
+{
+   FILE*       file = NULL;
+   char        filename[_MAX_FNAME];
+   char        line[500];
+   int         i, limit;
+
+   BuildSceneName(filename, m_sceneName, rank);
+   file = fopen(filename, "r");
+   if ( file == NULL )  return 0;
+
+   limit = 0;
+   while ( fgets(line, 500, file) != NULL )
+   {
+       for ( i=0 ; i<500 ; i++ )
+       {
+           if ( line[i] == '\t' )  line[i] = ' ';  // remplace tab par space
+           if ( line[i] == '/' && line[i+1] == '/' )
+           {
+               line[i] = 0;
+               break;
+           }
+       }
+
+       if ( Cmd(line, "Pesetas") )
+       {
+           limit = OpInt(line, "limit", 0);
+           break;
+       }
+   }
+   fclose(file);
+
+   return limit;
+}
+
+// Met à jour le gain du joueur.
+
+void CMainDialog::UpdateScenePesetasPerso()
+{
+   CWindow*    pw;
+   CPesetas*   pp;
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return;
+   pp = (CPesetas*)pw->SearchControl(EVENT_INTERFACE_PESETAS);
+   if ( pp == 0 )  return;
+
+   pp->SetLevelCredit((float)m_perso.pesetas);
+}
+
+// Met à jour le gain max possible d'une mission.
+
+void CMainDialog::UpdateScenePesetasMax(int rank)
+{
+   CWindow*    pw;
+   CPesetas*   pp;
+   FILE*       file = NULL;
+   char        filename[_MAX_FNAME];
+   char        line[500];
+   int         i, max;
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return;
+   pp = (CPesetas*)pw->SearchControl(EVENT_INTERFACE_PESETAS);
+   if ( pp == 0 )  return;
+
+   BuildSceneName(filename, m_sceneName, rank);
+   file = fopen(filename, "r");
+   if ( file == NULL )  return;
+
+   max = 0;
+   while ( fgets(line, 500, file) != NULL )
+   {
+       for ( i=0 ; i<500 ; i++ )
+       {
+           if ( line[i] == '\t' )  line[i] = ' ';  // remplace tab par space
+           if ( line[i] == '/' && line[i+1] == '/' )
+           {
+               line[i] = 0;
+               break;
+           }
+       }
+
+       if ( Cmd(line, "Pesetas") )
+       {
+           max = OpInt(line, "max", 0);
+           break;
+       }
+   }
+   fclose(file);
+
+   pp->SetLevelMission((float)max);
+}
+
+// Met à jour un résumé d'exercice ou de mission.
+
+void CMainDialog::UpdateSceneResume(int rank)
+{
+   CWindow*    pw;
+   CEdit*      pe;
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return;
+   pe = (CEdit*)pw->SearchControl(EVENT_INTERFACE_RESUME);
+   if ( pe == 0 )  return;
+
+   UpdateSceneResume(rank, pe);
+}
+
+// Met à jour un résumé d'exercice ou de mission.
+
+void CMainDialog::UpdateSceneResume(int rank, CEdit *pe)
+{
+   FILE*       file = NULL;
+   char        filename[_MAX_FNAME];
+   char        op[100];
+   char        line[500];
+   char        name[500];
+   int         i;
+
+   BuildSceneName(filename, m_sceneName, rank);
+   file = fopen(filename, "r");
+   if ( file == NULL )  return;
+
+   name[0] = 0;
+   while ( fgets(line, 500, file) != NULL )
+   {
+       for ( i=0 ; i<500 ; i++ )
+       {
+           if ( line[i] == '\t' )  line[i] = ' ';  // remplace tab par space
+           if ( line[i] == '/' && line[i+1] == '/' )
+           {
+               line[i] = 0;
+               break;
+           }
+       }
+
+       sprintf(op, "Resume.%c", RetLanguageLetter());
        if ( Cmd(line, op) )
        {
            OpString(line, "text", name);
@@ -5072,6 +5133,155 @@ void CMainDialog::UpdateSceneResume(int rank)
    pe->SetText(name);
 }
 
+// Met à jour un résumé d'exercice ou de mission.
+
+BOOL CMainDialog::ReadSceneTitle(char *scene, int rank, char *buffer)
+{
+   FILE*       file = NULL;
+   char        filename[_MAX_FNAME];
+   char        op[100];
+   char        line[500];
+   int         i;
+
+   BuildSceneName(filename, scene, rank);
+   file = fopen(filename, "r");
+   if ( file == NULL )  return FALSE;
+
+   if ( strcmp(scene, "scene") == 0 )
+   {
+       sprintf(buffer, "%d/%d: ", rank/10, rank%10);
+   }
+   else if ( strcmp(scene, "free") == 0 )
+   {
+       sprintf(buffer, "%d: ", rank-10);
+   }
+   else
+   {
+       buffer[0] = 0;
+   }
+
+   while ( fgets(line, 500, file) != NULL )
+   {
+       for ( i=0 ; i<500 ; i++ )
+       {
+           if ( line[i] == '\t' )  line[i] = ' ';  // remplace tab par space
+           if ( line[i] == '/' && line[i+1] == '/' )
+           {
+               line[i] = 0;
+               break;
+           }
+       }
+
+       sprintf(op, "Title.%c", RetLanguageLetter());
+       if ( Cmd(line, op) )
+       {
+           OpString(line, "text", buffer+strlen(buffer));
+           break;
+       }
+   }
+   fclose(file);
+   return TRUE;
+}
+
+// Met à jour une image d'exercice ou de mission.
+
+void CMainDialog::UpdateSceneImage(int rank)
+{
+   CWindow*    pw;
+   CImage*     pi;
+   char        filename[_MAX_FNAME];
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return;
+   pi = (CImage*)pw->SearchControl(EVENT_INTERFACE_IMAGE);
+   if ( pi == 0 )  return;
+
+   sprintf(filename, "diagram\\%s%.3d.bmp", m_sceneName, rank);
+   pi->SetFilenameImage(filename);
+}
+
+// Met à jour le bouton play pour un exercice ou une mission.
+
+void CMainDialog::UpdateScenePlay(int rank)
+{
+   CWindow*    pw;
+   CButton*    pb;
+   CarSpec     missionSpec, carSpec;
+   int         i, max;
+
+   if ( m_bPesetas )  return;  // pas course simple ?
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return;
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_PLAY);
+   if ( pb == 0 )  return;
+
+   ReadCarSpec(rank, missionSpec);
+   if ( missionSpec.minSpeed == NAN )
+   {
+       pb->SetState(STATE_ENABLE, TRUE);
+       return;
+   }
+
+   pb->SetState(STATE_ENABLE, FALSE);
+   if ( m_perso.total > m_perso.bonus )  max = m_perso.total;
+   else                                  max = m_perso.bonus;
+   for ( i=0 ; i<max ; i++ )
+   {
+       SpecPerso(carSpec, m_perso.usedCars[i]);
+       if ( carSpec.minSpeed != NAN )
+       {
+           if ( carSpec.minSpeed >= missionSpec.minSpeed )
+           {
+               pb->SetState(STATE_ENABLE, TRUE);
+               return;
+           }
+       }
+   }
+}
+
+// Met à jour le bouton "voiture fantome".
+
+void CMainDialog::UpdateSceneGhost(int rank)
+{
+   CWindow*    pw;
+   CCheck*     pc;
+   CGroup*     pg;
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return;
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_GHOSTm);
+   if ( pc == 0 )  return;
+   pg = (CGroup*)pw->SearchControl(EVENT_INTERFACE_GHOSTg);
+   if ( pg == 0 )  return;
+
+   m_bGhostExist = ReadGhostMode(rank);
+
+   if ( m_bGhostExist )
+   {
+       if ( m_main->RecorderExist(rank, m_perso.usedCars[m_perso.selectCar]) )
+       {
+           pg->SetState(STATE_VISIBLE, TRUE);
+           pc->SetState(STATE_VISIBLE, TRUE);
+           pc->SetState(STATE_ENABLE,  TRUE);
+           pc->SetState(STATE_CHECK,   m_bGhostEnable);
+       }
+       else
+       {
+           pg->SetState(STATE_VISIBLE, TRUE);
+           pc->SetState(STATE_VISIBLE, TRUE);
+           pc->SetState(STATE_ENABLE,  FALSE);
+           pc->SetState(STATE_CHECK,   FALSE);
+       }
+   }
+   else
+   {
+       pg->SetState(STATE_VISIBLE, FALSE);
+       pc->SetState(STATE_VISIBLE, FALSE);
+       pc->SetState(STATE_CHECK,   FALSE);
+   }
+}
+
 // Met à jour la liste des devices.
 
 void CMainDialog::UpdateDisplayDevice()
@@ -5082,7 +5292,7 @@ void CMainDialog::UpdateDisplayDevice()
    char        bufModes[5000];
    int         i, j, totalDevices, selectDevices, totalModes, selectModes;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw == 0 )  return;
    pl = (CList*)pw->SearchControl(EVENT_LIST1);
    if ( pl == 0 )  return;
@@ -5102,7 +5312,7 @@ void CMainDialog::UpdateDisplayDevice()
    }
 
    pl->SetSelect(selectDevices);
-   pl->ShowSelect(FALSE);
+   pl->ShowSelect();
 
    m_setupSelDevice = selectDevices;
 }
@@ -5117,7 +5327,7 @@ void CMainDialog::UpdateDisplayMode()
    char        bufModes[5000];
    int         i, j, totalDevices, selectDevices, totalModes, selectModes;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw == 0 )  return;
    pl = (CList*)pw->SearchControl(EVENT_LIST2);
    if ( pl == 0 )  return;
@@ -5137,7 +5347,7 @@ void CMainDialog::UpdateDisplayMode()
    }
 
    pl->SetSelect(selectModes);
-   pl->ShowSelect(FALSE);
+   pl->ShowSelect();
 
    m_setupSelMode = selectModes;
 }
@@ -5153,7 +5363,7 @@ void CMainDialog::ChangeDisplay()
    char*       mode;
    BOOL        bFull;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw == 0 )  return;
 
    pl = (CList*)pw->SearchControl(EVENT_LIST1);
@@ -5181,27 +5391,112 @@ void CMainDialog::ChangeDisplay()
 }
 
 
+// Calcule le checksum d'un fichier quelconque.
 
-// Met à jour le bouton "appliquer".
-
-void CMainDialog::UpdateApply()
+int CheckFile(char *filename)
 {
-   CWindow*    pw;
-   CButton*    pb;
-   CList*      pl;
-   CCheck*     pc;
-   int         sel1, sel2;
-   BOOL        bFull;
+   FILE*   file;
+   int     len, i, check;
+   char*   buffer;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
-   if ( pw == 0 )  return;
+   file = fopen(filename, "rb");
+   if ( file == NULL )  return 0;
 
-   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_APPLY);
-   if ( pb == 0 )  return;
+   fseek(file, 0, SEEK_END);
+   len = ftell(file);
+   fseek(file, 0, SEEK_SET);
 
-   pl = (CList*)pw->SearchControl(EVENT_LIST1);
-   if ( pl == 0 )  return;
-   sel1 = pl->RetSelect();
+   buffer = (char*)malloc(len);
+   fread(buffer, len, 1, file);
+
+   check = 0;
+   for ( i=0 ; i<len ; i++ )
+   {
+       check += buffer[i];
+   }
+
+   free(buffer);
+   fclose(file);
+   return check;
+}
+
+// Calcule les checksums d'une mission.
+
+BOOL CMainDialog::ComputeCheck(int rank, int check[])
+{
+   FILE*       file = NULL;
+   char        filename[_MAX_FNAME];
+   char        line[500];
+   char        name[100];
+   char        dir[100];
+   char*       p;
+   int         i, len;
+
+   for ( i=0 ; i<10 ; i++ )
+   {
+       check[i] = 0;
+   }
+
+   BuildSceneName(filename, m_sceneBase, rank);
+   file = fopen(filename, "r");
+   if ( file == NULL )  return FALSE;
+
+   while ( fgets(line, 500, file) != NULL )
+   {
+       for ( i=0 ; i<500 ; i++ )
+       {
+           if ( line[i] == '\t' )  line[i] = ' ';  // remplace tab par space
+           if ( line[i] == '/' && line[i+1] == '/' )
+           {
+               line[i] = 0;
+               break;
+           }
+       }
+
+       p = strstr(line, "Title.");
+       if ( p == line )  continue;
+
+       p = strstr(line, "Resume.");
+       if ( p == line )  continue;
+
+       len = strlen(line);
+       for ( i=0 ; i<len ; i++ )
+       {
+           check[0] += line[i];
+       }
+
+       if ( Cmd(line, "TerrainRelief") )
+       {
+           OpString(line, "image", name);
+           UserDir(dir, name, "textures");
+           check[1] = CheckFile(dir);
+       }
+   }
+   fclose(file);
+   return TRUE;
+}
+
+
+// Met à jour le bouton "appliquer".
+
+void CMainDialog::UpdateApply()
+{
+   CWindow*    pw;
+   CButton*    pb;
+   CList*      pl;
+   CCheck*     pc;
+   int         sel1, sel2;
+   BOOL        bFull;
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return;
+
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_APPLY);
+   if ( pb == 0 )  return;
+
+   pl = (CList*)pw->SearchControl(EVENT_LIST1);
+   if ( pl == 0 )  return;
+   sel1 = pl->RetSelect();
 
    pl = (CList*)pw->SearchControl(EVENT_LIST2);
    if ( pl == 0 )  return;
@@ -5215,10 +5510,12 @@ void CMainDialog::UpdateApply()
         bFull == m_setupFull     )
    {
        pb->ClearState(STATE_ENABLE);
+       pb->ClearState(STATE_FLASH);
    }
    else
    {
        pb->SetState(STATE_ENABLE);
+       pb->SetState(STATE_FLASH);
    }
 }
 
@@ -5228,19 +5525,12 @@ void CMainDialog::UpdateSetupButtons()
 {
    CWindow*    pw;
    CCheck*     pc;
-   CEditValue* pv;
    CSlider*    ps;
    float       value;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw == 0 )  return;
 
-   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_TOTO);
-   if ( pc != 0 )
-   {
-       pc->SetState(STATE_CHECK, m_engine->RetTotoMode());
-   }
-
    pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_TOOLTIP);
    if ( pc != 0 )
    {
@@ -5266,64 +5556,40 @@ void CMainDialog::UpdateSetupButtons()
        pc->SetState(STATE_ENABLE, m_engine->RetNiceMouseCap());
    }
 
-   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_EDITMODE);
-   if ( pc != 0 )
-   {
-       pc->SetState(STATE_CHECK, m_engine->RetEditIndentMode());
-   }
-
-   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_EDITVALUE);
-   if ( pc != 0 )
-   {
-       pc->SetState(STATE_CHECK, m_engine->RetEditIndentValue()>2);
-   }
-
-   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_SOLUCE4);
-   if ( pc != 0 )
-   {
-       pc->SetState(STATE_CHECK, m_bSoluce4);
-   }
-
    pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_MOVIES);
    if ( pc != 0 )
    {
        pc->SetState(STATE_CHECK, m_bMovies);
    }
 
-   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_NICERST);
-   if ( pc != 0 )
-   {
-       pc->SetState(STATE_CHECK, m_bNiceReset);
-   }
-
-   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_HIMSELF);
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_CBACK);
    if ( pc != 0 )
    {
-       pc->SetState(STATE_CHECK, m_bHimselfDamage);
+       pc->SetState(STATE_CHECK, m_defCamera == CAMERA_BACK);
    }
 
-   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_SCROLL);
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_CBOARD);
    if ( pc != 0 )
    {
-       pc->SetState(STATE_CHECK, m_bCameraScroll);
+       pc->SetState(STATE_CHECK, m_defCamera == CAMERA_ONBOARD);
    }
 
-   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_INVERTX);
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_EFFECT);
    if ( pc != 0 )
    {
-       pc->SetState(STATE_CHECK, m_bCameraInvertX);
+       pc->SetState(STATE_CHECK, m_bEffect);
    }
 
-   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_INVERTY);
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_FLASH);
    if ( pc != 0 )
    {
-       pc->SetState(STATE_CHECK, m_bCameraInvertY);
+       pc->SetState(STATE_CHECK, m_bFlash);
    }
 
-   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_EFFECT);
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_BLAST);
    if ( pc != 0 )
    {
-       pc->SetState(STATE_CHECK, m_bEffect);
+       pc->SetState(STATE_CHECK, m_bMotorBlast);
    }
 
    pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_SHADOW);
@@ -5332,12 +5598,6 @@ void CMainDialog::UpdateSetupButtons()
        pc->SetState(STATE_CHECK, m_engine->RetShadow());
    }
 
-   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_GROUND);
-   if ( pc != 0 )
-   {
-       pc->SetState(STATE_CHECK, m_engine->RetGroundSpot());
-   }
-
    pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_DIRTY);
    if ( pc != 0 )
    {
@@ -5374,45 +5634,92 @@ void CMainDialog::UpdateSetupButtons()
        pc->SetState(STATE_CHECK, m_engine->RetLightMode());
    }
 
-   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_JOYSTICK);
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_SUPER);
+   if ( pc != 0 )
+   {
+       pc->SetState(STATE_CHECK, m_engine->RetSuperDetail());
+   }
+
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_STEERING);
+   if ( pc != 0 )
+   {
+       pc->SetState(STATE_CHECK, m_engine->RetJoystick()==1);
+   }
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_JOYPAD);
+   if ( pc != 0 )
+   {
+       pc->SetState(STATE_CHECK, m_engine->RetJoystick()==2);
+   }
+
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_FFBc);
    if ( pc != 0 )
    {
-       pc->SetState(STATE_CHECK, m_engine->RetJoystick());
+       if ( m_engine->RetJoystick() == 0 )
+       {
+           pc->SetState(STATE_ENABLE, FALSE);
+           pc->SetState(STATE_CHECK, FALSE);
+       }
+       else
+       {
+           pc->SetState(STATE_ENABLE, TRUE);
+           pc->SetState(STATE_CHECK, m_engine->RetFFB());
+       }
+   }
+
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_FFBs);
+   if ( ps != 0 )
+   {
+       if ( m_engine->RetJoystick() == 0 || !m_engine->RetFFB() )
+       {
+           ps->SetState(STATE_ENABLE, FALSE);
+       }
+       else
+       {
+           ps->SetState(STATE_ENABLE, TRUE);
+       }
+       ps->SetVisibleValue(m_engine->RetForce());
    }
 
-   pv = (CEditValue*)pw->SearchControl(EVENT_INTERFACE_PARTI);
-   if ( pv != 0 )
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PARTI);
+   if ( ps != 0 )
    {
        value = m_engine->RetParticuleDensity();
-       pv->SetValue(value);
+       ps->SetVisibleValue(value);
+   }
+
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_WHEEL);
+   if ( ps != 0 )
+   {
+       value = m_engine->RetWheelTraceQuantity();
+       ps->SetVisibleValue(value);
    }
 
-   pv = (CEditValue*)pw->SearchControl(EVENT_INTERFACE_CLIP);
-   if ( pv != 0 )
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_CLIP);
+   if ( ps != 0 )
    {
        value = m_engine->RetClippingDistance();
-       pv->SetValue(value);
+       ps->SetVisibleValue(value);
    }
 
-   pv = (CEditValue*)pw->SearchControl(EVENT_INTERFACE_DETAIL);
-   if ( pv != 0 )
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_DETAIL);
+   if ( ps != 0 )
    {
        value = m_engine->RetObjectDetail();
-       pv->SetValue(value);
+       ps->SetVisibleValue(value);
    }
 
-   pv = (CEditValue*)pw->SearchControl(EVENT_INTERFACE_GADGET);
-   if ( pv != 0 )
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_GADGET);
+   if ( ps != 0 )
    {
        value = m_engine->RetGadgetQuantity();
-       pv->SetValue(value);
+       ps->SetVisibleValue(value);
    }
 
-   pv = (CEditValue*)pw->SearchControl(EVENT_INTERFACE_TEXTURE);
-   if ( pv != 0 )
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_TEXTURE);
+   if ( ps != 0 )
    {
        value = (float)m_engine->RetTextureQuality();
-       pv->SetValue(value);
+       ps->SetVisibleValue(value);
    }
 
    ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_VOLSOUND);
@@ -5435,6 +5742,12 @@ void CMainDialog::UpdateSetupButtons()
        pc->SetState(STATE_CHECK, m_sound->RetSound3D());
        pc->SetState(STATE_ENABLE, m_sound->RetSound3DCap());
    }
+
+   pc = (CCheck*)pw->SearchControl(EVENT_INTERFACE_COMMENTS);
+   if ( pc != 0 )
+   {
+       pc->SetState(STATE_CHECK, m_sound->RetComments());
+   }
 }
 
 // Met à jour le moteur en fonction des boutons après la phase de setup.
@@ -5442,45 +5755,51 @@ void CMainDialog::UpdateSetupButtons()
 void CMainDialog::ChangeSetupButtons()
 {
    CWindow*    pw;
-   CEditValue* pv;
    CSlider*    ps;
    float       value;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw == 0 )  return;
 
-   pv = (CEditValue*)pw->SearchControl(EVENT_INTERFACE_PARTI);
-   if ( pv != 0 )
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_PARTI);
+   if ( ps != 0 )
    {
-       value = pv->RetValue();
+       value = ps->RetVisibleValue();
        m_engine->SetParticuleDensity(value);
    }
 
-   pv = (CEditValue*)pw->SearchControl(EVENT_INTERFACE_CLIP);
-   if ( pv != 0 )
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_WHEEL);
+   if ( ps != 0 )
+   {
+       value = ps->RetVisibleValue();
+       m_engine->SetWheelTraceQuantity(value);
+   }
+
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_CLIP);
+   if ( ps != 0 )
    {
-       value = pv->RetValue();
+       value = ps->RetVisibleValue();
        m_engine->SetClippingDistance(value);
    }
 
-   pv = (CEditValue*)pw->SearchControl(EVENT_INTERFACE_DETAIL);
-   if ( pv != 0 )
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_DETAIL);
+   if ( ps != 0 )
    {
-       value = pv->RetValue();
+       value = ps->RetVisibleValue();
        m_engine->SetObjectDetail(value);
    }
 
-   pv = (CEditValue*)pw->SearchControl(EVENT_INTERFACE_GADGET);
-   if ( pv != 0 )
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_GADGET);
+   if ( ps != 0 )
    {
-       value = pv->RetValue();
+       value = ps->RetVisibleValue();
        m_engine->SetGadgetQuantity(value);
    }
 
-   pv = (CEditValue*)pw->SearchControl(EVENT_INTERFACE_TEXTURE);
-   if ( pv != 0 )
+   ps = (CSlider*)pw->SearchControl(EVENT_INTERFACE_TEXTURE);
+   if ( ps != 0 )
    {
-       value = pv->RetValue();
+       value = ps->RetVisibleValue();
        m_engine->SetTextureQuality((int)value);
    }
 
@@ -5514,6 +5833,7 @@ void CMainDialog::SetupMemorize()
    SetProfileString("Directory", "public",   m_publicDir);
    SetProfileString("Directory", "user",     m_userDir);
    SetProfileString("Directory", "files",    m_filesDir);
+   SetProfileString("Directory", "duel",     m_duelDir);
 
    iValue = m_engine->RetTotoMode();
    SetProfileInt("Setup", "TotoMode", iValue);
@@ -5530,9 +5850,6 @@ void CMainDialog::SetupMemorize()
    iValue = m_engine->RetNiceMouse();
    SetProfileInt("Setup", "NiceMouse", iValue);
 
-   iValue = m_bSoluce4;
-   SetProfileInt("Setup", "Soluce4", iValue);
-
    iValue = m_bMovies;
    SetProfileInt("Setup", "Movies", iValue);
 
@@ -5542,15 +5859,18 @@ void CMainDialog::SetupMemorize()
    iValue = m_bHimselfDamage;
    SetProfileInt("Setup", "HimselfDamage", iValue);
 
-   iValue = m_bCameraScroll;
-   SetProfileInt("Setup", "CameraScroll", iValue);
-
-   iValue = m_bCameraInvertX;
-   SetProfileInt("Setup", "CameraInvertX", iValue);
+   iValue = m_defCamera;
+   SetProfileInt("Setup", "DefaultCamera", iValue);
 
    iValue = m_bEffect;
    SetProfileInt("Setup", "InterfaceEffect", iValue);
 
+   iValue = m_bFlash;
+   SetProfileInt("Setup", "ScreenFlash", iValue);
+
+   iValue = m_bMotorBlast;
+   SetProfileInt("Setup", "MotorBlast", iValue);
+
    iValue = m_engine->RetShadow();
    SetProfileInt("Setup", "GroundShadow", iValue);
 
@@ -5575,12 +5895,24 @@ void CMainDialog::SetupMemorize()
    iValue = m_engine->RetLightMode();
    SetProfileInt("Setup", "LightMode", iValue);
 
+   iValue = m_engine->RetSuperDetail();
+   SetProfileInt("Setup", "SuperDetail", iValue);
+
+   fValue = m_engine->RetForce();
+   SetProfileFloat("Setup", "JoystickForce", fValue);
+
+   iValue = m_engine->RetFFB();
+   SetProfileInt("Setup", "JoystickFFB", iValue);
+
    iValue = m_engine->RetJoystick();
    SetProfileInt("Setup", "UseJoystick", iValue);
 
    fValue = m_engine->RetParticuleDensity();
    SetProfileFloat("Setup", "ParticuleDensity", fValue);
 
+   fValue = m_engine->RetWheelTraceQuantity();
+   SetProfileFloat("Setup", "WheelTraceQuantity", fValue);
+
    fValue = m_engine->RetClippingDistance();
    SetProfileFloat("Setup", "ClippingDistance", fValue);
 
@@ -5602,6 +5934,9 @@ void CMainDialog::SetupMemorize()
    iValue = m_sound->RetSound3D();
    SetProfileInt("Setup", "Sound3D", iValue);
 
+   iValue = m_sound->RetComments();
+   SetProfileInt("Setup", "SoundComments", iValue);
+
    iValue = m_engine->RetEditIndentMode();
    SetProfileInt("Setup", "EditIndentMode", iValue);
 
@@ -5622,17 +5957,6 @@ void CMainDialog::SetupMemorize()
    }
    SetProfileString("Setup", "KeyMap", key);
 
-#if _NET
-   if ( m_accessEnable )
-   {
-       iValue = m_accessMission;
-       SetProfileInt("Setup", "AccessMission", iValue);
-
-       iValue = m_accessUser;
-       SetProfileInt("Setup", "AccessUser", iValue);
-   }
-#endif
-
    iValue = m_bDeleteGamer;
    SetProfileInt("Setup", "DeleteGamer", iValue);
 
@@ -5673,6 +5997,11 @@ void CMainDialog::SetupRecall()
        strcpy(m_filesDir, key);
    }
 
+   if ( GetProfileString("Directory", "duel", key, _MAX_FNAME) )
+   {
+       strcpy(m_duelDir, key);
+   }
+
 
    if ( GetProfileInt("Setup", "TotoMode", iValue) )
    {
@@ -5699,11 +6028,6 @@ void CMainDialog::SetupRecall()
        m_engine->SetNiceMouse(iValue);
    }
 
-   if ( GetProfileInt("Setup", "Soluce4", iValue) )
-   {
-       m_bSoluce4 = iValue;
-   }
-
    if ( GetProfileInt("Setup", "Movies", iValue) )
    {
        m_bMovies = iValue;
@@ -5719,27 +6043,26 @@ void CMainDialog::SetupRecall()
        m_bHimselfDamage = iValue;
    }
 
-   if ( GetProfileInt("Setup", "CameraScroll", iValue) )
+   if ( GetProfileInt("Setup", "DefaultCamera", iValue) )
    {
-       m_bCameraScroll = iValue;
-       m_camera->SetCameraScroll(m_bCameraScroll);
+       m_defCamera = (CameraType)iValue;
    }
 
-   if ( GetProfileInt("Setup", "CameraInvertX", iValue) )
+   if ( GetProfileInt("Setup", "InterfaceEffect", iValue) )
    {
-       m_bCameraInvertX = iValue;
-       m_camera->SetCameraInvertX(m_bCameraInvertX);
+       m_bEffect = iValue;
+       m_camera->SetEffect(m_bEffect);
    }
 
-   if ( GetProfileInt("Setup", "CameraInvertY", iValue) )
+   if ( GetProfileInt("Setup", "ScreenFlash", iValue) )
    {
-       m_bCameraInvertY = iValue;
-       m_camera->SetCameraInvertY(m_bCameraInvertY);
+       m_bFlash = iValue;
+       m_camera->SetFlash(m_bFlash);
    }
 
-   if ( GetProfileInt("Setup", "InterfaceEffect", iValue) )
+   if ( GetProfileInt("Setup", "MotorBlast", iValue) )
    {
-       m_bEffect = iValue;
+       m_bMotorBlast = iValue;
    }
 
    if ( GetProfileInt("Setup", "GroundShadow", iValue) )
@@ -5783,6 +6106,19 @@ void CMainDialog::SetupRecall()
        m_engine->SetLightMode(iValue);
    }
 
+   if ( GetProfileInt("Setup", "SuperDetail", iValue) )
+   {
+       m_engine->SetSuperDetail(iValue);
+   }
+
+   if ( GetProfileFloat("Setup", "JoystickForce", fValue) )
+   {
+       m_engine->SetForce(fValue);
+   }
+   if ( GetProfileInt("Setup", "JoystickFFB", iValue) )
+   {
+       m_engine->SetFFB(iValue);
+   }
    if ( GetProfileInt("Setup", "UseJoystick", iValue) )
    {
        m_engine->SetJoystick(iValue);
@@ -5793,6 +6129,11 @@ void CMainDialog::SetupRecall()
        m_engine->SetParticuleDensity(fValue);
    }
 
+   if ( GetProfileFloat("Setup", "WheelTraceQuantity", fValue) )
+   {
+       m_engine->SetWheelTraceQuantity(fValue);
+   }
+
    if ( GetProfileFloat("Setup", "ClippingDistance", fValue) )
    {
        m_engine->SetClippingDistance(fValue);
@@ -5823,6 +6164,11 @@ void CMainDialog::SetupRecall()
        m_sound->SetMidiVolume(iValue);
    }
 
+   if ( GetProfileInt("Setup", "SoundComments", iValue) )
+   {
+       m_sound->SetComments(iValue);
+   }
+
    if ( GetProfileInt("Setup", "EditIndentMode", iValue) )
    {
        m_engine->SetEditIndentMode(iValue);
@@ -5850,21 +6196,6 @@ void CMainDialog::SetupRecall()
        }
    }
 
-#if _NET
-   if ( m_accessEnable )
-   {
-       if ( GetProfileInt("Setup", "AccessMission", iValue) )
-       {
-           m_accessMission = iValue;
-       }
-
-       if ( GetProfileInt("Setup", "AccessUser", iValue) )
-       {
-           m_accessUser = iValue;
-       }
-   }
-#endif
-
    if ( GetProfileInt("Setup", "DeleteGamer", iValue) )
    {
        m_bDeleteGamer = iValue;
@@ -5893,9 +6224,14 @@ void CMainDialog::ChangeSetupQuality(int quality)
 
    if ( quality <  0 )  value = 0.0f;
    if ( quality == 0 )  value = 1.0f;
-   if ( quality >  0 )  value = 2.0f;
+   if ( quality >  0 )  value = 1.0f;
    m_engine->SetParticuleDensity(value);
 
+   if ( quality <  0 )  value = 0.0f;
+   if ( quality == 0 )  value = 1.0f;
+   if ( quality >  0 )  value = 1.0f;
+   m_engine->SetWheelTraceQuantity(value);
+
    if ( quality <  0 )  value = 0.5f;
    if ( quality == 0 )  value = 1.0f;
    if ( quality >  0 )  value = 2.0f;
@@ -5916,6 +6252,8 @@ void CMainDialog::ChangeSetupQuality(int quality)
    if ( quality >  0 )  iValue = 2;
    m_engine->SetTextureQuality(iValue);
 
+   m_engine->SetSuperDetail(FALSE);
+
    m_engine->FirstExecuteAdapt(FALSE);
 }
 
@@ -5924,84 +6262,26 @@ void CMainDialog::ChangeSetupQuality(int quality)
 
 static int key_table[KEY_TOTAL] =
 {
-#if _SCHOOL & _TEEN
-   KEYRANK_LEFT,
-   KEYRANK_RIGHT,
-   KEYRANK_UP,
-   KEYRANK_DOWN,
-   KEYRANK_CAMERA,
-   KEYRANK_NEAR,
-   KEYRANK_AWAY,
-   KEYRANK_HELP,
-   KEYRANK_PROG,
-   KEYRANK_SPEED10,
-   KEYRANK_SPEED15,
-   KEYRANK_SPEED20,
-   KEYRANK_QUIT,
-#else
    KEYRANK_LEFT,
    KEYRANK_RIGHT,
    KEYRANK_UP,
    KEYRANK_DOWN,
-   KEYRANK_GUP,
-   KEYRANK_GDOWN,
-   KEYRANK_ACTION,
+   KEYRANK_BRAKE,
+   KEYRANK_HORN,
    KEYRANK_CAMERA,
-   KEYRANK_VISIT,
-   KEYRANK_NEXT,
-   KEYRANK_HUMAN,
-   KEYRANK_DESEL,
-   KEYRANK_NEAR,
-   KEYRANK_AWAY,
    KEYRANK_HELP,
-   KEYRANK_PROG,
-   KEYRANK_CBOT,
-   KEYRANK_SPEED10,
-   KEYRANK_SPEED15,
-   KEYRANK_SPEED20,
-   KEYRANK_QUIT,
-#endif
 };
 
 static EventMsg key_event[KEY_TOTAL] =
 {
-#if _SCHOOL & _TEEN
-   EVENT_INTERFACE_KLEFT,
-   EVENT_INTERFACE_KRIGHT,
-   EVENT_INTERFACE_KUP,
-   EVENT_INTERFACE_KDOWN,
-   EVENT_INTERFACE_KCAMERA,
-   EVENT_INTERFACE_KNEAR,
-   EVENT_INTERFACE_KAWAY,
-   EVENT_INTERFACE_KHELP,
-   EVENT_INTERFACE_KPROG,
-   EVENT_INTERFACE_KSPEED10,
-   EVENT_INTERFACE_KSPEED15,
-   EVENT_INTERFACE_KSPEED20,
-   EVENT_INTERFACE_KQUIT,
-#else
    EVENT_INTERFACE_KLEFT,
    EVENT_INTERFACE_KRIGHT,
    EVENT_INTERFACE_KUP,
    EVENT_INTERFACE_KDOWN,
-   EVENT_INTERFACE_KGUP,
-   EVENT_INTERFACE_KGDOWN,
-   EVENT_INTERFACE_KACTION,
+   EVENT_INTERFACE_KBRAKE,
+   EVENT_INTERFACE_KHORN,
    EVENT_INTERFACE_KCAMERA,
-   EVENT_INTERFACE_KVISIT,
-   EVENT_INTERFACE_KNEXT,
-   EVENT_INTERFACE_KHUMAN,
-   EVENT_INTERFACE_KDESEL,
-   EVENT_INTERFACE_KNEAR,
-   EVENT_INTERFACE_KAWAY,
    EVENT_INTERFACE_KHELP,
-   EVENT_INTERFACE_KPROG,
-   EVENT_INTERFACE_KCBOT,
-   EVENT_INTERFACE_KSPEED10,
-   EVENT_INTERFACE_KSPEED15,
-   EVENT_INTERFACE_KSPEED20,
-   EVENT_INTERFACE_KQUIT,
-#endif
 };
 
 // Met à jour la liste des touches.
@@ -6014,7 +6294,7 @@ void CMainDialog::UpdateKey()
    FPOINT      pos, dim;
    int         first, i;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw == 0 )  return;
 
    ps = (CScroll*)pw->SearchControl(EVENT_INTERFACE_KSCROLL);
@@ -6030,7 +6310,7 @@ void CMainDialog::UpdateKey()
    dim.x = 400.0f/640.0f;
    dim.y =  20.0f/480.0f;
    pos.x = 110.0f/640.0f;
-   pos.y = 168.0f/480.0f + dim.y*(KEY_VISIBLE-1);
+   pos.y = 178.0f/480.0f + dim.y*(KEY_VISIBLE-1);
    for ( i=0 ; i<KEY_VISIBLE ; i++ )
    {
        pw->CreateKey(pos, dim, -1, key_event[first+i]);
@@ -6051,7 +6331,7 @@ void CMainDialog::ChangeKey(EventMsg event)
    CKey*       pk;
    int         i;
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW5);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw == 0 )  return;
 
    ps = (CScroll*)pw->SearchControl(EVENT_INTERFACE_KSCROLL);
@@ -6081,7 +6361,10 @@ void CMainDialog::StartAbort()
    char        name[100];
 
    StartDialog(FPOINT(0.3f, 0.8f), TRUE, FALSE, FALSE);
+   m_bDialogCreate = FALSE;
    m_bDialogDelete = FALSE;
+   m_bDialogFile   = FALSE;
+   m_bDialogKid    = FALSE;
 
    pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW9);
    if ( pw == 0 )  return;
@@ -6099,91 +6382,84 @@ void CMainDialog::StartAbort()
 
    pos.x = 0.40f;
    dim.x = 0.20f;
-#if _POLISH
-   pos.x -=  7.0f/640.0f;
-   dim.x += 14.0f/640.0f;
-#endif
    dim.y = 32.0f/480.0f;
 
-   pos.y = 0.74f;
+   pos.y = 0.66f;
    pb = pw->CreateButton(pos, dim, -1, EVENT_DIALOG_CANCEL);
+   pb->SetFontType(FONT_HILITE);
    pb->SetState(STATE_SHADOW);
+   pb->SetTabOrder(0);
+   pb->SetFocus(TRUE);
    GetResource(RES_TEXT, RT_DIALOG_NO, name);
    pb->SetName(name);
 
-   if ( m_index == 2 ||  // missions ?
-        m_index == 3 ||  // jeux libres ?
-        m_index == 4 )   // user ?
-   {
-       pos.y = 0.62f;
-       pb = pw->CreateButton(pos, dim, -1, EVENT_INTERFACE_WRITE);
-       pb->SetState(STATE_SHADOW);
-       if ( m_main->IsBusy() )  // tâche en cours ?
-       {
-           pb->ClearState(STATE_ENABLE);
-       }
-
-       pos.y = 0.53f;
-       pb = pw->CreateButton(pos, dim, -1, EVENT_INTERFACE_READ);
-       pb->SetState(STATE_SHADOW);
-       if ( !IsIOReadScene() )  // aucun fichier à lire ?
-       {
-           pb->ClearState(STATE_ENABLE);
-       }
-       pb->SetState(STATE_WARNING);
-   }
-
-   if ( m_engine->RetSetupMode() )
-   {
-       pos.y = 0.39f;
-       pb = pw->CreateButton(pos, dim, -1, EVENT_INTERFACE_SETUP);
-       pb->SetState(STATE_SHADOW);
-   }
+   pos.y = 0.55f;
+   pb = pw->CreateButton(pos, dim, -1, EVENT_INTERFACE_SETUP);
+   pb->SetFontType(FONT_HILITE);
+   pb->SetState(STATE_SHADOW);
+   pb->SetTabOrder(1);
 
-   pos.y = 0.25f;
+   pos.y = 0.35f;
    pb = pw->CreateButton(pos, dim, -1, EVENT_INTERFACE_AGAIN);
+   pb->SetFontType(FONT_HILITE);
    pb->SetState(STATE_SHADOW);
    pb->SetState(STATE_WARNING);
+   pb->SetTabOrder(2);
 
-   pos.y = 0.16f;
+   pos.y = 0.24f;
    pb = pw->CreateButton(pos, dim, -1, EVENT_DIALOG_OK);
+   pb->SetFontType(FONT_HILITE);
    pb->SetState(STATE_SHADOW);
    pb->SetState(STATE_WARNING);
+   pb->SetTabOrder(3);
    GetResource(RES_TEXT, RT_DIALOG_YES, name);
    pb->SetName(name);
 }
 
-// Voulez-vous détruire le bâtiment ?
+// Création d'un nouveau joueur.
 
-void CMainDialog::StartDeleteObject()
+void CMainDialog::StartCreateGame()
 {
    CWindow*    pw;
    CButton*    pb;
+   CEdit*      pe;
    FPOINT      pos, dim;
    char        name[100];
 
-   StartDialog(FPOINT(0.7f, 0.3f), FALSE, TRUE, TRUE);
-   m_bDialogDelete = TRUE;
+   StartDialog(FPOINT(0.7f, 0.6f), FALSE, TRUE, TRUE);
+   m_bDialogCreate = TRUE;
+   m_bDialogDelete = FALSE;
+   m_bDialogFile   = FALSE;
+   m_bDialogKid    = FALSE;
 
    pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW9);
    if ( pw == 0 )  return;
 
    pos.x = 0.00f;
-   pos.y = 0.50f;
+   pos.y = 0.52f;
    dim.x = 1.00f;
    dim.y = 0.05f;
-   GetResource(RES_TEXT, RT_DIALOG_DELOBJ, name);
+   GetResource(RES_TEXT, RT_DIALOG_NEWGAME, name);
    pw->CreateLabel(pos, dim, -1, EVENT_DIALOG_LABEL, name);
 
-   pb = (CButton*)pw->SearchControl(EVENT_DIALOG_OK);
-   if ( pb == 0 )  return;
-   GetResource(RES_TEXT, RT_DIALOG_YESDEL, name);
-   pb->SetName(name);
+   pos.x = 0.35f;
+   pos.y = 0.46f;
+   dim.x = 0.30f;
+   dim.y = 0.05f;
+   pe = pw->CreateEdit(pos, dim, 0, EVENT_INTERFACE_NEDIT);
+   if ( pe == 0 )  return;
+   pe->SetMaxChar(15);
+   pe->SetFocus(TRUE);
+
+   pb = (CButton*)pw->SearchControl(EVENT_DIALOG_OK);
+   if ( pb == 0 )  return;
+   GetResource(RES_TEXT, RT_DIALOG_YESNEW, name);
+   pb->SetName(name);
    pb->SetState(STATE_WARNING);
 
    pb = (CButton*)pw->SearchControl(EVENT_DIALOG_CANCEL);
    if ( pb == 0 )  return;
-   GetResource(RES_TEXT, RT_DIALOG_NODEL, name);
+   GetResource(RES_TEXT, RT_DIALOG_NONEW, name);
    pb->SetName(name);
 }
 
@@ -6198,7 +6474,10 @@ void CMainDialog::StartDeleteGame(char *gamer)
    char        text[100];
 
    StartDialog(FPOINT(0.7f, 0.3f), FALSE, TRUE, TRUE);
+   m_bDialogCreate = FALSE;
    m_bDialogDelete = TRUE;
+   m_bDialogFile   = FALSE;
+   m_bDialogKid    = FALSE;
 
    pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW9);
    if ( pw == 0 )  return;
@@ -6223,6 +6502,99 @@ void CMainDialog::StartDeleteGame(char *gamer)
    pb->SetName(name);
 }
 
+// Voulez-vous détruire le fichier ?
+
+void CMainDialog::StartDeleteFile(char *filename)
+{
+   CWindow*    pw;
+   CButton*    pb;
+   FPOINT      pos, dim;
+   char        name[100];
+   char        text[100];
+   char*       p;
+
+   StartDialog(FPOINT(0.7f, 0.4f), FALSE, TRUE, TRUE);
+   m_bDialogCreate = FALSE;
+   m_bDialogDelete = FALSE;
+   m_bDialogFile   = TRUE;
+   m_bDialogKid    = FALSE;
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW9);
+   if ( pw == 0 )  return;
+
+   p = strchr(filename, '\\');
+   if ( p == 0 )
+   {
+       p = filename;
+   }
+   else
+   {
+       p ++;  // saute "duel\"
+   }
+
+   pos.x = 0.00f;
+   pos.y = 0.50f;
+   dim.x = 1.00f;
+   dim.y = 0.05f;
+   GetResource(RES_TEXT, RT_DIALOG_DELFILE, name);
+   sprintf(text, name, p);
+   pw->CreateLabel(pos, dim, -1, EVENT_DIALOG_LABEL, text);
+
+   pb = (CButton*)pw->SearchControl(EVENT_DIALOG_OK);
+   if ( pb == 0 )  return;
+   GetResource(RES_TEXT, RT_DIALOG_YESDEL, name);
+   pb->SetName(name);
+   pb->SetState(STATE_WARNING);
+
+   pb = (CButton*)pw->SearchControl(EVENT_DIALOG_CANCEL);
+   if ( pb == 0 )  return;
+   GetResource(RES_TEXT, RT_DIALOG_NODEL, name);
+   pb->SetName(name);
+}
+
+// Voulez-vous vraiment jouer en mode CN ?
+
+void CMainDialog::StartKidLevel()
+{
+   CWindow*    pw;
+   CButton*    pb;
+   CEdit*      pe;
+   FPOINT      pos, dim;
+   char        name[100];
+
+   StartDialog(FPOINT(0.7f, 0.6f), FALSE, TRUE, TRUE);
+   m_bDialogCreate = FALSE;
+   m_bDialogDelete = FALSE;
+   m_bDialogFile   = FALSE;
+   m_bDialogKid    = TRUE;
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW9);
+   if ( pw == 0 )  return;
+
+   pos.x = 0.20f;
+   pos.y = 0.35f;
+   dim.x = 0.60f;
+   dim.y = 0.35f;
+   pe = pw->CreateEdit(pos, dim, 0, EVENT_EDIT1);
+   if ( pe == 0 )  return;
+   sprintf(name, "script\\kid-%c.txt", RetLanguageLetter());
+   pe->ReadText(name);
+   pe->SetEditCap(FALSE);  // juste pour voir
+   pe->SetHiliteCap(FALSE);
+   pe->SetState(STATE_SHADOW);
+
+   pb = (CButton*)pw->SearchControl(EVENT_DIALOG_OK);
+   if ( pb == 0 )  return;
+   GetResource(RES_TEXT, RT_DIALOG_YESKID, name);
+   pb->SetName(name);
+   pb->SetState(STATE_WARNING);
+
+   pb = (CButton*)pw->SearchControl(EVENT_DIALOG_CANCEL);
+   if ( pb == 0 )  return;
+   GetResource(RES_TEXT, RT_DIALOG_NOKID, name);
+   pb->SetName(name);
+}
+
 // Voulez-vous quitter le jeu ?
 
 void CMainDialog::StartQuit()
@@ -6304,7 +6676,7 @@ void CMainDialog::StartDialog(FPOINT dim, BOOL bFire, BOOL bOK, BOOL bCancel)
 
    pos.x = (1.0f-dim.x)/2.0f;
    pos.y = (1.0f-dim.y)/2.0f;
-   pw = m_interface->CreateWindows(pos, dim, bFire?12:8, EVENT_WINDOW9);
+   pw = m_interface->CreateWindows(pos, dim, bFire?16:8, EVENT_WINDOW9);
    pw->SetState(STATE_SHADOW);
    GetResource(RES_TEXT, RT_TITLE_BASE, name);
    pw->SetName(name);
@@ -6321,6 +6693,7 @@ void CMainDialog::StartDialog(FPOINT dim, BOOL bFire, BOOL bOK, BOOL bCancel)
        ddim.x = 0.15f;
        ddim.y = 0.06f;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_DIALOG_OK);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
        GetResource(RES_EVENT, EVENT_DIALOG_OK, name);
        pb->SetName(name);
@@ -6333,6 +6706,7 @@ void CMainDialog::StartDialog(FPOINT dim, BOOL bFire, BOOL bOK, BOOL bCancel)
        ddim.x = 0.15f;
        ddim.y = 0.06f;
        pb = pw->CreateButton(pos, ddim, -1, EVENT_DIALOG_CANCEL);
+       pb->SetFontType(FONT_HILITE);
        pb->SetState(STATE_SHADOW);
        GetResource(RES_EVENT, EVENT_DIALOG_CANCEL, name);
        pb->SetName(name);
@@ -6409,7 +6783,7 @@ void CMainDialog::FrameDialog(float rTime)
        dim.y = dim.x/0.75f;
        m_particule->CreateParticule(pos, speed, dim,
                                     (ParticuleType)(PARTILENS1+rand()%3),
-                                    1.0f, 0.0f, 0.0f, SH_INTERFACE);
+                                    1.0f, 0.0f, SH_INTERFACE);
 
        // En haut.
        pos.x = dpos.x + ddim.x*Rand();
@@ -6420,7 +6794,7 @@ void CMainDialog::FrameDialog(float rTime)
        dim.y = dim.x/0.75f;
        m_particule->CreateParticule(pos, speed, dim,
                                     (ParticuleType)(PARTILENS1+rand()%3),
-                                    1.0f, 0.0f, 0.0f, SH_INTERFACE);
+                                    1.0f, 0.0f, SH_INTERFACE);
 
        // A gauche.
        pos.y = dpos.y + ddim.y*Rand();
@@ -6431,7 +6805,7 @@ void CMainDialog::FrameDialog(float rTime)
        dim.y = dim.x/0.75f;
        m_particule->CreateParticule(pos, speed, dim,
                                     (ParticuleType)(PARTILENS1+rand()%3),
-                                    1.0f, 0.0f, 0.0f, SH_INTERFACE);
+                                    1.0f, 0.0f, SH_INTERFACE);
 
        // A droite.
        pos.y = dpos.y + ddim.y*Rand();
@@ -6442,7 +6816,7 @@ void CMainDialog::FrameDialog(float rTime)
        dim.y = dim.x/0.75f;
        m_particule->CreateParticule(pos, speed, dim,
                                     (ParticuleType)(PARTILENS1+rand()%3),
-                                    1.0f, 0.0f, 0.0f, SH_INTERFACE);
+                                    1.0f, 0.0f, SH_INTERFACE);
    }
 }
 
@@ -6452,6 +6826,18 @@ void CMainDialog::StopDialog()
 {
    CWindow*    pw;
    CButton*    pb;
+   CEdit*      pe;
+
+   m_dialogName[0] = 0;
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW9);
+   if ( pw != 0 )
+   {
+       pe = (CEdit*)pw->SearchControl(EVENT_INTERFACE_NEDIT);
+       if ( pe != 0 )
+       {
+           pe->GetText(m_dialogName, 100);
+       }
+   }
 
    pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW0);
    if ( pw != 0 )  pw->SetState(STATE_ENABLE);
@@ -6462,7 +6848,7 @@ void CMainDialog::StopDialog()
    pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW2);
    if ( pw != 0 )  pw->SetState(STATE_ENABLE);
 
-   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW3);
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
    if ( pw != 0 )  pw->SetState(STATE_ENABLE);
 
    pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
@@ -6500,7 +6886,6 @@ void CMainDialog::StartSuspend()
    m_bInitPause = m_engine->RetPause();
    m_engine->SetPause(TRUE);
    m_engine->SetOverFront(FALSE);  // over plane derrière
-   m_main->CreateShortcuts();
    m_main->StartSuspend();
    m_initCamera = m_camera->RetType();
    m_camera->SetType(CAMERA_DIALOG);
@@ -6514,7 +6899,6 @@ void CMainDialog::StopSuspend()
    m_main->ClearInterface();
    if ( !m_bInitPause )  m_engine->SetPause(FALSE);
    m_engine->SetOverFront(TRUE);  // over plane devant
-   m_main->CreateShortcuts();
    m_main->StopSuspend();
    m_camera->SetType(m_initCamera);
 }
@@ -6535,36 +6919,6 @@ BOOL CMainDialog::IsDialog()
 }
 
 
-
-
-// Spécifie le nom de la scène à lire.
-
-void CMainDialog::SetSceneRead(char* name)
-{
-   strcpy(m_sceneRead, name);
-}
-
-// Retourne le nom de la scène à lire.
-
-char* CMainDialog::RetSceneRead()
-{
-   return m_sceneRead;
-}
-
-// Spécifie le nom de la scène à lire.
-
-void CMainDialog::SetStackRead(char* name)
-{
-   strcpy(m_stackRead, name);
-}
-
-// Retourne le nom de la scène à lire.
-
-char* CMainDialog::RetStackRead()
-{
-   return m_stackRead;
-}
-
 // Spécifie le nom de la scène choisie pour jouer.
 
 void CMainDialog::SetSceneName(char* name)
@@ -6579,6 +6933,11 @@ char* CMainDialog::RetSceneName()
    return m_sceneName;
 }
 
+char* CMainDialog::RetSceneBase()
+{
+   return m_sceneBase;
+}
+
 // Spécifie le rang de la scène choisie pour jouer.
 
 void CMainDialog::SetSceneRank(int rank)
@@ -6599,19 +6958,12 @@ char* CMainDialog::RetSceneDir()
 {
    int     i;
 
-   i = (m_sceneRank/100)-1;
+   i = (m_sceneRank/10)-1;
 
    if ( i < 0 || i >= m_userTotal )  return 0;
    return m_userList[i];
 }
 
-// Indique s'il faut montrer la solution.
-
-BOOL CMainDialog::RetSceneSoluce()
-{
-   return m_bSceneSoluce;
-}
-
 // Retourne le nom du dossier pour sauvegarder.
 
 char* CMainDialog::RetSavegameDir()
@@ -6626,19 +6978,19 @@ char* CMainDialog::RetPublicDir()
    return m_publicDir;
 }
 
+// Indique s'il on est en train de jouer un duel.
 
-// Indique s'il y a des reflets sur les boutons.
-
-BOOL CMainDialog::RetGlint()
+BOOL CMainDialog::RetDuel()
 {
-   return m_bGlint;
+   return m_bDuel;
 }
 
-// Indique s'il faut montrer les 4:solutions.
 
-BOOL CMainDialog::RetSoluce4()
+// Indique s'il y a des reflets sur les boutons.
+
+BOOL CMainDialog::RetGlint()
 {
-   return m_bSoluce4;
+   return m_bGlint;
 }
 
 // Indique s'il faut montrer les cinématiques.
@@ -6662,171 +7014,195 @@ BOOL CMainDialog::RetHimselfDamage()
    return m_bHimselfDamage;
 }
 
+// Indique si le moteur peut exploser au démarrage.
 
-
-// Enregistre la représentation personnalisée du joueur.
-
-void CMainDialog::WriteGamerPerso(char *gamer)
+BOOL CMainDialog::RetMotorBlast()
 {
-   FILE*   file;
-   char    filename[100];
-   char    line[100];
+   return m_bMotorBlast;
+}
 
-   sprintf(filename, "%s\\%s\\face.gam", m_savegameDir, gamer);
-   file = fopen(filename, "w");
-   if ( file == NULL )  return;
+// Gestion de la caméra par défaut.
 
-   sprintf(line, "Head face=%d glasses=%d hair=%.2f;%.2f;%.2f;%.2f\n",
-               m_perso.face, m_perso.glasses,
-               m_perso.colorHair.r, m_perso.colorHair.g, m_perso.colorHair.b, m_perso.colorHair.a);
-   fputs(line, file);
-
-   sprintf(line, "Body combi=%.2f;%.2f;%.2f;%.2f band=%.2f;%.2f;%.2f;%.2f\n",
-               m_perso.colorCombi.r, m_perso.colorCombi.g, m_perso.colorCombi.b, m_perso.colorCombi.a,
-               m_perso.colorBand.r, m_perso.colorBand.g, m_perso.colorBand.b, m_perso.colorBand.a);
-   fputs(line, file);
+CameraType CMainDialog::RetDefCamera()
+{
+   return m_defCamera;
+}
 
-   fclose(file);
+void CMainDialog::SetDefCamera(CameraType type)
+{
+   m_defCamera = type;
 }
 
-// Lit la représentation personnalisée du joueur.
 
-void CMainDialog::ReadGamerPerso(char *gamer)
+// Lit le fichier du joueur.
+
+BOOL CMainDialog::ReadGamerInfo()
 {
    FILE*           file;
-   char            filename[100];
-   char            line[100];
    D3DCOLORVALUE   color;
+   char            line[100];
+   int             index;
 
-   m_perso.face = 0;
-   DefPerso();
+   FlushPerso();
 
-   sprintf(filename, "%s\\%s\\face.gam", m_savegameDir, gamer);
-   file = fopen(filename, "r");
-   if ( file == NULL )  return;
+   sprintf(line, "%s\\%s\\data.gam", m_savegameDir, m_main->RetGamerName());
+   file = fopen(line, "r");
+   if ( file == NULL )
+   {
+#if _DEMO
+       BuyAllPerso();  // toutes les voitures
+       m_perso.selectCar = 2;  // tijuana taxi
+#endif
+       return FALSE;
+   }
+
+#if _SE
+   BuyAllPerso();  // toutes les voitures
+#endif
 
+   index = 0;
    while ( fgets(line, 100, file) != NULL )
    {
-       if ( Cmd(line, "Head") )
+       if ( Cmd(line, "CarUsed") )
        {
-           m_perso.face = OpInt(line, "face", 0);
-           m_perso.glasses = OpInt(line, "glasses", 0);
+#if _SE
+           index = IndexPerso(OpInt(line, "model", 1));
+           m_perso.subModel[index] = OpInt(line, "subModel", 0);
 
            color.r = 0.0f;
            color.g = 0.0f;
            color.b = 0.0f;
            color.a = 0.0f;
-           m_perso.colorHair = OpColorValue(line, "hair", color);
+           m_perso.colorBody[index] = OpColorValue(line, "colorBody", color);
+
+           m_perso.stateCars[index] = SC_OWNER;
+#else
+           if ( index < 49 )
+           {
+               m_perso.usedCars[index] = OpInt(line, "model", 1);
+               m_perso.subModel[index] = OpInt(line, "subModel", 0);
+
+               color.r = 0.0f;
+               color.g = 0.0f;
+               color.b = 0.0f;
+               color.a = 0.0f;
+               m_perso.colorBody[index] = OpColorValue(line, "colorBody", color);
+
+               index ++;
+           }
+#endif
        }
 
-       if ( Cmd(line, "Body") )
+       if ( Cmd(line, "CarSelect") )
        {
-           color.r = 0.0f;
-           color.g = 0.0f;
-           color.b = 0.0f;
-           color.a = 0.0f;
-           m_perso.colorCombi = OpColorValue(line, "combi", color);
+           m_perso.selectCar = OpInt(line, "model", 1);
+       }
 
-           color.r = 0.0f;
-           color.g = 0.0f;
-           color.b = 0.0f;
-           color.a = 0.0f;
-           m_perso.colorBand = OpColorValue(line, "band", color);
+       if ( Cmd(line, "Pesetas") )
+       {
+           m_perso.pesetas = OpInt(line, "total", 0);
+       }
+
+       if ( Cmd(line, "GameMode") )
+       {
+           m_perso.level = OpInt(line, "level", 2);
        }
    }
+#if !_SE
+   if ( index > 0 )
+   {
+       m_perso.total = index;
+       m_perso.bonus = index;
+   }
+#endif
 
    fclose(file);
-}
-
-// Spécifie la représentation du joueur.
-
-void CMainDialog::SetGamerFace(char *gamer, int face)
-{
-   m_perso.face = face;
-   WriteGamerPerso(gamer);
-}
 
-// Donne la représentation du joueur.
-
-int CMainDialog::RetGamerFace(char *gamer)
-{
-   ReadGamerPerso(gamer);
-   return m_perso.face;
+#if _DEMO
+   BuyAllPerso();  // toutes les voitures
+   m_perso.selectCar = 2;  // tijuana taxi
+#endif
+   return TRUE;
 }
 
-// Donne la représentation du joueur.
+// Ecrit le fichier du joueur.
 
-int CMainDialog::RetGamerFace()
+BOOL CMainDialog::WriteGamerInfo()
 {
-   return m_perso.face;
-}
+   FILE*   file;
+   char    line[100];
+   int     i;
 
-int CMainDialog::RetGamerGlasses()
-{
-   return m_perso.glasses;
-}
+   sprintf(line, "%s\\%s\\data.gam", m_savegameDir, m_main->RetGamerName());
+   file = fopen(line, "w");
+   if ( file == NULL )  return FALSE;
 
-BOOL CMainDialog::RetGamerOnlyHead()
-{
-   return (m_phase == PHASE_PERSO && m_persoTab == 0);
-}
+   for ( i=0 ; i<m_perso.total ; i++ )
+   {
+#if _SE
+       if ( m_perso.stateCars[i] != SC_OWNER )  continue;
+#endif
+       sprintf(line, "CarUsed model=%d subModel=%d colorBody=%.2f;%.2f;%.2f;%.2f\n",
+                   m_perso.usedCars[i],
+                   m_perso.subModel[i],
+                   m_perso.colorBody[i].r, m_perso.colorBody[i].g, m_perso.colorBody[i].b, m_perso.colorBody[i].a);
+       fputs(line, file);
+   }
 
-float CMainDialog::RetPersoAngle()
-{
-   return m_persoAngle;
-}
+   sprintf(line, "CarSelect model=%d\n", m_perso.selectCar);
+   fputs(line, file);
 
-D3DCOLORVALUE CMainDialog::RetGamerColorHair()
-{
-   return m_perso.colorHair;
-}
+   sprintf(line, "Pesetas total=%d\n", m_perso.pesetas);
+   fputs(line, file);
 
-D3DCOLORVALUE CMainDialog::RetGamerColorCombi()
-{
-   return m_perso.colorCombi;
-}
+   sprintf(line, "GameMode level=%d\n", m_perso.level);
+   fputs(line, file);
 
-D3DCOLORVALUE CMainDialog::RetGamerColorBand()
-{
-   return m_perso.colorBand;
+   fclose(file);
+   return TRUE;
 }
 
 
-// Lit le fichier du joueur.
+// Lit le fichier des missions.
 
-BOOL CMainDialog::ReadGamerInfo()
+BOOL CMainDialog::ReadGamerMission()
 {
    FILE*   file;
    char    line[100];
-   int     chap, i, numTry, passed;
+   int     chap, scene, i;
+
+   if ( m_sceneName[0] == 0 )  return TRUE;
 
    for ( i=0 ; i<MAXSCENE ; i++ )
    {
        m_sceneInfo[i].numTry = 0;
        m_sceneInfo[i].bPassed = FALSE;
    }
+   m_sceneInfo[0].numTry = 1;
+   m_sceneInfo[0].bPassed = TRUE;
+   m_sel[m_index] = 11;
 
    sprintf(line, "%s\\%s\\%s.gam", m_savegameDir, m_main->RetGamerName(), m_sceneName);
    file = fopen(line, "r");
    if ( file == NULL )  return FALSE;
 
-   if ( fgets(line, 100, file) != NULL )
-   {
-       sscanf(line, "CurrentChapter=%d CurrentSel=%d\n", &chap, &i);
-       m_chap[m_index] = chap-1;
-       m_sel[m_index]  = i-1;
-   }
-
    while ( fgets(line, 100, file) != NULL )
    {
-       sscanf(line, "Chapter %d: Scene %d: numTry=%d passed=%d\n",
-               &chap, &i, &numTry, &passed);
+       if ( Cmd(line, "Current") )
+       {
+           m_sel[m_index] = OpInt(line, "sel", 0);
+       }
 
-       i += chap*100;
-       if ( i >= 0 && i < MAXSCENE )
+       if ( Cmd(line, "Mission") )
        {
-           m_sceneInfo[i].numTry  = numTry;
-           m_sceneInfo[i].bPassed = passed;
+           chap = OpInt(line, "chapter", 0);
+           scene = OpInt(line, "scene", 0);
+           i = chap*10+scene;
+           if ( i >= 0 && i < MAXSCENE )
+           {
+               m_sceneInfo[i].numTry  = OpInt(line, "numTry", 0);
+               m_sceneInfo[i].bPassed = OpInt(line, "passed", 0);
+           }
        }
    }
 
@@ -6834,28 +7210,29 @@ BOOL CMainDialog::ReadGamerInfo()
    return TRUE;
 }
 
-// Ecrit le fichier du joueur.
+// Ecrit le fichier des missions.
 
-BOOL CMainDialog::WriteGamerInfo()
+BOOL CMainDialog::WriteGamerMission()
 {
    FILE*   file;
    char    line[100];
    int     i;
 
+   if ( m_sceneName[0] == 0 )  return TRUE;
+
    sprintf(line, "%s\\%s\\%s.gam", m_savegameDir, m_main->RetGamerName(), m_sceneName);
    file = fopen(line, "w");
    if ( file == NULL )  return FALSE;
 
-   sprintf(line, "CurrentChapter=%d CurrentSel=%d\n",
-           m_chap[m_index]+1, m_sel[m_index]+1);
+   sprintf(line, "Current sel=%d\n", m_sel[m_index]);
    fputs(line, file);
 
    for ( i=0 ; i<MAXSCENE ; i++ )
    {
        if ( m_sceneInfo[i].numTry == 0 )  continue;
 
-       sprintf(line, "Chapter %d: Scene %d: numTry=%d passed=%d\n",
-               i/100, i%100, m_sceneInfo[i].numTry, m_sceneInfo[i].bPassed);
+       sprintf(line, "Mission chapter=%d scene=%d numTry=%d passed=%d\n",
+               i/10, i%10, m_sceneInfo[i].numTry, m_sceneInfo[i].bPassed);
        fputs(line, file);
    }
 
@@ -6863,60 +7240,586 @@ BOOL CMainDialog::WriteGamerInfo()
    return TRUE;
 }
 
+
+// Retourne la couleur de carrosserie du véhicule sélectionné.
+
+D3DCOLORVALUE CMainDialog::RetGamerColorCar()
+{
+   if ( m_bDuel )
+   {
+       return m_duelColor;
+   }
+   else
+   {
+       return m_perso.colorBody[m_perso.selectCar];
+   }
+}
+
 void CMainDialog::SetGamerInfoTry(int rank, int numTry)
 {
-   if ( rank < 0 || rank >= MAXSCENE )  return;
    if ( numTry > 100 )  numTry = 100;
    m_sceneInfo[rank].numTry = numTry;
 }
 
 int CMainDialog::RetGamerInfoTry(int rank)
 {
-   if ( rank < 0 || rank >= MAXSCENE )  return 0;
    return m_sceneInfo[rank].numTry;
 }
 
 void CMainDialog::SetGamerInfoPassed(int rank, BOOL bPassed)
 {
-   int     chap, i;
-   BOOL    bAll;
-
-   if ( rank < 0 || rank >= MAXSCENE )  return;
    m_sceneInfo[rank].bPassed = bPassed;
+}
+
+BOOL CMainDialog::RetGamerInfoPassed(int rank)
+{
+   return m_sceneInfo[rank].bPassed;
+}
+
+// Teste si le fichier d'une mission existe.
+
+BOOL CMainDialog::MissionExist(int rank)
+{
+   FILE*       file = NULL;
+   char        filename[_MAX_FNAME];
+
+   BuildSceneName(filename, m_sceneName, rank);
+   file = fopen(filename, "r");
+   if ( file == NULL )  return FALSE;
+   fclose(file);
+   return TRUE;
+}
+
+// Cherche la mission suivante par défaut à effectuer.
 
-   if ( bPassed )
+void CMainDialog::NextMission()
+{
+   int     i, chap, rank;
+
+   if ( !m_bPesetas )  return;  // course libre ?
+
+   // Cherche une mission non passée dans le même chapitre.
+   chap = m_sel[m_index]/10;
+   for ( i=0 ; i<9 ; i++ )
    {
-       bAll = TRUE;
-       chap = rank/100;
-       for ( i=0 ; i<m_maxList ; i++ )
+       rank = chap*10+(i+1);
+       if ( !MissionExist(rank) )  break;
+
+       if ( !m_sceneInfo[rank].bPassed )  // mission à faire ?
        {
-           bAll &= m_sceneInfo[chap*100+i+1].bPassed;
+           m_sel[m_index] = rank;
+           return;
        }
-       m_sceneInfo[chap*100].numTry ++;
-       m_sceneInfo[chap*100].bPassed = bAll;
    }
+
+   if ( !m_sceneInfo[chap*10].bPassed )  // chapitre suivant pas accessible ?
+   {
+       rank = chap*10+1;  // refait 1ère mission du chapitre
+       m_sel[m_index] = rank;
+       return;
+   }
+
+   rank = (chap+1)*10+1;  // 1ère mission du chapitre suivant
+   if ( MissionExist(rank) )
+   {
+       m_sel[m_index] = rank;
+       return;
+   }
+
+   m_sel[m_index] = 11;  // recommence au tout début !
 }
 
-BOOL CMainDialog::RetGamerInfoPassed(int rank)
+// Débloque les niveaux suivants si on a économisé assez de pesetas.
+
+void CMainDialog::PesetasUnlock()
 {
-   if ( rank < 0 || rank >= MAXSCENE )  return FALSE;
-   return m_sceneInfo[rank].bPassed;
+   int     i, limit;
+
+   for ( i=0 ; i<100 ; i++ )
+   {
+       if ( !m_sceneInfo[i*10].bPassed )
+       {
+           limit = ReadPesetasLimit(i*10);
+           if ( limit > m_perso.pesetas )  return;  // pas assez
+
+           m_sceneInfo[i*10].bPassed = TRUE;
+           if ( m_sceneInfo[i*10].numTry < 100 )
+           {
+               m_sceneInfo[i*10].numTry ++;
+           }
+           WriteGamerInfo();
+           return;
+       }
+   }
+}
+
+
+// Lit le fichier des records d'une mission.
+
+BOOL CMainDialog::ReadRecord(int rank, int type)
+{
+   RecordList* record;
+   FILE*       file;
+   char        filename[100];
+
+   if ( type == 0 )  record = &m_recordAll;
+   else              record = &m_recordOne;
+
+   ZeroMemory(record, sizeof(RecordList));
+
+   sprintf(filename, "%s\\%s%.2d%.1d.%s", m_savegameDir, m_sceneName, rank/10, rank%10, (type==0)?"all":"one");
+   file = fopen(filename, "rb");
+   if ( file == NULL )  return FALSE;
+
+   fread(record, sizeof(RecordList), 1, file);
+   fclose(file);
+
+   record->select = -1;
+   return TRUE;
+}
+
+// Ecrit le fichier des records d'une mission.
+
+BOOL CMainDialog::WriteRecord(int rank, int type)
+{
+   RecordList* record;
+   FILE*       file;
+   char        filename[100];
+
+   if ( type == 0 )  record = &m_recordAll;
+   else              record = &m_recordOne;
+
+   sprintf(filename, "%s\\%s%.2d%.1d.%s", m_savegameDir, m_sceneName, rank/10, rank%10, (type==0)?"all":"one");
+   file = fopen(filename, "wb");
+   if ( file == NULL )  return FALSE;
+
+   fwrite(record, sizeof(RecordList), 1, file);
+   fclose(file);
+
+   return TRUE;
+}
+
+// Ajoute un nouveau record.
+// Retourne TRUE s'il s'agit d'un record du monde pour la voiture utilisée !
+
+BOOL CMainDialog::AddRecord(float time, float bonus, float value1, float value2, int points, int type)
+{
+   RecordList* record;
+   int         i, j;
+
+   if ( type == 0 )  record = &m_recordAll;
+   else              record = &m_recordOne;
+
+   for ( i=0 ; i<record->total ; i++ )
+   {
+       if ( time <= record->list[i].time )
+       {
+           j = record->total;
+           if ( j == MAXRECORD )  j --;
+           while ( j > i )
+           {
+               record->list[j] = record->list[j-1];
+               j --;
+           }
+           break;
+       }
+   }
+
+   if ( i < MAXRECORD )  // ajoute à la fin de la liste ?
+   {
+       strcpy(record->list[i].gamerName, m_main->RetGamerName());
+       record->list[i].time   = time;
+       record->list[i].bonus  = bonus;
+       record->list[i].value1 = value1;
+       record->list[i].value2 = value2;
+       record->list[i].points = points;
+       record->list[i].model  = RetModel();
+       record->select = i;
+
+       if ( record->total < MAXRECORD )
+       {
+           record->total ++;
+       }
+   }
+
+   for ( j=i-1 ; j>=0 ; j-- )
+   {
+       if ( record->list[j].model == RetModel() )  return FALSE;
+   }
+   return TRUE;  // c'est un record du monde
 }
 
+// Indique si un temps donné est un record absolu.
+// Retourne une valeur >= 0 correspondant à l'amélioration du temps.
 
-// Passe à la misison suivante, et éventuellement au chapitre suivant.
+float CMainDialog::TimeRecord(float time, int type)
+{
+   RecordList* record;
+
+   if ( type == 0 )  record = &m_recordAll;
+   else              record = &m_recordOne;
+
+   if ( record->total == 0 )  return 0.0f;
+   return record->list[0].time - time;
+}
 
-BOOL CMainDialog::NextMission()
+// Indique s'il n'existe aucun record.
+
+BOOL CMainDialog::FirstRecord(int type)
 {
-   m_sel[m_index] ++;  // mission suivante
+   RecordList* record;
+
+   if ( type == 0 )  record = &m_recordAll;
+   else              record = &m_recordOne;
+
+   return ( record->total == 0 );
+}
+
+// Met à jour le tableau des records.
+
+void CMainDialog::UpdateRecord(CArray *pa, int type)
+{
+   RecordList* record;
+   char        text[100];
+   char        car[50];
+   char        time[50];
+   int         i;
+
+   if ( type == 0 )  record = &m_recordAll;
+   else              record = &m_recordOne;
+
+   pa->Flush();  // vide la liste
+   if ( m_bPesetas )  i = RT_WIN_HEADERm;
+   else               i = RT_WIN_HEADERf;
+   GetResource(RES_TEXT, i, text);
+   pa->SetName(-1, text);  // texte de la légende
 
-   if ( m_sel[m_index] >= m_maxList )  // dernière mission du chapitre ?
+   for ( i=0 ; i<record->total ; i++ )
    {
-       m_chap[m_index] ++;  // chapitre suivant
-       m_sel[m_index] = 0;  // première mission
+       NamePerso(car, record->list[i].model);
+       PutTime(time, record->list[i].time);
+       if ( m_bPesetas )
+       {
+           sprintf(text, "%d:\t  %s\t%s\t%s\t%d", i+1,
+                   car, record->list[i].gamerName, time,
+                   record->list[i].points);
+       }
+       else
+       {
+           sprintf(text, "%d:\t  %s\t%s\t%s\t", i+1,
+                   car, record->list[i].gamerName, time);
+       }
+       pa->SetName(i, text);
    }
 
+   pa->SetSelect(record->select);
+   pa->ShowSelect();
+}
+
+
+// Met à jour la liste des voitures fantomes.
+
+void CMainDialog::UpdateGhostList(BOOL bAll)
+{
+#if _DEMO|_SE
+   return;
+#else
+   CWindow*    pw;
+   CArray*     pa;
+   CRecorder*  recorder;
+   GhostFile   gf;
+   long        hFile;
+   struct _finddata_t fileBuffer;
+   char        name[100];
+   char        filename[100];
+   char        sub[100];
+   int         i, j;
+   BOOL        bDo, bSwap;
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return;
+   pa = (CArray*)pw->SearchControl(EVENT_INTERFACE_IOLIST);
+   if ( pa == 0 )  return;
+
+   pa->Flush();
+
+//?    if ( !ComputeCheck(m_sel[m_index], check) )  return;
+   recorder = new CRecorder(m_iMan);
+
+   j = 0;
+   strcpy(name, m_duelDir);
+   strcat(name, "\\*.rec");
+   hFile = _findfirst(name, &fileBuffer);
+   if ( hFile != -1 )
+   {
+       do
+       {
+           if ( (fileBuffer.attrib & _A_SUBDIR) == 0 )
+           {
+               strcpy(filename, m_duelDir);
+               strcat(filename, "\\");
+               strcat(filename, fileBuffer.name);
+               if ( !recorder->ReadHeader(filename) )  continue;
+
+               strcpy(m_ghostList[j].filename, fileBuffer.name);
+               strcpy(m_ghostList[j].gamer, recorder->RetGamer());
+               m_ghostList[j].type = recorder->RetType();
+               m_ghostList[j].mission = recorder->RetMission();
+               m_ghostList[j].model = recorder->RetModel();
+               m_ghostList[j].chrono = recorder->RetChrono();
+
+               strcpy(sub, "");
+               if ( recorder->RetType() == 's' )  strcpy(sub, "scene");
+               if ( recorder->RetType() == 'f' )  strcpy(sub, "free");
+               if ( recorder->RetType() == 'u' )  strcpy(sub, "user");
+               if ( recorder->RetType() == 'p' )  strcpy(sub, "proto");
+               if ( ReadSceneTitle(sub, recorder->RetMission(), m_ghostList[j].title) )
+               {
+                   j ++;
+               }
+           }
+       }
+       while ( _findnext(hFile, &fileBuffer) == 0 && j < GHOSTLISTMAX );
+   }
+   m_ghostTotal = j;
+
+   do  // trie tous les noms :
+   {
+       bDo = FALSE;
+       for ( i=0 ; i<m_ghostTotal-1 ; i++ )
+       {
+//?            if ( stricmp(m_ghostList[i].filename, m_ghostList[i+1].filename) > 0 )
+
+           if ( m_ghostList[i].type != m_ghostList[i+1].type )
+           {
+               bSwap = ( m_ghostList[i].type < m_ghostList[i+1].type );
+           }
+           else
+           {
+               if ( m_ghostList[i].mission != m_ghostList[i+1].mission )
+               {
+                   bSwap = ( m_ghostList[i].mission > m_ghostList[i+1].mission );
+               }
+               else
+               {
+                   if ( PricePerso(m_ghostList[i].model) != PricePerso(m_ghostList[i+1].model) )
+                   {
+                       bSwap = ( PricePerso(m_ghostList[i].model) > PricePerso(m_ghostList[i+1].model) );
+                   }
+                   else
+                   {
+                       if ( m_ghostList[i].chrono != m_ghostList[i+1].chrono )
+                       {
+                           bSwap = ( m_ghostList[i].chrono > m_ghostList[i+1].chrono );
+                       }
+                       else
+                       {
+                           bSwap = FALSE;
+                       }
+                   }
+               }
+           }
+
+           if ( bSwap )
+           {
+               gf               = m_ghostList[i];
+               m_ghostList[i]   = m_ghostList[i+1];
+               m_ghostList[i+1] = gf;
+               bDo = TRUE;
+           }
+       }
+   }
+   while ( bDo );
+
+   GetResource(RES_TEXT, RT_IO_HEADER, name);
+   pa->SetName(-1, name);  // texte de la légende
+
+   for ( j=0 ; j<m_ghostTotal ; j++ )
+   {
+       strcpy(name, m_ghostList[j].filename);
+       i = strlen(name);
+       if ( i > 4 )  name[i-4] = 0;  // enlève ".rec"
+
+       strcat(name, "\t");
+       strcat(name, m_ghostList[j].title);  // titre de la mission
+
+       NamePerso(sub, m_ghostList[j].model);  // nom de la voiture
+       strcat(name, "\t");
+       strcat(name, sub);
+
+       strcat(name, "\t");
+       strcat(name, m_ghostList[j].gamer);  // nom du joueur
+
+       PutTime(sub, m_ghostList[j].chrono);  // temps effectué
+       strcat(name, "\t");
+       strcat(name, sub);
+
+       pa->SetName(j, name);
+
+       if ( !bAll )
+       {
+           pa->SetEnable(j, UsedPerso(m_ghostList[j].model));
+       }
+   }
+
+   if ( m_ghostSelect >= pa->RetTotal() )
+   {
+       m_ghostSelect = -1;
+   }
+   else
+   {
+       pa->SetSelect(m_ghostSelect);  // sélectionne comme précédemment
+       pa->ShowSelect();  // montre
+   }
+
+   delete recorder;
+#endif
+}
+
+// Sélectionne une voiture fantome dans la liste.
+
+void CMainDialog::SelectGhostList()
+{
+   CWindow*    pw;
+   CArray*     pa;
+   CEdit*      pe;
+   CButton*    pb;
+   BOOL        bEnable;
+   char        filename[200];
+   char*       p;
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return;
+   pa = (CArray*)pw->SearchControl(EVENT_INTERFACE_IOLIST);
+   if ( pa == 0 )  return;
+   pe = (CEdit*)pw->SearchControl(EVENT_INTERFACE_IONAME);
+   pb = (CButton*)pw->SearchControl(EVENT_INTERFACE_ROK);
+
+   m_ghostSelect = pa->RetSelect();
+   bEnable = (m_ghostSelect != -1);
+   if ( bEnable && !pa->RetEnable(m_ghostSelect) )  bEnable = FALSE;
+#if _DEMO|_SE
+   bEnable = FALSE;
+#endif
+
+   if ( bEnable && pe != 0 )
+   {
+       strcpy(filename, pa->RetName(m_ghostSelect));
+       p = strchr(filename, '\t');
+       if ( p != 0 )  *p = 0;
+
+       pe->SetText(filename);
+       pe->SetCursor(100, 0);
+       pe->SetFocus(TRUE);
+   }
+
+   if ( pb != 0 )
+   {
+       pb->SetState(STATE_ENABLE, bEnable);
+   }
+}
+
+// Ecrit le fichier de la voiture fantome.
+
+int CMainDialog::WriteGhostFile()
+{
+   FILE*       file;
+   CWindow*    pw;
+   CEdit*      pe;
+   CRecorder*  recorder;
+   char        name[100];
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return 1;
+   pe = (CEdit*)pw->SearchControl(EVENT_INTERFACE_IONAME);
+   if ( pe == 0 )  return 1;
+
+   pe->GetText(name, 100);
+   if ( name[0] == 0 )  return 1;
+
+   _mkdir(m_duelDir);  // si n'existe pas encore !
+
+   strcpy(m_ghostName, m_duelDir);
+   strcat(m_ghostName, "\\");
+   strcat(m_ghostName, name);
+   strcat(m_ghostName, ".rec");
+
+   file = fopen(m_ghostName, "rb");
+   if ( file != NULL )  // fichier existe déjà ?
+   {
+       fclose(file);
+       return 2;
+   }
+
+   recorder = m_main->RetRecorderRecord();
+   if ( recorder == 0 )  return 1;
+   if ( !recorder->Write(m_ghostName) )  return 1;
+   return 0;
+}
+
+// Détruit le fichier de la voiture fantome.
+
+BOOL CMainDialog::DeleteGhostFile()
+{
+   remove(m_ghostName);
+   if ( WriteGhostFile() != 0 )  return FALSE;
+   return TRUE;
+}
+
+// Lit le fichier de la voiture fantome.
+
+BOOL CMainDialog::ReadGhostFile()
+{
+   CWindow*    pw;
+   CArray*     pa;
+   CRecorder*  recorder;
+   char        filename[200];
+   char*       p;
+
+   pw = (CWindow*)m_interface->SearchControl(EVENT_WINDOW4);
+   if ( pw == 0 )  return FALSE;
+   pa = (CArray*)pw->SearchControl(EVENT_INTERFACE_IOLIST);
+   if ( pa == 0 )  return FALSE;
+
+   if ( m_ghostSelect == -1 )  return FALSE;
+   if ( !pa->RetEnable(m_ghostSelect) )  return FALSE;
+
+   strcpy(filename, pa->RetName(m_ghostSelect));
+   p = strchr(filename, '\t');
+   if ( p != 0 )  *p = 0;
+
+   strcpy(m_ghostName, m_duelDir);
+   strcat(m_ghostName, "\\");
+   strcat(m_ghostName, filename);
+   strcat(m_ghostName, ".rec");
+
+   recorder = new CRecorder(m_iMan);
+   if ( !recorder->ReadHeader(m_ghostName) )
+   {
+       delete recorder;
+       return FALSE;
+   }
+
+   m_duelLevel    = recorder->RetLevel();
+   m_duelType     = recorder->RetType();
+   m_duelMission  = recorder->RetMission();
+   m_duelModel    = recorder->RetModel();
+   m_duelSubModel = recorder->RetSubModel();
+   m_duelColor    = recorder->RetColor();
+
+   m_bDuel = TRUE;
+   m_bGhostExist = TRUE;
+   m_bGhostEnable = TRUE;
+   m_phaseTerm = PHASE_READ;
+
+   delete recorder;
    return TRUE;
 }
 
+// Retourne le nom du fichier de la voiture fantome à utiliser.
+
+char* CMainDialog::RetGhostRead()
+{
+   return m_ghostName;
+}
 
