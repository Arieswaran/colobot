diff a/src/ui/controls/slider.cpp b/src/ui/controls/slider.cpp	(rejected hunks)
@@ -89,8 +89,8 @@ void CSlider::MoveAdjust()
 
    m_bHoriz = ( m_dim.x > m_dim.y );
 
-   if ( ( m_bHoriz && m_dim.x < m_dim.y*4.0f) ||
-        (!m_bHoriz && m_dim.y < m_dim.x*4.0f) )  // slider très court ?
+   if ( ( m_bHoriz && m_dim.x < m_dim.y*3.0f) ||
+        (!m_bHoriz && m_dim.y < m_dim.x*3.0f) )  // slider très court ?
    {
        delete m_buttonLeft;
        m_buttonLeft = 0;
@@ -237,6 +237,7 @@ BOOL CSlider::EventProcess(const Event &event)
 {
    FPOINT  pos, dim;
    float   value;
+   BOOL    bShift;
 
    if ( (m_state & STATE_VISIBLE) == 0 )  return TRUE;
 
@@ -251,6 +252,8 @@ BOOL CSlider::EventProcess(const Event &event)
        if ( !m_buttonRight->EventProcess(event) )  return FALSE;
    }
 
+   bShift = (event.keyState&KS_SHIFT);
+
    if ( event.event == m_eventUp && m_step > 0.0f )
    {
        m_visibleValue -= m_bHoriz?m_step:-m_step;
@@ -364,6 +367,29 @@ BOOL CSlider::EventProcess(const Event &event)
        m_event->AddEvent(newEvent);
    }
 
+   if ( m_bFocus &&
+        (m_state & STATE_VISIBLE) &&
+        (m_state & STATE_ENABLE)  &&
+        event.event == EVENT_KEYDOWN &&
+        (event.param == VK_UP ||
+         event.param == VK_JUP) )
+   {
+       Event newEvent = event;
+       newEvent.event = m_buttonLeft->RetEventMsg();
+       m_event->AddEvent(newEvent);
+   }
+   if ( m_bFocus &&
+        (m_state & STATE_VISIBLE) &&
+        (m_state & STATE_ENABLE)  &&
+        event.event == EVENT_KEYDOWN &&
+        (event.param == VK_DOWN ||
+         event.param == VK_JDOWN) )
+   {
+       Event newEvent = event;
+       newEvent.event = m_buttonRight->RetEventMsg();
+       m_event->AddEvent(newEvent);
+   }
+
    return TRUE;
 }
 
@@ -374,11 +400,16 @@ void CSlider::Draw()
 {
    FPOINT  pos, dim, ppos, ddim, spos;
    int     icon;
-   float   h;
+   float   h, value;
    char    text[100];
 
    if ( (m_state & STATE_VISIBLE) == 0 )  return;
 
+   if ( m_bFocus )
+   {
+       DrawFocus(m_pos, m_dim);
+   }
+
    if ( m_buttonLeft != 0 )
    {
        m_buttonLeft->Draw();
@@ -453,19 +484,21 @@ void CSlider::Draw()
        m_buttonRight->Draw();
    }
 
-   if ( m_bHoriz )
+   if ( (m_state & STATE_VALUE) && (m_state & STATE_ENABLE) )
    {
-       sprintf(text, "%d", (int)(m_min+m_visibleValue*(m_max-m_min)));
-       h = m_engine->RetText()->RetHeight(m_fontSize, m_fontType);
-       pos.x = m_pos.x+m_dim.x+(10.0f/640.0f);
-       pos.y = m_pos.y+(m_dim.y-h)/2.0f;
-       m_engine->RetText()->DrawText(text, pos, m_dim.x, 1, m_fontSize, m_fontStretch, m_fontType, 0);
-   }
-   else
-   {
-       if ( m_state & STATE_VALUE )
+       if ( m_bHoriz )
        {
-           pos.x = m_pos.x+m_dim.x+4.0f/640.0f;
+           value = (m_min+m_visibleValue*(m_max-m_min))*10.0f;
+           sprintf(text, "%d", (int)(value+0.5f));
+           h = m_engine->RetText()->RetHeight(m_fontSize, m_fontType);
+           pos.x = m_pos.x+m_dim.x+(10.0f/640.0f);
+           pos.y = m_pos.y+(m_dim.y-h)/2.0f-(2.0f/480.0f);
+           m_engine->RetText()->DrawText(text, pos, m_dim.x, 1, m_fontSize, m_fontStretch, m_fontType, 0);
+       }
+       else
+       {
+#if 0
+           pos.x = m_pos.x+m_dim.x+6.0f/640.0f;
            h = m_dim.y-m_marginButton*2.0f;
            pos.y = m_pos.y+m_marginButton-4.0f/480.0f;
            pos.y += (h-CURSOR_WIDTH)*m_visibleValue;
@@ -473,6 +506,14 @@ void CSlider::Draw()
            dim.y = 16.0f/480.0f;
            sprintf(text, "%d", (int)(m_min+(m_visibleValue*(m_max-m_min))));
            m_engine->RetText()->DrawText(text, pos, dim.x, 1, m_fontSize, m_fontStretch, m_fontType, 0);
+#else
+           value = (m_min+m_visibleValue*(m_max-m_min))*100.0f;
+           sprintf(text, "%d", (int)(value+0.5f));
+           pos.x = m_pos.x+m_dim.x/2.0f;
+           pos.y = m_pos.y+m_dim.y+2.0f/480.0f;
+           dim.x = m_dim.x+10.0f/640.0f;
+           m_engine->RetText()->DrawText(text, pos, dim.x, 0, m_fontSize*0.8f, m_fontStretch, m_fontType, 0);
+#endif
        }
    }
 }
@@ -486,44 +527,39 @@ void CSlider::DrawVertex(FPOINT pos, FPOINT dim, int icon)
 
    if ( icon == 0 )
    {
-       m_engine->SetTexture("button2.tga");
+       m_engine->SetTexture("button1.tga");
        m_engine->SetState(D3DSTATENORMAL);
-       uv1.x =   0.0f/256.0f;  // rectangle jaune
-       uv1.y =  32.0f/256.0f;
-       uv2.x =  32.0f/256.0f;
-       uv2.y =  64.0f/256.0f;
+       uv1.x =  64.0f/256.0f;
+       uv1.y =   0.0f/256.0f;
+       uv2.x =  96.0f/256.0f;
+       uv2.y =  32.0f/256.0f;
        corner.x = 2.0f/640.0f;
        corner.y = 2.0f/480.0f;
        ex = 4.0f/256.0f;
    }
    else if ( icon == 1 )
    {
-       m_engine->SetTexture("button2.tga");
+       m_engine->SetTexture("button1.tga");
        m_engine->SetState(D3DSTATENORMAL);
-       uv1.x = 128.0f/256.0f;  // rectangle gris
-       uv1.y =  32.0f/256.0f;
-       uv2.x = 160.0f/256.0f;
-       uv2.y =  64.0f/256.0f;
+       uv1.x = 224.0f/256.0f;
+       uv1.y =   0.0f/256.0f;
+       uv2.x = 256.0f/256.0f;
+       uv2.y =  32.0f/256.0f;
        corner.x = 2.0f/640.0f;
        corner.y = 2.0f/480.0f;
        ex = 4.0f/256.0f;
    }
    else
    {
-       m_engine->SetTexture("button2.tga");
+       m_engine->SetTexture("button1.tga");
        m_engine->SetState(D3DSTATENORMAL);
        uv1.x = 224.0f/256.0f;  // curseur
        uv1.y =  32.0f/256.0f;
        uv2.x = 256.0f/256.0f;
        uv2.y =  64.0f/256.0f;
-       if ( !m_bHoriz )
-       {
-           uv1.y += 64.0f/256.0f;
-           uv2.y += 64.0f/256.0f;
-       }
        corner.x = 2.0f/640.0f;
        corner.y = 2.0f/480.0f;
-       ex = 4.0f/256.0f;
+       ex = 2.0f/256.0f;
    }
 
    dp = 0.5f/256.0f;
