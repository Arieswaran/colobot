diff a/src/object/object.cpp b/src/object/object.cpp	(rejected hunks)
@@ -17,6 +17,7 @@
 #include "iman.h"
 #include "restext.h"
 #include "math3d.h"
+#include "recorder.h"
 #include "mainmovie.h"
 #include "robotmain.h"
 #include "light.h"
@@ -29,56 +30,43 @@
 #include "brain.h"
 #include "motion.h"
 #include "motionhuman.h"
-#include "motiontoto.h"
 #include "motionvehicle.h"
-#include "motionmother.h"
-#include "motionant.h"
-#include "motionspider.h"
-#include "motionbee.h"
-#include "motionworm.h"
+#include "motionbot.h"
 #include "modfile.h"
 #include "auto.h"
-#include "autobase.h"
-#include "autoportico.h"
-#include "autoderrick.h"
-#include "autofactory.h"
-#include "autorepair.h"
-#include "autodestroyer.h"
-#include "autostation.h"
-#include "autoenergy.h"
-#include "autoconvert.h"
 #include "autotower.h"
-#include "autoresearch.h"
-#include "autolabo.h"
-#include "autonuclear.h"
-#include "autoradar.h"
-#include "autoegg.h"
-#include "autonest.h"
 #include "autoroot.h"
-#include "autoflag.h"
-#include "autoinfo.h"
 #include "autojostle.h"
-#include "autopara.h"
-#include "autosafe.h"
-#include "autohuston.h"
-#include "automush.h"
-#include "autokid.h"
+#include "autoalien.h"
+#include "autodoor.h"
+#include "autodock.h"
+#include "autoremote.h"
+#include "autostand.h"
+#include "autogenerator.h"
+#include "autocomputer.h"
+#include "autorepair.h"
+#include "autofire.h"
+#include "autohelico.h"
+#include "autocompass.h"
+#include "autoblitzer.h"
+#include "autoinca.h"
+#include "autohook.h"
+#include "autobarrel.h"
+#include "autobomb.h"
+#include "autohome.h"
 #include "task.h"
 #include "pyro.h"
+#include "sound.h"
 #include "displaytext.h"
 #include "cmdtoken.h"
 #include "cbottoken.h"
-#include "sound.h"
 #include "object.h"
 
 
 
 #define ADJUST_ONBOARD FALSE       // TRUE -> ajuste la caméra ONBOARD
 #define ADJUST_ARM     FALSE       // TRUE -> ajuste le bras manipulateur
-#define VIRUS_DELAY        60.0f       // durée d'infection d'un virus
 #define LOSS_SHIELD        0.24f       // perte du bouclier par coup
-#define LOSS_SHIELD_H  0.10f       // perte du bouclier pour l'homme
-#define LOSS_SHIELD_M  0.02f       // perte du bouclier pour la pondeuse
 
 #if ADJUST_ONBOARD
 static float debug_x = 0.0f;
@@ -107,7 +95,6 @@ void uObject(CBotVar* botThis, void* user)
    ObjectType  type;
    D3DVECTOR   pos;
    float       value;
-   int         iValue;
 
    if ( object == 0 )  return;
 
@@ -116,7 +103,7 @@ void uObject(CBotVar* botThis, void* user)
    // Met à jour le type de l'objet.
    pVar = botThis->GivItemList();  // "category"
    type = object->RetType();
-   pVar->SetValInt(type, object->RetName());
+   pVar->SetValInt(type, "");
 
    // Met à jour la position de l'objet.
    pVar = pVar->GivNext();  // "position"
@@ -125,11 +112,11 @@ void uObject(CBotVar* botThis, void* user)
        pos = object->RetPosition(0);
        pos.y -= object->RetWaterLevel();  // relatif au niveau de la mer !
        pSub = pVar->GivItemList();  // "x"
-       pSub->SetValFloat(pos.x/g_unit);
+       pSub->SetValFloat(pos.x/UNIT);
        pSub = pSub->GivNext();  // "y"
-       pSub->SetValFloat(pos.z/g_unit);
+       pSub->SetValFloat(pos.z/UNIT);
        pSub = pSub->GivNext();  // "z"
-       pSub->SetValFloat(pos.y/g_unit);
+       pSub->SetValFloat(pos.y/UNIT);
    }
    else    // objet transporté ?
    {
@@ -153,8 +140,7 @@ void uObject(CBotVar* botThis, void* user)
 
    // Met à jour le niveau d'énergie de l'objet.
    pVar = pVar->GivNext();  // "energyLevel"
-   value = object->RetEnergy();
-   pVar->SetValFloat(value);
+   pVar->SetValFloat(1.0f);
 
    // Met à jour le niveau du bouclier de l'objet.
    pVar = pVar->GivNext();  // "shieldLevel"
@@ -163,26 +149,19 @@ void uObject(CBotVar* botThis, void* user)
 
    // Met à jour la température du bouclier.
    pVar = pVar->GivNext();  // "temperature"
-   if ( physics == 0 )  value = 0.0f;
-   else                 value = 1.0f-physics->RetReactorRange();
-   pVar->SetValFloat(value);
+   pVar->SetValFloat(1.0f);
 
    // Met à jour la hauteur au-dessus du sol.
    pVar = pVar->GivNext();  // "altitude"
    if ( physics == 0 )  value = 0.0f;
    else                 value = physics->RetFloorHeight();
-   pVar->SetValFloat(value/g_unit);
+   pVar->SetValFloat(value/UNIT);
 
    // Met à jour le temps de l'objet.
    pVar = pVar->GivNext();  // "lifeTime"
    value = object->RetAbsTime();
    pVar->SetValFloat(value);
 
-   // Met à jour la matière de l'objet.
-   pVar = pVar->GivNext();  // "material"
-   iValue = object->RetMaterial();
-   pVar->SetValInt(iValue);
-
    // Met à jour le type de la pile.
    pVar = pVar->GivNext();  // "energyCell"
    power = object->RetPower();
@@ -224,89 +203,68 @@ CObject::CObject(CInstanceManager* iMan)
    m_runScript   = 0;
 
    m_type = OBJECT_FIX;
+   m_model = 0;
+   m_subModel = 0;
    m_id = ++g_id;
    m_option = 0;
-   m_name[0] = 0;
-   m_partiReactor  = -1;
    m_shadowLight   = -1;
    m_effectLight   = -1;
    m_linVibration  = D3DVECTOR(0.0f, 0.0f, 0.0f);
    m_cirVibration  = D3DVECTOR(0.0f, 0.0f, 0.0f);
+   m_cirChoc       = D3DVECTOR(0.0f, 0.0f, 0.0f);
    m_inclinaison   = D3DVECTOR(0.0f, 0.0f, 0.0f);
    m_lastParticule = 0.0f;
 
    m_power = 0;
    m_fret  = 0;
    m_truck = 0;
-   m_truckLink = 0;
-   m_energy   = 1.0f;
-   m_capacity = 1.0f;
-   m_shield   = 1.0f;
-   m_range    = 0.0f;
+   m_truckLink  = 0;
+   m_shield     = 1.0f;
+   m_burnShield = 1.0f;
    m_transparency = 0.0f;
-   m_lastEnergy = 999.9f;
    m_bHilite = FALSE;
    m_bSelect = FALSE;
    m_bSelectable = TRUE;
-   m_bCheckToken = TRUE;
    m_bVisible = TRUE;
    m_bEnable = TRUE;
    m_bGadget = FALSE;
-   m_bProxyActivate = FALSE;
    m_bTrainer = FALSE;
-   m_bToy = FALSE;
-   m_bManual = FALSE;
    m_bFixed = FALSE;
    m_bClip = TRUE;
-   m_bShowLimit = FALSE;
-   m_showLimitRadius = 0.0f;
+   m_bGhost = FALSE;
+   m_bGround = FALSE;
    m_aTime = 0.0f;
    m_shotTime = 0.0f;
-   m_bVirusMode = FALSE;
-   m_virusTime = 0.0f;
-   m_lastVirusParticule = 0.0f;
-   m_totalDesectList = 0;
-   m_bLock  = FALSE;
-   m_bExplo = FALSE;
-   m_bCargo = FALSE;
-   m_bBurn  = FALSE;
-   m_bDead  = FALSE;
-   m_bFlat  = FALSE;
-   m_gunGoalV = 0.0f;
-   m_gunGoalH = 0.0f;
-   m_shieldRadius = 0.0f;
+   m_bLock     = FALSE;
+   m_bStarting = FALSE;
+   m_bExplo    = FALSE;
+   m_bBurn     = FALSE;
+   m_bDead     = FALSE;
+   m_bFlat     = FALSE;
    m_defRank = -1;
    m_magnifyDamage = 1.0f;
-   m_proxyDistance = 60.0f;
    m_param = 0.0f;
+   m_passCounter = 0;
+   m_rankCounter = -1;
 
    ZeroMemory(&m_character, sizeof(Character));
-   m_character.wheelFront = 1.0f;
-   m_character.wheelBack  = 1.0f;
-   m_character.wheelLeft  = 1.0f;
-   m_character.wheelRight = 1.0f;
-
-   m_resetCap      = RESET_NONE;
-   m_bResetBusy    = FALSE;
-   m_resetPosition = D3DVECTOR(0.0f, 0.0f, 0.0f);
-   m_resetAngle    = D3DVECTOR(0.0f, 0.0f, 0.0f);
-   m_resetRun      = -1;
+   m_character.wheelFrontPos = D3DVECTOR( 1.0f, 1.0f, 1.0f);
+   m_character.wheelBackPos  = D3DVECTOR(-1.0f, 1.0f, 1.0f);
+   m_character.wheelFrontDim = 1.0f;
+   m_character.wheelBackDim  = 1.0f;
+   m_character.mass          = 1000.0f;
 
    m_cameraType = CAMERA_BACK;
    m_cameraDist = 50.0f;
    m_bCameraLock = FALSE;
 
-   m_infoTotal = 0;
-   m_infoReturn = NAN;
-   m_bInfoUpdate = FALSE;
-
    for ( i=0 ; i<OBJECTMAXPART ; i++ )
    {
        m_objectPart[i].bUsed = FALSE;
    }
    m_totalPart = 0;
 
-   for ( i=0 ; i<4 ; i++ )
+   for ( i=0 ; i<10 ; i++ )
    {
        m_partiSel[i] = -1;
    }
@@ -317,6 +275,7 @@ CObject::CObject(CInstanceManager* iMan)
    }
 
    FlushCrashShere();
+   FlushCrashLine();
    m_globalSpherePos = D3DVECTOR(0.0f, 0.0f, 0.0f);
    m_globalSphereRadius = 0.0f;
    m_jotlerSpherePos = D3DVECTOR(0.0f, 0.0f, 0.0f);
@@ -331,6 +290,10 @@ CObject::CObject(CInstanceManager* iMan)
    m_botVar = CBotVar::Create("", CBotTypResult(CBotTypClass, "object"));
    m_botVar->SetUserPtr(this);
    m_botVar->SetIdent(m_id);
+
+   m_bRecorderRecord = FALSE;
+   m_bRecorderPlay   = FALSE;
+   m_recorder = 0;
 }
 
 // Destructeur de l'objet.
@@ -358,7 +321,6 @@ CObject::~CObject()
 
 void CObject::DeleteObject(BOOL bAll)
 {
-   CObject*    pObj;
    CPyro*      pPyro;
    int         i;
 
@@ -372,14 +334,6 @@ void CObject::DeleteObject(BOOL bAll)
        m_camera->SetObject(0);
    }
 
-   for ( i=0 ; i<1000000 ; i++ )
-   {
-       pObj = (CObject*)m_iMan->SearchInstance(CLASS_OBJECT, i);
-       if ( pObj == 0 )  break;
-
-       pObj->DeleteDeselList(this);
-   }
-
    if ( !bAll )
    {
 #if 0
@@ -416,25 +370,44 @@ void CObject::DeleteObject(BOOL bAll)
            SetSelect(FALSE);
        }
 
-       if ( m_type == OBJECT_BASE     ||
-            m_type == OBJECT_FACTORY  ||
-            m_type == OBJECT_REPAIR   ||
-            m_type == OBJECT_DESTROYER||
-            m_type == OBJECT_DERRICK  ||
-            m_type == OBJECT_STATION  ||
-            m_type == OBJECT_CONVERT  ||
+       if ( m_type == OBJECT_FACTORY1 ||
+            m_type == OBJECT_FACTORY2 ||
+            m_type == OBJECT_FACTORY3 ||
+            m_type == OBJECT_FACTORY4 ||
+            m_type == OBJECT_FACTORY5 ||
+            m_type == OBJECT_FACTORY6 ||
+            m_type == OBJECT_FACTORY7 ||
+            m_type == OBJECT_FACTORY8 ||
+            m_type == OBJECT_FACTORY9 ||
+            m_type == OBJECT_FACTORY10||
+            m_type == OBJECT_FACTORY11||
+            m_type == OBJECT_FACTORY12||
+            m_type == OBJECT_FACTORY13||
+            m_type == OBJECT_FACTORY14||
+            m_type == OBJECT_FACTORY15||
+            m_type == OBJECT_FACTORY16||
+            m_type == OBJECT_FACTORY17||
+            m_type == OBJECT_FACTORY18||
+            m_type == OBJECT_FACTORY19||
+            m_type == OBJECT_FACTORY20||
             m_type == OBJECT_TOWER    ||
-            m_type == OBJECT_RESEARCH ||
-            m_type == OBJECT_RADAR    ||
-            m_type == OBJECT_INFO     ||
-            m_type == OBJECT_ENERGY   ||
-            m_type == OBJECT_LABO     ||
             m_type == OBJECT_NUCLEAR  ||
             m_type == OBJECT_PARA     ||
-            m_type == OBJECT_SAFE     ||
-            m_type == OBJECT_HUSTON   ||
+            m_type == OBJECT_COMPUTER ||
+            m_type == OBJECT_REPAIR   ||
+            m_type == OBJECT_SWEET    ||
+            m_type == OBJECT_DOOR1    ||
+            m_type == OBJECT_DOOR2    ||
+            m_type == OBJECT_DOOR3    ||
+            m_type == OBJECT_DOOR4    ||
+            m_type == OBJECT_DOOR5    ||
+            m_type == OBJECT_DOCK     ||
+            m_type == OBJECT_REMOTE   ||
+            m_type == OBJECT_STAND    ||
+            m_type == OBJECT_GENERATOR||
             m_type == OBJECT_START    ||
-            m_type == OBJECT_END      )  // batiment?
+            m_type == OBJECT_END      ||
+            m_type == OBJECT_SUPPORT  )  // batiment?
        {
            m_terrain->DeleteBuildingLevel(RetPosition(0));  // applanit le terrain
        }
@@ -442,12 +415,6 @@ void CObject::DeleteObject(BOOL bAll)
 
    m_type = OBJECT_NULL;  // objet invalide jusqu'à destruction complète
 
-   if ( m_partiReactor != -1 )
-   {
-       m_particule->DeleteParticule(m_partiReactor);
-       m_partiReactor = -1;
-   }
-
    if ( m_shadowLight != -1 )
    {
        m_light->DeleteLight(m_shadowLight);
@@ -494,14 +461,6 @@ void CObject::DeleteObject(BOOL bAll)
            }
        }
    }
-
-   if ( m_bShowLimit )
-   {
-       m_main->FlushShowLimit(0);
-       m_bShowLimit = FALSE;
-   }
-
-   if ( !bAll )  m_main->CreateShortcuts();
 }
 
 // Simplifie un objet (on lui ôte le cerveau, entre autres).
@@ -512,7 +471,6 @@ void CObject::Simplify()
    {
        m_brain->StopProgram();
    }
-   m_main->SaveOneScript(this);
 
    if ( m_physics != 0 )
    {
@@ -541,8 +499,6 @@ void CObject::Simplify()
        delete m_auto;
        m_auto = 0;
    }
-
-   m_main->CreateShortcuts();
 }
 
 
@@ -550,35 +506,31 @@ void CObject::Simplify()
 // Si FALSE est retourné, l'objet n'est pas encore foutu.
 // Si TRUE est retourné, l'objet est détruit.
 
-BOOL CObject::ExploObject(ExploType type, float force, float decay)
+BOOL CObject::ExploObject(ExploType type, float force, D3DVECTOR impact)
 {
    PyroType    pyroType;
    CPyro*      pyro;
    float       loss, shield;
+   int         i, nb, level, part, objRank, total;
 
    if ( type == EXPLO_BURN )
    {
        if ( m_type == OBJECT_MOBILEtg ||
-            m_type == OBJECT_TEEN28    ||  // bouteille ?
+            m_type == OBJECT_TRAX     ||
+            m_type == OBJECT_UFO      ||
             m_type == OBJECT_METAL    ||
-            m_type == OBJECT_POWER    ||
+            m_type == OBJECT_BARREL   ||
+            m_type == OBJECT_BARRELa  ||
             m_type == OBJECT_ATOMIC   ||
             m_type == OBJECT_TNT      ||
-            m_type == OBJECT_SCRAP1   ||
-            m_type == OBJECT_SCRAP2   ||
-            m_type == OBJECT_SCRAP3   ||
-            m_type == OBJECT_SCRAP4   ||
-            m_type == OBJECT_SCRAP5   ||
-            m_type == OBJECT_BULLET   ||
-            m_type == OBJECT_EGG      )  // objet qui ne brûle pas ?
+            m_type == OBJECT_BULLET   )  // objet qui ne brûle pas ?
        {
            type = EXPLO_BOUM;
            force = 1.0f;
-           decay = 1.0f;
        }
    }
 
-   if ( EXPLO_BOUM )
+   if ( type == EXPLO_BOUM )
    {
        if ( m_shotTime < 0.5f )  return FALSE;
        m_shotTime = 0.0f;
@@ -589,30 +541,57 @@ BOOL CObject::ExploObject(ExploType type, float force, float decay)
    // Calcule la puissance perdue par l'explosion.
    if ( force == 0.0f )
    {
-       if ( m_type == OBJECT_HUMAN )
-       {
-           loss = LOSS_SHIELD_H;
-       }
-       else if ( m_type == OBJECT_MOTHER )
+       loss = LOSS_SHIELD;
+   }
+   else
+   {
+       loss = force;
+   }
+   loss *= m_magnifyDamage;
+
+   // Diminue la puissance du bouclier.
+   if ( m_type == OBJECT_CAR )  // voiture ?
+   {
+       m_motion->TwistPart(impact, force);
+
+//?        nb = (int)(loss*60.0f);
+       level = m_main->RetLevel()-1;  // 0..3
+       if ( level < 1 )  level = 1;  // 1..3
+       nb = (int)(loss*20.0f*level);
+       if ( nb == 0 )  nb = 1;
+       if ( nb >  5 )  nb = 5;
+       if ( ExploPart(nb, force) )  // perd qq pièces
        {
-           loss = LOSS_SHIELD_M;
+           pyro = new CPyro(m_iMan);
+           pyro->SetImpact(impact);
+           pyro->Create(PT_EXPLOP, this, 1.0f);
+           return FALSE;
        }
        else
        {
-           loss = LOSS_SHIELD;
+           return TRUE;  // voiture détruite
        }
    }
-   else
+
+   if ( m_type == OBJECT_UFO )
    {
-       loss = force;
+       total = 0;
+       for ( i=0 ; i<100 ; i++ )
+       {
+           part = 1+rand()%18;
+           objRank = RetObjectRank(part);
+           if ( objRank != -1 )
+           {
+               ExploPiece(part);
+               total ++;
+               if ( total >= 6 )  break;
+           }
+       }
    }
-   loss *= m_magnifyDamage;
-   loss *= decay;
 
-   // Diminue la puissance du bouclier.
    shield = RetShield();
    shield -= loss;
-   if ( shield < 0.0f )  shield = 0.0f;
+   if ( shield < 0.0f )  shield = 0.0f;  // mort
    SetShield(shield);
 
    if ( shield > 0.0f )  // pas encore mort ?
@@ -634,10 +613,6 @@ BOOL CObject::ExploObject(ExploType type, float force, float decay)
            {
                pyroType = PT_SHOTH;
            }
-           else if ( m_type == OBJECT_MOTHER )
-           {
-               pyroType = PT_SHOTM;
-           }
            else
            {
                pyroType = PT_SHOTT;
@@ -648,12 +623,7 @@ BOOL CObject::ExploObject(ExploType type, float force, float decay)
    {
        if ( type == EXPLO_BURN )  // brûle ?
        {
-           if ( m_type == OBJECT_MOTHER ||
-                m_type == OBJECT_ANT    ||
-                m_type == OBJECT_SPIDER ||
-                m_type == OBJECT_BEE    ||
-                m_type == OBJECT_WORM   ||
-                m_type == OBJECT_BULLET )
+           if ( m_type == OBJECT_BULLET )
            {
                pyroType = PT_BURNO;
                SetBurn(TRUE);
@@ -667,7 +637,6 @@ BOOL CObject::ExploObject(ExploType type, float force, float decay)
                pyroType = PT_BURNT;
                SetBurn(TRUE);
            }
-           SetVirusMode(FALSE);
        }
        else if ( type == EXPLO_WATER )
        {
@@ -682,16 +651,7 @@ BOOL CObject::ExploObject(ExploType type, float force, float decay)
        }
        else    // explosion ?
        {
-           if ( m_type == OBJECT_ANT    ||
-                m_type == OBJECT_SPIDER ||
-                m_type == OBJECT_BEE    ||
-                m_type == OBJECT_WORM   )
-           {
-               pyroType = PT_EXPLOO;
-           }
-           else if ( m_type == OBJECT_MOTHER ||
-                     m_type == OBJECT_NEST   ||
-                     m_type == OBJECT_BULLET )
+           if ( m_type == OBJECT_BULLET )
            {
                pyroType = PT_FRAGO;
            }
@@ -699,32 +659,52 @@ BOOL CObject::ExploObject(ExploType type, float force, float decay)
            {
                pyroType = PT_DEADG;
            }
-           else if ( m_type == OBJECT_BASE     ||
-                     m_type == OBJECT_DERRICK  ||
-                     m_type == OBJECT_FACTORY  ||
-                     m_type == OBJECT_STATION  ||
-                     m_type == OBJECT_CONVERT  ||
-                     m_type == OBJECT_REPAIR   ||
-                     m_type == OBJECT_DESTROYER||
+           else if ( m_type == OBJECT_FACTORY1 ||
+                     m_type == OBJECT_FACTORY2 ||
+                     m_type == OBJECT_FACTORY3 ||
+                     m_type == OBJECT_FACTORY4 ||
+                     m_type == OBJECT_FACTORY5 ||
+                     m_type == OBJECT_FACTORY6 ||
+                     m_type == OBJECT_FACTORY7 ||
+                     m_type == OBJECT_FACTORY8 ||
+                     m_type == OBJECT_FACTORY9 ||
+                     m_type == OBJECT_FACTORY10||
+                     m_type == OBJECT_FACTORY11||
+                     m_type == OBJECT_FACTORY12||
+                     m_type == OBJECT_FACTORY13||
+                     m_type == OBJECT_FACTORY14||
+                     m_type == OBJECT_FACTORY15||
+                     m_type == OBJECT_FACTORY16||
+                     m_type == OBJECT_FACTORY17||
+                     m_type == OBJECT_FACTORY18||
+                     m_type == OBJECT_FACTORY19||
+                     m_type == OBJECT_FACTORY20||
                      m_type == OBJECT_TOWER    ||
-                     m_type == OBJECT_NEST     ||
-                     m_type == OBJECT_RESEARCH ||
-                     m_type == OBJECT_RADAR    ||
-                     m_type == OBJECT_INFO     ||
-                     m_type == OBJECT_ENERGY   ||
-                     m_type == OBJECT_LABO     ||
                      m_type == OBJECT_NUCLEAR  ||
                      m_type == OBJECT_PARA     ||
-                     m_type == OBJECT_SAFE     ||
-                     m_type == OBJECT_HUSTON   ||
+                     m_type == OBJECT_COMPUTER ||
+                     m_type == OBJECT_REPAIR   ||
+                     m_type == OBJECT_SWEET    ||
+                     m_type == OBJECT_DOOR1    ||
+                     m_type == OBJECT_DOOR2    ||
+                     m_type == OBJECT_DOOR3    ||
+                     m_type == OBJECT_DOOR4    ||
+                     m_type == OBJECT_DOOR5    ||
+                     m_type == OBJECT_DOCK     ||
+                     m_type == OBJECT_REMOTE   ||
+                     m_type == OBJECT_STAND    ||
+                     m_type == OBJECT_GENERATOR||
                      m_type == OBJECT_START    ||
-                     m_type == OBJECT_END      )  // batiment ?
+                     m_type == OBJECT_END      ||
+                     m_type == OBJECT_SUPPORT  )  // batiment ?
+           {
+               pyroType = PT_FRAGT;
+           }
+           else if ( m_type == OBJECT_MOBILEtg )
            {
                pyroType = PT_FRAGT;
            }
-           else if ( m_type == OBJECT_MOBILEtg ||
-                     m_type == OBJECT_TEEN28    ||  // bouteille ?
-                     m_type == OBJECT_TEEN31    )   // basket ?
+           else if ( m_type == OBJECT_MARK )
            {
                pyroType = PT_FRAGT;
            }
@@ -746,7 +726,6 @@ BOOL CObject::ExploObject(ExploType type, float force, float decay)
        {
            m_brain->StopProgram();
        }
-       m_main->SaveOneScript(this);
    }
 
    if ( shield > 0.0f )  return FALSE;  // pas encore mort
@@ -757,23 +736,19 @@ BOOL CObject::ExploObject(ExploType type, float force, float decay)
        m_camera->SetType(CAMERA_EXPLO);
        m_main->DeselectAll();
    }
-   DeleteDeselList(this);
    
    if ( m_botVar != 0 )
    {
        if ( m_type == OBJECT_STONE   ||
             m_type == OBJECT_URANIUM ||
             m_type == OBJECT_METAL   ||
-            m_type == OBJECT_POWER   ||
+            m_type == OBJECT_BARREL  ||
+            m_type == OBJECT_BARRELa ||
             m_type == OBJECT_ATOMIC  ||
             m_type == OBJECT_BULLET  ||
             m_type == OBJECT_BBOX    ||
-            m_type == OBJECT_TNT     ||
-            m_type == OBJECT_SCRAP1  ||
-            m_type == OBJECT_SCRAP2  ||
-            m_type == OBJECT_SCRAP3  ||
-            m_type == OBJECT_SCRAP4  ||
-            m_type == OBJECT_SCRAP5  )  // (*)
+            m_type == OBJECT_TNT     ||  // (*)
+           (m_type >= OBJECT_ROADSIGN1 && m_type <= OBJECT_ROADSIGN30) )
        {
            m_botVar->SetUserPtr(OBJECTDELETED);
        }
@@ -787,6 +762,194 @@ BOOL CObject::ExploObject(ExploType type, float force, float decay)
 //     de fonctionner comme si de rien était !
 
 
+// Crée des morceaux d'objet qui partent.
+// Retourne FALSE si la voiture est détruite.
+
+BOOL CObject::ExploPart(int total, float force)
+{
+   D3DVECTOR   p1, p2, p3, p4;
+   CPyro*      pyro;
+   float       dim;
+   int         i, part, param;
+
+   // Crée une tache d'huile au sol.
+   if ( force > 0.2f &&
+        m_objectPart[0].position.y > m_water->RetLevel() )
+   {
+       dim = force*20.0f;
+       if ( dim > 20.0f )  dim = 20.0f;
+       p1 = p2 = p3 = p4 = RetPosition(0);
+       p1.x -= dim;  p1.z += dim;
+       p2.x += dim;  p2.z += dim;
+       p3.x -= dim;  p3.z -= dim;
+       p4.x += dim;  p4.z -= dim;
+       m_particule->CreateWheelTrace(p1, p2, p3, p4, PARTITRACE4);
+   }
+
+   if ( total > 1 && RetSelect() )
+   {
+       m_camera->StartOver(OE_CRASH, RetPosition(0), force);
+   }
+
+   for ( i=0 ; i<total ; i++ )
+   {
+       part = m_motion->RetRemovePart(param);
+       if ( part == -1 )
+       {
+           if ( total == 999 )  return TRUE;
+
+           pyro = new CPyro(m_iMan);
+           pyro->Create(PT_EXPLOS, this, 1.0f);
+
+           pyro = new CPyro(m_iMan);
+           pyro->Create(PT_BURNS, this, 1.0f);
+
+           DetachPart(3);
+           DetachPart(4);
+           DetachPart(5);
+           DetachPart(6);  // 4 roues
+           DetachPart(7);  // moteur
+           DetachPart(8);  // volant
+
+           if ( m_fret != 0 )  // transporte un robot ?
+           {
+               pyro = new CPyro(m_iMan);
+               pyro->Create(PT_EXPLOT, m_fret, 1.0f);
+           }
+
+           SetDead(TRUE);
+           m_camera->SetType(CAMERA_BACK);
+           return FALSE;  // voiture détruite
+       }
+
+       DetachPiece(part, param);
+   }
+   return TRUE;  // pas encore détruite
+}
+
+// Crée un morceau d'objet qui part.
+
+BOOL CObject::DetachPart(int part, D3DVECTOR speed)
+{
+   D3DVECTOR   pos, min, max;
+   FPOINT      dim, p;
+   float       speedx, speedy, duration, mass;
+   int         channel, objRank;
+
+   if ( !FlatParent(part) )  return FALSE;
+
+   pos = RetPosition(part);
+   pos.y += 2.0f;
+
+   if ( speed.x == 0.0f && speed.y == 0.0f && speed.z == 0.0f )
+   {
+       if ( m_physics == 0 )
+       {
+           speedx = 0.0f;
+           speedy = 0.0f;
+       }
+       else
+       {
+           speedx = m_physics->RetLinMotionX(MO_REASPEED)/m_physics->RetLinMotionX(MO_ADVSPEED);
+           speedy = m_physics->RetCirMotionY(MO_REASPEED)/m_physics->RetCirMotionY(MO_ADVSPEED);
+       }
+
+       speed.x = speedx*0.8f;
+       speed.y = 10.0f+speedx*10.0f;
+       speed.z = speedy*0.8f;
+       p = RotatePoint(-RetAngleY(part), FPOINT(speed.x, speed.z));
+       speed.x = p.x;
+       speed.z = p.y;
+       speed *= 2.0f;
+   }
+
+   objRank = RetObjectRank(part);
+   m_engine->GetBBox(objRank, min, max);
+   dim.x = Length(min, max)/2.0f;
+   dim.y = dim.x;
+   duration = 6.0f+Rand()*8.0f;
+   mass = 12.0f+Rand()*16.0f;
+
+   channel = m_particule->CreatePart(pos, speed, dim, PARTIPART, duration, mass, 10.0f);
+   if ( channel != -1 )
+   {
+       SetMasterParticule(part, channel);
+   }
+   return TRUE;
+}
+
+// Crée un morceau d'objet qui devient une pièce indépendante.
+
+BOOL CObject::DetachPiece(int part, int param, D3DVECTOR speed)
+{
+   CObject*    pObj;
+   CPyro*      pyro;
+   D3DVECTOR   pos, angle, min, max, dim;
+   float       radius;
+   int         objRank;
+
+   if ( !FlatParent(part) )  return FALSE;
+   pos = RetPosition(part);
+   angle = RetAngle(0);
+
+   objRank = RetObjectRank(part);
+   m_engine->GetBBox(objRank, min, max);
+   dim = max-min;
+
+   m_objectPart[part].bUsed = FALSE;  // supprime pièce à la voiture
+   UpdateTotalPart();
+
+   pObj = new CObject(m_iMan);
+   pObj->SetType(OBJECT_PIECE);
+   m_engine->SetObjectType(objRank, TYPEFIX);
+   pObj->SetObjectRank(0, objRank);
+   pObj->SetPosition(0, pos);
+   pObj->SetAngle(0, angle);
+
+   radius = (dim.x+dim.y+dim.z)/3.0f/2.0f;
+   pObj->CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), radius, SOUND_CHOCo, 0.45f);
+   pObj->CreateShadowCircle(radius*1.5f, 0.3f);
+
+   pyro = new CPyro(m_iMan);
+   pyro->Create(PT_PIECE, pObj, 1.0f, param);  // voltige
+
+   return TRUE;
+}
+
+// Fait exploser un morceau d'objet.
+
+BOOL CObject::ExploPiece(int part)
+{
+   CObject*    pObj;
+   CPyro*      pyro;
+   D3DVECTOR   pos, angle, min, max, dim;
+   int         objRank;
+
+   if ( !FlatParent(part) )  return FALSE;
+   pos = RetPosition(part);
+   angle = RetAngle(0);
+
+   objRank = RetObjectRank(part);
+   m_engine->GetBBox(objRank, min, max);
+   dim = max-min;
+
+   m_objectPart[part].bUsed = FALSE;  // supprime pièce à la voiture
+   UpdateTotalPart();
+
+   pObj = new CObject(m_iMan);
+   pObj->SetType(OBJECT_PIECE);
+   m_engine->SetObjectType(objRank, TYPEFIX);
+   pObj->SetObjectRank(0, objRank);
+   pObj->SetPosition(0, pos);
+   pObj->SetAngle(0, angle);
+
+   pyro = new CPyro(m_iMan);
+   pyro->Create(PT_FRAGT, pObj);  // explosion
+
+   return TRUE;
+}
+
+
 // Initialise une nouvelle partie.
 
 void CObject::InitPart(int part)
@@ -898,46 +1061,34 @@ void CObject::SetObjectParent(int part, int parent)
 void CObject::SetType(ObjectType type)
 {
    m_type = type;
-   strcpy(m_name, RetObjectName(m_type));
+}
 
-   if ( m_type == OBJECT_MOBILErs )
-   {
-       m_param = 1.0f;  // bouclier au maximum par défaut
-   }
+ObjectType CObject::RetType()
+{
+   return m_type;
+}
 
-   if ( m_type == OBJECT_ATOMIC )
-   {
-       m_capacity = 10.0f;
-   }
-   else
-   {
-       m_capacity = 1.0f;
-   }
+// Spécifie le modèle de voiture.
 
-   if ( m_type == OBJECT_MOBILEwc ||
-        m_type == OBJECT_MOBILEtc ||
-        m_type == OBJECT_MOBILEfc ||
-        m_type == OBJECT_MOBILEic ||
-        m_type == OBJECT_MOBILEwi ||
-        m_type == OBJECT_MOBILEti ||
-        m_type == OBJECT_MOBILEfi ||
-        m_type == OBJECT_MOBILEii ||
-        m_type == OBJECT_MOBILErc )  // véhicule canon ?
-   {
-       m_cameraType = CAMERA_ONBOARD;
-   }
+void CObject::SetModel(int model)
+{
+   m_model = model;
 }
 
-ObjectType CObject::RetType()
+int CObject::RetModel()
 {
-   return m_type;
+   return m_model;
 }
 
-char* CObject::RetName()
+void CObject::SetSubModel(int subModel)
 {
-   return m_name;
+   m_subModel = subModel;
 }
 
+int CObject::RetSubModel()
+{
+   return m_subModel;
+}
 
 // Choix de l'option à utiliser.
 
@@ -970,441 +1121,501 @@ int CObject::RetID()
 }
 
 
-// Sauve tous les paramètres de l'objet.
 
-BOOL CObject::Write(char *line)
-{
-   D3DVECTOR   pos;
-   Info        info;
-   char        name[100];
-   float       value;
-   int         i;
+// Cherche le nième fils d'un père.
 
-   sprintf(name, " camera=%s", GetCamera(RetCameraType()));
-   strcat(line, name);
+int CObject::SearchDescendant(int parent, int n)
+{
+   int     i;
 
-   if ( RetCameraLock() != 0 )
+   for ( i=0 ; i<m_totalPart ; i++ )
    {
-       sprintf(name, " cameraLock=%d", RetCameraLock());
-       strcat(line, name);
-   }
+       if ( !m_objectPart[i].bUsed )  continue;
 
-   if ( RetEnergy() != 0.0f )
-   {
-       sprintf(name, " energy=%.2f", RetEnergy());
-       strcat(line, name);
+       if ( parent == m_objectPart[i].parentPart )
+       {
+           if ( n-- == 0 )  return i;
+       }
    }
+   return -1;
+}
 
-   if ( RetCapacity() != 1.0f )
-   {
-       sprintf(name, " capacity=%.2f", RetCapacity());
-       strcat(line, name);
-   }
 
-   if ( RetShield() != 1.0f )
-   {
-       sprintf(name, " shield=%.2f", RetShield());
-       strcat(line, name);
-   }
+// Supprime toutes les sphères utilisées pour les collisions.
 
-   if ( RetRange() != 1.0f )
-   {
-       sprintf(name, " range=%.2f", RetRange());
-       strcat(line, name);
-   }
+void CObject::FlushCrashShere()
+{
+   m_crashSphereUsed = 0;
+}
 
-   if ( RetSelectable() != 1 )
-   {
-       sprintf(name, " selectable=%d", RetSelectable());
-       strcat(line, name);
-   }
+// Ajoute une nouvelle sphère.
 
-   if ( RetEnable() != 1 )
-   {
-       sprintf(name, " enable=%d", RetEnable());
-       strcat(line, name);
-   }
+int CObject::CreateCrashSphere(D3DVECTOR pos, float radius, Sound sound,
+                              float hardness)
+{
+   float   zoom;
 
-   if ( RetFixed() != 0 )
-   {
-       sprintf(name, " fixed=%d", RetFixed());
-       strcat(line, name);
-   }
+   if ( m_crashSphereUsed >= MAXCRASHSPHERE )  return -1;
 
-   if ( RetClip() != 1 )
-   {
-       sprintf(name, " clip=%d", RetClip());
-       strcat(line, name);
-   }
+   zoom = RetZoomX(0);
+   m_crashSpherePos[m_crashSphereUsed] = pos;
+   m_crashSphereRadius[m_crashSphereUsed] = radius*zoom;
+   m_crashSphereHardness[m_crashSphereUsed] = hardness;
+   m_crashSphereSound[m_crashSphereUsed] = sound;
+   return m_crashSphereUsed++;
+}
 
-   if ( RetLock() != 0 )
-   {
-       sprintf(name, " lock=%d", RetLock());
-       strcat(line, name);
-   }
+// Déplace une sphère.
 
-   if ( RetProxyActivate() != 0 )
-   {
-       sprintf(name, " proxyActivate=%d", RetProxyActivate());
-       strcat(line, name);
+void CObject::MoveCrashSphere(int rank, D3DVECTOR pos, float radius)
+{
+   m_crashSpherePos[rank] = pos;
+   m_crashSphereRadius[rank] = radius;
+}
 
-       sprintf(name, " proxyDistance=%.2f", RetProxyDistance()/g_unit);
-       strcat(line, name);
-   }
+// Retourne le nombre de sphères.
 
-   if ( RetMagnifyDamage() != 1.0f )
-   {
-       sprintf(name, " magnifyDamage=%.2f", RetMagnifyDamage());
-       strcat(line, name);
-   }
+int CObject::RetCrashSphereTotal()
+{
+   return m_crashSphereUsed;
+}
 
-   if ( RetGunGoalV() != 0.0f )
-   {
-       sprintf(name, " aimV=%.2f", RetGunGoalV());
-       strcat(line, name);
-   }
-   if ( RetGunGoalH() != 0.0f )
-   {
-       sprintf(name, " aimH=%.2f", RetGunGoalH());
-       strcat(line, name);
-   }
+// Retourne une sphère pour les collisions.
+// La position est absolue dans le monde.
 
-   if ( RetParam() != 0.0f )
+BOOL CObject::GetCrashSphere(int rank, D3DVECTOR &pos, float &radius)
+{
+   if ( rank < 0 || rank >= m_crashSphereUsed )
    {
-       sprintf(name, " param=%.2f", RetParam());
-       strcat(line, name);
+       pos = m_objectPart[0].position;
+       radius = 0.0f;
+       return FALSE;
    }
 
-   if ( RetResetCap() != 0 )
+   // Retourne la sphère pour les collisions, qui ne tient pas
+   // compte de l'inclinaison du véhicule. Ceci est nécessaire
+   // pour les collisions avec les véhicules, afin de ne pas tenir
+   // compte de SetInclinaison, par exemple.
+   // La sphère doit avoir obligatoirement un centre (0;y;0).
+   if ( rank == 0 && m_crashSphereUsed == 1 &&
+        m_crashSpherePos[0].x == 0.0f &&
+        m_crashSpherePos[0].z == 0.0f )
    {
-       sprintf(name, " resetCap=%d", RetResetCap());
-       strcat(line, name);
-
-       pos = RetResetPosition()/g_unit;
-       sprintf(name, " resetPos=%.2f;%.2f;%.2f", pos.x, pos.y, pos.z);
-       strcat(line, name);
-
-       pos = RetResetAngle()/(PI/180.0f);
-       sprintf(name, " resetAngle=%.2f;%.2f;%.2f", pos.x, pos.y, pos.z);
-       strcat(line, name);
-
-       sprintf(name, " resetRun=%d", RetResetRun());
-       strcat(line, name);
+       pos = m_objectPart[0].position + m_crashSpherePos[0];
+       radius = m_crashSphereRadius[0];
+       return TRUE;
    }
 
-   if ( m_bVirusMode != 0 )
+   if ( m_objectPart[0].bTranslate ||
+        m_objectPart[0].bRotate    )
    {
-       sprintf(name, " virusMode=%d", m_bVirusMode);
-       strcat(line, name);
+       UpdateTransformObject();
    }
+   pos = Transform(m_objectPart[0].matWorld, m_crashSpherePos[rank]);
+   radius = m_crashSphereRadius[rank];
+   return TRUE;
+}
 
-   if ( m_virusTime != 0.0f )
-   {
-       sprintf(name, " virusTime=%.2f", m_virusTime);
-       strcat(line, name);
-   }
+// Retourne la dureté d'une sphère.
 
-   // Met les infos dans borne (OBJECT_INFO).
-   for ( i=0 ; i<m_infoTotal ; i++ )
-   {
-       info = RetInfo(i);
-       if ( info.name[0] == 0 )  break;
+Sound CObject::RetCrashSphereSound(int rank)
+{
+   return m_crashSphereSound[rank];
+}
 
-       sprintf(name, " info%d=\"%s=%.2f\"", i+1, info.name, info.value);
-       strcat(line, name);
-   }
+// Retourne la dureté d'une sphère.
 
-   // Met les paramètres de la ligne de commande.
-   for ( i=0 ; i<OBJECTMAXCMDLINE ; i++ )
-   {
-       value = RetCmdLine(i);
-       if ( value == NAN )  break;
+float CObject::RetCrashSphereHardness(int rank)
+{
+   return m_crashSphereHardness[rank];
+}
 
-       if ( i == 0 )  sprintf(name, " cmdline=%.2f", value);
-       else           sprintf(name, ";%.2f", value);
-       strcat(line, name);
-   }
-   
-   if ( m_motion != 0 )
-   {
-       m_motion->Write(line);
-   }
+// Supprime une sphère.
 
-   if ( m_brain != 0 )
-   {
-       m_brain->Write(line);
-   }
+void CObject::DeleteCrashSphere(int rank)
+{
+   int     i;
 
-   if ( m_physics != 0 )
-   {
-       m_physics->Write(line);
-   }
+   if ( rank < 0 || rank >= m_crashSphereUsed )  return;
 
-   if ( m_auto != 0 )
+   for ( i=rank+1 ; i<MAXCRASHSPHERE ; i++ )
    {
-       m_auto->Write(line);
+       m_crashSpherePos[i-1]    = m_crashSpherePos[i];
+       m_crashSphereRadius[i-1] = m_crashSphereRadius[i];
    }
-
-   return TRUE;
+   m_crashSphereUsed --;
 }
 
-// Restitue tous les paramètres de l'objet.
+// Spécifie la sphère globale, relative à l'objet.
 
-BOOL CObject::Read(char *line)
+void CObject::SetGlobalSphere(D3DVECTOR pos, float radius)
 {
-   D3DVECTOR   pos, dir;
-   Info        info;
-   CameraType  cType;
-   char        op[20];
-   char        text[100];
-   char*       p;
-   float       value;
-   int         i;
+   float   zoom;
 
-   cType = OpCamera(line, "camera");
-   if ( cType != CAMERA_NULL )
-   {
-       SetCameraType(cType);
-   }
-
-   SetCameraLock(OpInt(line, "cameraLock", 0));
-   SetEnergy(OpFloat(line, "energy", 0.0f));
-   SetCapacity(OpFloat(line, "capacity", 1.0f));
-   SetShield(OpFloat(line, "shield", 1.0f));
-   SetRange(OpFloat(line, "range", 1.0f));
-   SetSelectable(OpInt(line, "selectable", 1));
-   SetEnable(OpInt(line, "enable", 1));
-   SetFixed(OpInt(line, "fixed", 0));
-   SetClip(OpInt(line, "clip", 1));
-   SetLock(OpInt(line, "lock", 0));
-   SetProxyActivate(OpInt(line, "proxyActivate", 0));
-   SetProxyDistance(OpFloat(line, "proxyDistance", 15.0f)*g_unit);
-   SetRange(OpFloat(line, "range", 30.0f));
-   SetMagnifyDamage(OpFloat(line, "magnifyDamage", 1.0f));
-   SetGunGoalV(OpFloat(line, "aimV", 0.0f));
-   SetGunGoalH(OpFloat(line, "aimH", 0.0f));
-   SetParam(OpFloat(line, "param", 0.0f));
-   SetResetCap((ResetCap)OpInt(line, "resetCap", 0));
-   SetResetPosition(OpDir(line, "resetPos")*g_unit);
-   SetResetAngle(OpDir(line, "resetAngle")*(PI/180.0f));
-   SetResetRun(OpInt(line, "resetRun", 0));
-   m_bBurn = OpInt(line, "burnMode", 0);
-   m_bVirusMode = OpInt(line, "virusMode", 0);
-   m_virusTime = OpFloat(line, "virusTime", 0.0f);
-
-   // Met les infos dans borne (OBJECT_INFO).
-   for ( i=0 ; i<OBJECTMAXINFO ; i++ )
-   {
-       sprintf(op, "info%d", i+1);
-       OpString(line, op, text);
-       if ( text[0] == 0 )  break;
-       p = strchr(text, '=');
-       if ( p == 0 )  break;
-       *p = 0;
-       strcpy(info.name, text);
-       sscanf(p+1, "%f", &info.value);
-       SetInfo(i, info);
-   }
-
-   // Met les paramètres de la ligne de commande.
-   p = SearchOp(line, "cmdline");
-   for ( i=0 ; i<OBJECTMAXCMDLINE ; i++ )
-   {
-       value = GetFloat(p, i, NAN);
-       if ( value == NAN )  break;
-       SetCmdLine(i, value);
-   }
-   
-   if ( m_motion != 0 )
-   {
-       m_motion->Read(line);
-   }
+   zoom = RetZoomX(0);
+   m_globalSpherePos    = pos;
+   m_globalSphereRadius = radius*zoom;
+}
 
-   if ( m_brain != 0 )
-   {
-       m_brain->Read(line);
-   }
+// Retourne la sphère globale, dans l'univers.
 
-   if ( m_physics != 0 )
-   {
-       m_physics->Read(line);
-   }
+void CObject::GetGlobalSphere(D3DVECTOR &pos, float &radius)
+{
+   pos = Transform(m_objectPart[0].matWorld, m_globalSpherePos);
+   radius = m_globalSphereRadius;
+}
 
-   if ( m_auto != 0 )
-   {
-       m_auto->Read(line);
-   }
 
-   return TRUE;
+// Spécifie la sphère de bousculade, relative à l'objet.
+
+void CObject::SetJotlerSphere(D3DVECTOR pos, float radius)
+{
+   m_jotlerSpherePos    = pos;
+   m_jotlerSphereRadius = radius;
 }
 
+// Retourne la sphère de bousculade, dans l'univers.
+
+void CObject::GetJotlerSphere(D3DVECTOR &pos, float &radius)
+{
+   pos = Transform(m_objectPart[0].matWorld, m_jotlerSpherePos);
+   radius = m_jotlerSphereRadius;
+}
 
 
-// Cherche le nième fils d'un père.
+// Supprime toutes les lignes utilisées pour les collisions.
 
-int CObject::SearchDescendant(int parent, int n)
+void CObject::FlushCrashLine()
 {
-   int     i;
+   m_crashLineUsed = 0;
+   m_crashLineMin = FPOINT( 10000.0f,  10000.0f);
+   m_crashLineMax = FPOINT(-10000.0f, -10000.0f);
+   m_crashLineHeight = NAN;
+}
 
-   for ( i=0 ; i<m_totalPart ; i++ )
-   {
-       if ( !m_objectPart[i].bUsed )  continue;
+// Spécifie la hauteur de l'objet (à partir du sol).
 
-       if ( parent == m_objectPart[i].parentPart )
-       {
-           if ( n-- == 0 )  return i;
-       }
-   }
-   return -1;
+void CObject::SetCrashLineHeight(float h)
+{
+   m_crashLineHeight = h;
 }
 
+// Retourne la hauteur de l'objet.
 
-// Supprime toutes les sphères utilisées pour les collisions.
-
-void CObject::FlushCrashShere()
+float CObject::RetCrashLineHeight()
 {
-   m_crashSphereUsed = 0;
+   return m_crashLineHeight;
 }
 
-// Ajoute une nouvelle sphère.
+// Ajoute une nouvelle ligne.
 
-int CObject::CreateCrashSphere(D3DVECTOR pos, float radius, Sound sound,
-                              float hardness)
+int CObject::CreateCrashLine(FPOINT pos, Sound sound, float hardness, BOOL bNew)
 {
-   float   zoom;
+#if 0
+   D3DVECTOR   p;
+   float       zoom;
 
-   if ( m_crashSphereUsed >= MAXCRASHSPHERE )  return -1;
+   if ( m_crashLineUsed >= MAXCRASHLINE )  return -1;
 
    zoom = RetZoomX(0);
-   m_crashSpherePos[m_crashSphereUsed] = pos;
-   m_crashSphereRadius[m_crashSphereUsed] = radius*zoom;
-   m_crashSphereHardness[m_crashSphereUsed] = hardness;
-   m_crashSphereSound[m_crashSphereUsed] = sound;
-   return m_crashSphereUsed++;
-}
+   m_crashLinePos[m_crashLineUsed] = pos;
+   m_crashLineNew[m_crashLineUsed] = bNew;
+   m_crashLineHardness[m_crashLineUsed] = hardness;
+   m_crashLineSound[m_crashLineUsed] = sound;
 
-// Retourne le nombre de sphères.
+   if ( m_objectPart[0].bTranslate ||
+        m_objectPart[0].bRotate    )
+   {
+       UpdateTransformObject();
+   }
+   p.x = pos.x;
+   p.z = pos.y;
+   p.y = m_objectPart[0].position.y;
+   p = Transform(m_objectPart[0].matWorld, p);
+   if ( p.x < m_crashLineMin.x )  m_crashLineMin.x = p.x;
+   if ( p.z < m_crashLineMin.y )  m_crashLineMin.y = p.z;
+   if ( p.x > m_crashLineMax.x )  m_crashLineMax.x = p.x;
+   if ( p.z > m_crashLineMax.y )  m_crashLineMax.y = p.z;
 
-int CObject::RetCrashSphereTotal()
-{
-   return m_crashSphereUsed;
+   return m_crashLineUsed++;
+#else
+   FPOINT      p;
+   float       zoom;
+
+   if ( m_crashLineUsed >= MAXCRASHLINE )  return -1;
+
+   zoom = RetZoomX(0);
+   m_crashLinePos[m_crashLineUsed] = pos;
+   m_crashLineNew[m_crashLineUsed] = bNew;
+   m_crashLineHardness[m_crashLineUsed] = hardness;
+   m_crashLineSound[m_crashLineUsed] = sound;
+
+   p = RotatePoint(-m_objectPart[0].angle.y, pos);
+   p.x += m_objectPart[0].position.x;
+   p.y += m_objectPart[0].position.z;
+   if ( p.x < m_crashLineMin.x )  m_crashLineMin.x = p.x;
+   if ( p.y < m_crashLineMin.y )  m_crashLineMin.y = p.y;
+   if ( p.x > m_crashLineMax.x )  m_crashLineMax.x = p.x;
+   if ( p.y > m_crashLineMax.y )  m_crashLineMax.y = p.y;
+
+   return m_crashLineUsed++;
+#endif
 }
 
-// Retourne une sphère pour les collisions.
-// La position est absolue dans le monde.
+// Met à jour la bbox.
 
-BOOL CObject::GetCrashSphere(int rank, D3DVECTOR &pos, float &radius)
+void CObject::UpdateBBoxCrashLine()
 {
-   if ( rank < 0 || rank >= m_crashSphereUsed )
+#if 0
+   D3DVECTOR   p;
+   int         i;
+
+   if ( m_objectPart[0].bTranslate ||
+        m_objectPart[0].bRotate    )
    {
-       pos = m_objectPart[0].position;
-       radius = 0.0f;
-       return FALSE;
+       UpdateTransformObject();
    }
 
-   // Retourne la sphère pour les collisions, qui ne tient pas
-   // compte de l'inclinaison du véhicule. Ceci est nécessaire
-   // pour les collisions avec les véhicules, afin de ne pas tenir
-   // compte de SetInclinaison, par exemple.
-   // La sphère doit avoir obligatoirement un centre (0;y;0).
-   if ( rank == 0 && m_crashSphereUsed == 1 &&
-        m_crashSpherePos[0].x == 0.0f &&
-        m_crashSpherePos[0].z == 0.0f )
+   m_crashLineMin = FPOINT( 10000.0f,  10000.0f);
+   m_crashLineMax = FPOINT(-10000.0f, -10000.0f);
+
+   for ( i=0 ; i<m_crashLineUsed ; i++ )
    {
-       pos = m_objectPart[0].position + m_crashSpherePos[0];
-       radius = m_crashSphereRadius[0];
-       return TRUE;
+       p.x = m_crashLinePos[i].x;
+       p.z = m_crashLinePos[i].y;
+       p.y = m_objectPart[0].position.y;
+       p = Transform(m_objectPart[0].matWorld, p);
+       if ( p.x < m_crashLineMin.x )  m_crashLineMin.x = p.x;
+       if ( p.z < m_crashLineMin.y )  m_crashLineMin.y = p.z;
+       if ( p.x > m_crashLineMax.x )  m_crashLineMax.x = p.x;
+       if ( p.z > m_crashLineMax.y )  m_crashLineMax.y = p.z;
    }
+#else
+   FPOINT      p;
+   int         i;
 
    if ( m_objectPart[0].bTranslate ||
         m_objectPart[0].bRotate    )
    {
        UpdateTransformObject();
    }
-   pos = Transform(m_objectPart[0].matWorld, m_crashSpherePos[rank]);
-   radius = m_crashSphereRadius[rank];
-   return TRUE;
-}
 
-// Retourne la dureté d'une sphère.
+   m_crashLineMin = FPOINT( 10000.0f,  10000.0f);
+   m_crashLineMax = FPOINT(-10000.0f, -10000.0f);
 
-Sound CObject::RetCrashSphereSound(int rank)
-{
-   return m_crashSphereSound[rank];
+   for ( i=0 ; i<m_crashLineUsed ; i++ )
+   {
+       p = RotatePoint(-m_objectPart[0].angle.y, m_crashLinePos[i]);
+       p.x += m_objectPart[0].position.x;
+       p.y += m_objectPart[0].position.z;
+       if ( p.x < m_crashLineMin.x )  m_crashLineMin.x = p.x;
+       if ( p.y < m_crashLineMin.y )  m_crashLineMin.y = p.y;
+       if ( p.x > m_crashLineMax.x )  m_crashLineMax.x = p.x;
+       if ( p.y > m_crashLineMax.y )  m_crashLineMax.y = p.y;
+   }
+#endif
 }
 
-// Retourne la dureté d'une sphère.
+// Retourne le nombre de lignes.
 
-float CObject::RetCrashSphereHardness(int rank)
+int CObject::RetCrashLineTotal()
 {
-   return m_crashSphereHardness[rank];
+   return m_crashLineUsed;
 }
 
-// Supprime une sphère.
+// Retourne une ligne pour les collisions.
+// La position est absolue dans le monde.
 
-void CObject::DeleteCrashSphere(int rank)
+BOOL CObject::GetCrashLine(int rank, FPOINT &pos, BOOL &bNew)
 {
-   int     i;
+#if 0
+   D3DVECTOR   p;
 
-   if ( rank < 0 || rank >= m_crashSphereUsed )  return;
+   if ( rank >= m_crashLineUsed )  return FALSE;
 
-   for ( i=rank+1 ; i<MAXCRASHSPHERE ; i++ )
+   if ( m_objectPart[0].bTranslate ||
+        m_objectPart[0].bRotate    )
    {
-       m_crashSpherePos[i-1]    = m_crashSpherePos[i];
-       m_crashSphereRadius[i-1] = m_crashSphereRadius[i];
+       UpdateTransformObject();
    }
-   m_crashSphereUsed --;
-}
+   p.x = m_crashLinePos[rank].x;
+   p.z = m_crashLinePos[rank].y;
+   p.y = 0.0f;
+   p = Transform(m_objectPart[0].matWorld, p);
+   pos.x = p.x;
+   pos.y = p.z;
 
-// Spécifie la sphère globale, relative à l'objet.
+   bNew = m_crashLineNew[rank];
+   return TRUE;
+#else
+   if ( rank >= m_crashLineUsed )  return FALSE;
 
-void CObject::SetGlobalSphere(D3DVECTOR pos, float radius)
-{
-   float   zoom;
+   pos = RotatePoint(-m_objectPart[0].angle.y, m_crashLinePos[rank]);
+   pos.x += m_objectPart[0].position.x;
+   pos.y += m_objectPart[0].position.z;
 
-   zoom = RetZoomX(0);
-   m_globalSpherePos    = pos;
-   m_globalSphereRadius = radius*zoom;
+   bNew = m_crashLineNew[rank];
+   return TRUE;
+#endif
 }
 
-// Retourne la sphère globale, dans l'univers.
+// Retourne la dureté d'une ligne.
 
-void CObject::GetGlobalSphere(D3DVECTOR &pos, float &radius)
+Sound CObject::RetCrashLineSound(int rank)
 {
-   pos = Transform(m_objectPart[0].matWorld, m_globalSpherePos);
-   radius = m_globalSphereRadius;
+   return m_crashLineSound[rank];
 }
 
+// Retourne la dureté d'une ligne.
 
-// Spécifie la sphère de bousculade, relative à l'objet.
-
-void CObject::SetJotlerSphere(D3DVECTOR pos, float radius)
+float CObject::RetCrashLineHardness(int rank)
 {
-   m_jotlerSpherePos    = pos;
-   m_jotlerSphereRadius = radius;
+   return m_crashLineHardness[rank];
 }
 
-// Retourne la sphère de bousculade, dans l'univers.
+// Retourne la bbox de toutes les lignes.
 
-void CObject::GetJotlerSphere(D3DVECTOR &pos, float &radius)
+void CObject::RetCrashLineBBox(FPOINT &min, FPOINT &max)
 {
-   pos = Transform(m_objectPart[0].matWorld, m_jotlerSpherePos);
-   radius = m_jotlerSphereRadius;
+   min = m_crashLineMin;
+   max = m_crashLineMax;
 }
 
+// Indique s'il s'agit d'un objet fusionnable.
+// L'objet doit obligatoirement être indestructible !
+
+BOOL CObject::IsCrashLineFusion()
+{
+   return ( m_type == OBJECT_BARRIER6  ||
+            m_type == OBJECT_BARRIER7  ||
+            m_type == OBJECT_BARRIER8  ||
+            m_type == OBJECT_BARRIER9  ||
+            m_type == OBJECT_BARRIER10 ||
+            m_type == OBJECT_BARRIER11 ||
+            m_type == OBJECT_BARRIER12 ||
+            m_type == OBJECT_BARRIER14 ||
+            m_type == OBJECT_BARRIER15 ||
+            m_type == OBJECT_BARRIER16 );
+}
 
-// Spécifie le rayon du bouclier.
+// Essaye de fusionner les lignes de collision de l'objet courant
+// avec un autre. Ainsi, plusieurs barrières mises bout à bout ne
+// formeront plus qu'un obstacle, regroupé dans la première barrière
+// crée. L'objet courant n'a alors plus aucune ligne de collision.
 
-void CObject::SetShieldRadius(float radius)
+void CObject::CrashLineFusion()
 {
-   m_shieldRadius = radius;
+   CObject*    pObj;
+   D3DVECTOR   iCenter, oCenter;
+   FPOINT      iPos[4], oPos[4];
+   float       iLen, oLen, iWidth, oWidth, h;
+   int         i, j;
+   BOOL        bNew;
+
+   if ( !IsCrashLineFusion() )  return;
+   if ( RetCrashLineTotal() != 5 )  return;
+
+   iLen = Length(m_crashLinePos[0], m_crashLinePos[1]);
+   iWidth = Length(m_crashLinePos[1], m_crashLinePos[2]);
+
+   for ( j=0 ; j<4 ; j++ )
+   {
+       if ( !GetCrashLine(j, iPos[j], bNew) )  return;
+   }
+
+   for ( i=0 ; i<1000000 ; i++ )
+   {
+       pObj = (CObject*)m_iMan->SearchInstance(CLASS_OBJECT, i);
+       if ( pObj == 0 )  break;
+
+       if ( !pObj->IsCrashLineFusion() )  continue;
+       if ( pObj->RetCrashLineTotal() != 5 )  continue;
+       if ( pObj->RetAngleY(0) != RetAngleY(0) )  continue;
+
+       oLen = Length(pObj->m_crashLinePos[0], pObj->m_crashLinePos[1]);
+       oWidth = Length(pObj->m_crashLinePos[1], pObj->m_crashLinePos[2]);
+
+       if ( iWidth != oWidth )  continue;
+
+       for ( j=0 ; j<4 ; j++ )
+       {
+           if ( !pObj->GetCrashLine(j, oPos[j], bNew) )  continue;
+       }
+
+       if ( Abs(iPos[1].x-oPos[0].x) < 5.0f &&
+            Abs(iPos[1].y-oPos[0].y) < 5.0f &&
+            Abs(iPos[2].x-oPos[3].x) < 5.0f &&
+            Abs(iPos[2].y-oPos[3].y) < 5.0f )
+       {
+           pObj->m_crashLinePos[0].x -= iLen;
+           pObj->m_crashLinePos[3].x -= iLen;
+           pObj->m_crashLinePos[4].x -= iLen;
+           pObj->UpdateBBoxCrashLine();
+           if ( pObj->RetCrashLineHeight() != NAN )
+           {
+               iCenter = RetPosition(0);
+               oCenter = pObj->RetPosition(0);
+               h = iCenter.y-oCenter.y;
+               if ( h < 0.0f)  h = 0.0f;
+               pObj->SetCrashLineHeight(pObj->RetCrashLineHeight()+h);
+           }
+           FlushCrashLine();
+//?CreateResource(RetPosition(0), 0.0f, 1.0f, OBJECT_WAYPOINT, FALSE);
+           return;
+       }
+
+       if ( Abs(iPos[0].x-oPos[1].x) < 5.0f &&
+            Abs(iPos[0].y-oPos[1].y) < 5.0f &&
+            Abs(iPos[3].x-oPos[2].x) < 5.0f &&
+            Abs(iPos[3].y-oPos[2].y) < 5.0f )
+       {
+           pObj->m_crashLinePos[1].x += iLen;
+           pObj->m_crashLinePos[2].x += iLen;
+           pObj->UpdateBBoxCrashLine();
+           if ( pObj->RetCrashLineHeight() != NAN )
+           {
+               iCenter = RetPosition(0);
+               oCenter = pObj->RetPosition(0);
+               h = iCenter.y-oCenter.y;
+               if ( h < 0.0f)  h = 0.0f;
+               pObj->SetCrashLineHeight(pObj->RetCrashLineHeight()+h);
+           }
+           FlushCrashLine();
+//?CreateResource(RetPosition(0), 0.0f, 1.0f, OBJECT_WAYPOINT, FALSE);
+           return;
+       }
+   }
 }
 
-// Retourne le rayon du bouclier.
+// Indique si la caméra est obstruée par un objet.
 
-float CObject::RetShieldRadius()
+BOOL CObject::IsOccludeCamera(const D3DVECTOR &eye, const D3DVECTOR &look)
 {
-   return m_shieldRadius;
+   FPOINT  oP1,oP2,oP3,oP4, e,l, inter;
+   BOOL    bNew;
+   int     u;
+
+   if ( m_type != OBJECT_BARRIER14 &&
+        m_type != OBJECT_BARRIER15 &&
+        m_type != OBJECT_BARRIER16 )  return TRUE;
+
+   e.x = eye.x;
+   e.y = eye.z;
+   l.x = look.x;
+   l.y = look.z;
+
+   u = m_crashLineUsed;
+   m_crashLineUsed = 5;  // à cause de CrashLineFusion
+   GetCrashLine(0, oP1, bNew);
+   GetCrashLine(1, oP2, bNew);
+   GetCrashLine(2, oP3, bNew);
+   GetCrashLine(3, oP4, bNew);
+   m_crashLineUsed = u;
+
+   if ( IntersectSegment(e,l, oP1,oP2, inter) )  return TRUE;
+   if ( IntersectSegment(e,l, oP3,oP4, inter) )  return TRUE;
+
+   return FALSE;
 }
 
 
@@ -1438,16 +1649,10 @@ void CObject::FloorAdjust()
    pos = RetPosition(0);
    if ( m_terrain->GetNormal(n, pos) )
    {
-#if 0
-       SetAngleX(0,  sinf(n.z));
-       SetAngleZ(0, -sinf(n.x));
-       SetAngleY(0, 0.0f);
-#else
        a = RetAngleY(0);
        nn = RotatePoint(-a, FPOINT(n.z, n.x));
        SetAngleX(0,  sinf(nn.x));
        SetAngleZ(0, -sinf(nn.y));
-#endif
    }
 }
 
@@ -1488,15 +1693,33 @@ D3DVECTOR CObject::RetCirVibration()
    return m_cirVibration;
 }
 
-// Donne l'inclinaison.
+// Donne la rotation circulaire suite à un choc.
 
-void CObject::SetInclinaison(D3DVECTOR dir)
+void CObject::SetCirChoc(D3DVECTOR dir)
 {
-   if ( m_inclinaison.x != dir.x ||
-        m_inclinaison.y != dir.y ||
-        m_inclinaison.z != dir.z )
+   if ( m_cirChoc.x != dir.x ||
+        m_cirChoc.y != dir.y ||
+        m_cirChoc.z != dir.z )
    {
-       m_inclinaison = dir;
+       m_cirChoc = dir;
+       m_objectPart[0].bRotate = TRUE;
+   }
+}
+
+D3DVECTOR CObject::RetCirChoc()
+{
+   return m_cirChoc;
+}
+
+// Donne l'inclinaison.
+
+void CObject::SetInclinaison(D3DVECTOR dir)
+{
+   if ( m_inclinaison.x != dir.x ||
+        m_inclinaison.y != dir.y ||
+        m_inclinaison.z != dir.z )
+   {
+       m_inclinaison = dir;
        m_objectPart[0].bRotate = TRUE;
    }
 }
@@ -1518,6 +1741,11 @@ void CObject::SetPosition(int part, const D3DVECTOR &pos)
    m_objectPart[part].position = pos;
    m_objectPart[part].bTranslate = TRUE;  // il faudra recalculer les matrices
 
+   if ( part == 0 && m_physics != 0 )
+   {
+       m_physics->UpdateCorner();
+   }
+
    if ( part == 0 && !m_bFlat )  // partie principale ?
    {
        rank = m_objectPart[0].object;
@@ -1526,14 +1754,7 @@ void CObject::SetPosition(int part, const D3DVECTOR &pos)
        m_terrain->MoveOnFloor(shPos, TRUE);
        m_engine->SetObjectShadowPos(rank, shPos);
 
-       if ( m_physics != 0 && m_physics->RetType() == TYPE_FLYING )
-       {
-           height = pos.y-shPos.y;
-       }
-       else
-       {
-           height = 0.0f;
-       }
+       height = 0.0f;
        m_engine->SetObjectShadowHeight(rank, height);
 
        // Calcul la normale au terrain en 9 points stratégiques,
@@ -1621,11 +1842,6 @@ void CObject::SetPosition(int part, const D3DVECTOR &pos)
            shPos.y += m_effectHeight;
            m_light->SetLightPos(m_effectLight, shPos);
        }
-
-       if ( m_bShowLimit )
-       {
-           m_main->AdjustShowLimit(0, pos);
-       }
    }
 }
 
@@ -1638,12 +1854,15 @@ D3DVECTOR CObject::RetPosition(int part)
 
 void CObject::SetAngle(int part, const D3DVECTOR &angle)
 {
+   float   a;
+
    m_objectPart[part].angle = angle;
    m_objectPart[part].bRotate = TRUE;  // il faudra recalculer les matrices
 
    if ( part == 0 && !m_bFlat )  // partie principale ?
    {
-       m_engine->SetObjectShadowAngle(m_objectPart[0].object, m_objectPart[0].angle.y);
+       a = m_objectPart[0].angle.y+m_cirVibration.y+m_cirChoc.y+m_inclinaison.y;
+       m_engine->SetObjectShadowAngle(m_objectPart[0].object, a);
    }
 }
 
@@ -1656,12 +1875,15 @@ D3DVECTOR CObject::RetAngle(int part)
 
 void CObject::SetAngleY(int part, float angle)
 {
+   float   a;
+
    m_objectPart[part].angle.y = angle;
    m_objectPart[part].bRotate = TRUE;  // il faudra recalculer les matrices
 
    if ( part == 0 && !m_bFlat )  // partie principale ?
    {
-       m_engine->SetObjectShadowAngle(m_objectPart[0].object, m_objectPart[0].angle.y);
+       a = m_objectPart[0].angle.y+m_cirVibration.y+m_cirChoc.y+m_inclinaison.y;
+       m_engine->SetObjectShadowAngle(m_objectPart[0].object, a);
    }
 }
 
@@ -1795,76 +2017,6 @@ BOOL CObject::RetTrainer()
    return m_bTrainer;
 }
 
-void CObject::SetToy(BOOL bEnable)
-{
-   m_bToy = bEnable;
-}
-
-BOOL CObject::RetToy()
-{
-   return m_bToy;
-}
-
-void CObject::SetManual(BOOL bManual)
-{
-   m_bManual = bManual;
-}
-
-BOOL CObject::RetManual()
-{
-   return m_bManual;
-}
-
-void CObject::SetResetCap(ResetCap cap)
-{
-   m_resetCap = cap;
-}
-
-ResetCap CObject::RetResetCap()
-{
-   return m_resetCap;
-}
-
-void CObject::SetResetBusy(BOOL bBusy)
-{
-   m_bResetBusy = bBusy;
-}
-
-BOOL CObject::RetResetBusy()
-{
-   return m_bResetBusy;
-}
-
-void CObject::SetResetPosition(const D3DVECTOR &pos)
-{
-   m_resetPosition = pos;
-}
-
-D3DVECTOR CObject::RetResetPosition()
-{
-   return m_resetPosition;
-}
-
-void CObject::SetResetAngle(const D3DVECTOR &angle)
-{
-   m_resetAngle = angle;
-}
-
-D3DVECTOR CObject::RetResetAngle()
-{
-   return m_resetAngle;
-}
-
-int CObject::RetResetRun()
-{
-   return m_resetRun;
-}
-
-void CObject::SetResetRun(int run)
-{
-   m_resetRun = run;
-}
-
 
 // Gestion de la particule maîtresse.
 
@@ -1931,69 +2083,6 @@ int CObject::RetTruckPart()
 }
 
 
-// Gestion des informations utilisateur.
-
-void CObject::InfoFlush()
-{
-   m_infoTotal = 0;
-   m_bInfoUpdate = TRUE;
-}
-
-void CObject::DeleteInfo(int rank)
-{
-   int     i;
-
-   if ( rank < 0 || rank >= m_infoTotal )  return;
-
-   for ( i=rank ; i<m_infoTotal-1 ; i++ )
-   {
-       m_info[i] = m_info[i+1];
-   }
-   m_infoTotal --;
-   m_bInfoUpdate = TRUE;
-}
-
-void CObject::SetInfo(int rank, Info info)
-{
-   if ( rank < 0 || rank >= OBJECTMAXINFO )  return;
-   m_info[rank] = info;
-
-   if ( rank+1 > m_infoTotal )  m_infoTotal = rank+1;
-   m_bInfoUpdate = TRUE;
-}
-
-Info CObject::RetInfo(int rank)
-{
-   if ( rank < 0 || rank >= OBJECTMAXINFO )  rank = 0;
-   return m_info[rank];
-}
-
-int CObject::RetInfoTotal()
-{
-   return m_infoTotal;
-}
-
-void CObject::SetInfoReturn(float value)
-{
-   m_infoReturn = value;
-}
-
-float CObject::RetInfoReturn()
-{
-   return m_infoReturn;
-}
-
-void CObject::SetInfoUpdate(BOOL bUpdate)
-{
-   m_bInfoUpdate = bUpdate;
-}
-
-BOOL CObject::RetInfoUpdate()
-{
-   return m_bInfoUpdate;
-}
-
-
 BOOL CObject::SetCmdLine(int rank, float value)
 {
    if ( rank < 0 || rank >= OBJECTMAXCMDLINE )  return FALSE;
@@ -2070,20 +2159,37 @@ void CObject::SetDrawFront(BOOL bDraw)
 
 // Crée un véhicule roulant quelconque posé sur le sol.
 
-BOOL CObject::CreateVehicle(D3DVECTOR pos, float angle, ObjectType type,
-                           float power, BOOL bTrainer, BOOL bToy)
+BOOL CObject::CreateVehicle(D3DVECTOR pos, float angle, float zoom,
+                           ObjectType type, int model, int subModel,
+                           BOOL bPlumb, BOOL bTrainer)
 {
+   char    actualTex[20];
+   char    futureTex[20];
+
    m_type = type;
+   m_model = model;
+   m_subModel = subModel;
 
-   if ( type == OBJECT_TOTO )
+   if ( m_subModel == 1 )
    {
-       m_motion = new CMotionToto(m_iMan, this);
-       m_motion->Create(pos, angle, type, 1.0f);
-       return TRUE;
+       sprintf(actualTex, "car%.2d.tga", m_model);
+       sprintf(futureTex, "car%.2db.tga", m_model);
+       m_engine->SetReplaceTex(actualTex, futureTex);
+   }
+   if ( m_subModel == 2 )
+   {
+       sprintf(actualTex, "car%.2d.tga", m_model);
+       sprintf(futureTex, "car%.2dc.tga", m_model);
+       m_engine->SetReplaceTex(actualTex, futureTex);
+   }
+   if ( m_subModel == 3 )
+   {
+       sprintf(actualTex, "car%.2d.tga", m_model);
+       sprintf(futureTex, "car%.2dd.tga", m_model);
+       m_engine->SetReplaceTex(actualTex, futureTex);
    }
 
    SetTrainer(bTrainer);
-   SetToy(bToy);
 
    m_physics = new CPhysics(m_iMan, this);
    m_brain   = new CBrain(m_iMan, this);
@@ -2091,35 +2197,6 @@ BOOL CObject::CreateVehicle(D3DVECTOR pos, float angle, ObjectType type,
    m_physics->SetBrain(m_brain);
    m_brain->SetPhysics(m_physics);
 
-#if 0
-   if ( type == OBJECT_MOBILEfc ||
-        type == OBJECT_MOBILEtc ||
-        type == OBJECT_MOBILEwc ||
-        type == OBJECT_MOBILEic )  // canon fireball ?
-   {
-       m_showLimitRadius = 160.0f;
-   }
-   if ( type == OBJECT_MOBILEfi ||
-        type == OBJECT_MOBILEti ||
-        type == OBJECT_MOBILEwi ||
-        type == OBJECT_MOBILEii )  // canon orgaball ?
-   {
-       m_showLimitRadius = 160.0f;
-   }
-   if ( type == OBJECT_MOBILErc )  // canon phazer ?
-   {
-       m_showLimitRadius = 160.0f;
-   }
-   if ( type == OBJECT_MOBILErs )  // robot bouclier ?
-   {
-       m_showLimitRadius = 50.0f;
-   }
-#endif
-   if ( type == OBJECT_MOBILErt )  // robot secoueur ?
-   {
-       m_showLimitRadius = 400.0f;
-   }
-
    if ( type == OBJECT_HUMAN ||
         type == OBJECT_TECH  )
    {
@@ -2135,71 +2212,7 @@ BOOL CObject::CreateVehicle(D3DVECTOR pos, float angle, ObjectType type,
    m_brain->SetMotion(m_motion);
    m_motion->SetPhysics(m_physics);
    m_motion->SetBrain(m_brain);
-   if ( !m_motion->Create(pos, angle, type, power) )
-   {
-       if ( m_physics != 0 )
-       {
-           m_physics->DeleteObject();
-           delete m_physics;
-           m_physics = 0;
-       }
-       if ( m_brain != 0 )
-       {
-           m_brain->DeleteObject();
-           delete m_brain;
-           m_brain = 0;
-       }
-       if ( m_motion != 0 )
-       {
-           m_motion->DeleteObject();
-           delete m_motion;
-           m_motion = 0;
-       }
-       return FALSE;
-   }
-
-   return TRUE;
-}
-
-// Crée un insecte quelconque posé sur le sol.
-
-BOOL CObject::CreateInsect(D3DVECTOR pos, float angle, ObjectType type)
-{
-   m_type = type;
-
-   m_physics = new CPhysics(m_iMan, this);
-   m_brain   = new CBrain(m_iMan, this);
-
-   m_physics->SetBrain(m_brain);
-   m_brain->SetPhysics(m_physics);
-
-   if ( type == OBJECT_MOTHER )
-   {
-       m_motion = new CMotionMother(m_iMan, this);
-   }
-   if ( type == OBJECT_ANT )
-   {
-       m_motion = new CMotionAnt(m_iMan, this);
-   }
-   if ( type == OBJECT_SPIDER )
-   {
-       m_motion = new CMotionSpider(m_iMan, this);
-   }
-   if ( type == OBJECT_BEE )
-   {
-       m_motion = new CMotionBee(m_iMan, this);
-   }
-   if ( type == OBJECT_WORM )
-   {
-       m_motion = new CMotionWorm(m_iMan, this);
-   }
-   if ( m_motion == 0 )  return FALSE;
-
-   m_physics->SetMotion(m_motion);
-   m_brain->SetMotion(m_motion);
-   m_motion->SetPhysics(m_physics);
-   m_motion->SetBrain(m_brain);
-   if ( !m_motion->Create(pos, angle, type, 0.0f) )
+   if ( !m_motion->Create(pos, angle, type, TRUE) )
    {
        if ( m_physics != 0 )
        {
@@ -2327,8 +2340,6 @@ BOOL CObject::CreateShadowCircle(float radius, float intensity,
 {
    float   zoom;
 
-   if ( intensity == 0.0f )  return TRUE;
-
    zoom = RetZoomX(0);
 
    m_engine->ShadowCreate(m_objectPart[0].object);
@@ -2344,12 +2355,12 @@ BOOL CObject::CreateShadowCircle(float radius, float intensity,
 
 // Crée un batiment quelconque posé sur le sol.
 
-BOOL CObject::CreateBuilding(D3DVECTOR pos, float angle, float height,
-                            ObjectType type, float power)
+BOOL CObject::CreateBuilding(D3DVECTOR pos, float angle, float zoom,
+                            float height, ObjectType type, BOOL bPlumb)
 {
    CModFile*   pModFile;
    FPOINT      p;
-   int         rank, i;
+   int         rank;
 
    if ( m_engine->RetRestCreate() < 20 )  return FALSE;
 
@@ -2361,366 +2372,360 @@ BOOL CObject::CreateBuilding(D3DVECTOR pos, float angle, float height,
    m_engine->SetObjectType(rank, TYPEFIX);  // c'est un objet fixe
    SetObjectRank(0, rank);
 
-   if ( m_type == OBJECT_PORTICO )
+   if ( m_type == OBJECT_FACTORY1 )  // 2 tuyaux verticaux ?
    {
-       pModFile->ReadModel("objects\\portico1.mod");
+       pModFile->ReadModel("objects\\factory1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(1, rank);
-       SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\portico2.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(0.0f, 67.0f, 0.0f));
+#if 0
+       CreateCrashSphere(D3DVECTOR(  0.0f,  0.0f,   0.0f), 40.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 30.0f,  5.0f,  10.0f),  9.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 30.0f,  5.0f,  30.0f),  9.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 35.0f,  5.0f, -10.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 35.0f,  5.0f, -20.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 35.0f,  5.0f, -30.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 25.0f,  5.0f, -30.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f,  5.0f, -35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-20.0f,  5.0f, -35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-30.0f,  5.0f, -35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f,  5.0f,  35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-20.0f,  5.0f,  35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-30.0f,  5.0f,  35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-35.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-35.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-35.0f, -40.0f), SOUND_BOUMm, 0.45f);
+#endif
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(2, rank);
-       SetObjectParent(2, 1);
-       pModFile->ReadModel("objects\\portico3.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(2, D3DVECTOR(0.0f, 0.0f, -33.0f));
-       SetAngleY(2, 45.0f*PI/180.0f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
+   }
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(3, rank);
-       SetObjectParent(3, 2);
-       pModFile->ReadModel("objects\\portico4.mod");
+   if ( m_type == OBJECT_FACTORY2 )  // usine avec 2 cheminées ?
+   {
+       pModFile->ReadModel("objects\\factory2.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(3, D3DVECTOR(50.0f, 0.0f, 0.0f));
-       SetAngleY(3, -60.0f*PI/180.0f);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(4, rank);
-       SetObjectParent(4, 3);
-       pModFile->ReadModel("objects\\portico5.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(4, D3DVECTOR(35.0f, 0.0f, 0.0f));
-       SetAngleY(4, -55.0f*PI/180.0f);
-       
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(5, rank);
-       SetObjectParent(5, 1);
-       pModFile->ReadModel("objects\\portico3.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(5, D3DVECTOR(0.0f, 0.0f, 33.0f));
-       SetAngleY(5, -45.0f*PI/180.0f);
+#if 0
+       CreateCrashSphere(D3DVECTOR(  0.0f,  0.0f,   0.0f), 40.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 26.0f,  3.0f,  26.0f), 14.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 26.0f,  3.0f, -26.0f), 14.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-26.0f,  3.0f,  26.0f), 14.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-26.0f,  3.0f, -26.0f), 14.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 36.0f,  3.0f,  36.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 36.0f,  3.0f, -36.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-36.0f,  3.0f,  36.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-36.0f,  3.0f, -36.0f),  4.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+#endif
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(6, rank);
-       SetObjectParent(6, 5);
-       pModFile->ReadModel("objects\\portico4.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(6, D3DVECTOR(50.0f, 0.0f, 0.0f));
-       SetAngleY(6, 60.0f*PI/180.0f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
+   }
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(7, rank);
-       SetObjectParent(7, 6);
-       pModFile->ReadModel("objects\\portico5.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(7, D3DVECTOR(35.0f, 0.0f, 0.0f));
-       SetAngleY(7, 55.0f*PI/180.0f);
-       
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(8, rank);
-       SetObjectParent(8, 0);
-       pModFile->ReadModel("objects\\portico6.mod");
+   if ( m_type == OBJECT_FACTORY3 )  // usine avec toît /|/| ?
+   {
+       pModFile->ReadModel("objects\\factory3.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(8, D3DVECTOR(-35.0f, 50.0f, -35.0f));
-       SetAngleY(8, -PI/2.0f);
-       SetZoom(8, 2.0f);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(9, rank);
-       SetObjectParent(9, 8);
-       pModFile->ReadModel("objects\\portico7.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(9, D3DVECTOR(0.0f, 4.5f, 1.9f));
+#if 0
+       CreateCrashSphere(D3DVECTOR(  0.0f,  0.0f,   0.0f), 40.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 26.0f,  3.0f,  26.0f), 14.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 26.0f,  3.0f, -26.0f), 14.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-26.0f,  3.0f,  26.0f), 14.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-26.0f,  3.0f, -26.0f), 14.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 36.0f,  3.0f,  36.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 36.0f,  3.0f, -36.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-36.0f,  3.0f,  36.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-36.0f,  3.0f, -36.0f),  4.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+#endif
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(10, rank);
-       SetObjectParent(10, 0);
-       pModFile->ReadModel("objects\\portico6.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(10, D3DVECTOR(-35.0f, 50.0f, 35.0f));
-       SetAngleY(10, -PI/2.0f);
-       SetZoom(10, 2.0f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
+   }
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(11, rank);
-       SetObjectParent(11, 10);
-       pModFile->ReadModel("objects\\portico7.mod");
+   if ( m_type == OBJECT_FACTORY4 )  // ailettes refroidisseur ?
+   {
+       pModFile->ReadModel("objects\\factory4.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(11, D3DVECTOR(0.0f, 4.5f, 1.9f));
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
-       CreateCrashSphere(D3DVECTOR(  0.0f, 28.0f,   0.0f), 45.5f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 27.0f, 10.0f, -42.0f), 15.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 10.0f, -42.0f), 15.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-27.0f, 10.0f, -42.0f), 15.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 27.0f, 10.0f,  42.0f), 15.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 10.0f,  42.0f), 15.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-27.0f, 10.0f,  42.0f), 15.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-32.0f, 45.0f, -32.0f), 10.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-32.0f, 45.0f,  32.0f), 10.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 32.0f, 45.0f, -32.0f), 10.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 32.0f, 45.0f,  32.0f), 10.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 35.0f, 0.0f), 50.0f);
+#if 0
+       CreateCrashSphere(D3DVECTOR(  0.0f,  0.0f,   0.0f), 40.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f,  3.0f,  37.0f),  3.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 37.0f,  3.0f,  15.0f),  3.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f,  3.0f, -37.0f),  3.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 37.0f,  3.0f, -15.0f),  3.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-15.0f,  3.0f,  37.0f),  3.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-37.0f,  3.0f,  15.0f),  3.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-15.0f,  3.0f, -37.0f),  3.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-37.0f,  3.0f, -15.0f),  3.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-17.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 17.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -17.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  17.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 17.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-17.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  17.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -17.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-17.0f, -40.0f), SOUND_BOUMm, 0.45f);
+#endif
 
-       CreateShadowCircle(50.0f, 1.0f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
    }
 
-   if ( m_type == OBJECT_BASE )
+   if ( m_type == OBJECT_FACTORY5 )  // ?
    {
-       pModFile->ReadModel("objects\\base1.mod");
+       pModFile->ReadModel("objects\\factory5.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
 
-       for ( i=0 ; i<8 ; i++ )
-       {
-           rank = m_engine->CreateObject();
-           m_engine->SetObjectType(rank, TYPEDESCENDANT);
-           SetObjectRank(1+i, rank);
-           SetObjectParent(1+i, 0);
-           pModFile->ReadModel("objects\\base2.mod");
-           pModFile->CreateEngineObject(rank);
-           p = RotatePoint(-PI/4.0f*i, 27.8f);
-           SetPosition(1+i, D3DVECTOR(p.x, 30.0f, p.y));
-           SetAngleY(1+i, PI/4.0f*i);
-           SetAngleZ(1+i, PI/2.0f);
-
-           rank = m_engine->CreateObject();
-           m_engine->SetObjectType(rank, TYPEDESCENDANT);
-           SetObjectRank(10+i, rank);
-           SetObjectParent(10+i, 1+i);
-           pModFile->ReadModel("objects\\base4.mod");
-           pModFile->CreateEngineObject(rank);
-           SetPosition(10+i, D3DVECTOR(23.5f, 0.0f, 7.0f));
-
-           rank = m_engine->CreateObject();
-           m_engine->SetObjectType(rank, TYPEDESCENDANT);
-           SetObjectRank(18+i, rank);
-           SetObjectParent(18+i, 1+i);
-           pModFile->ReadModel("objects\\base4.mod");
-           pModFile->Mirror();
-           pModFile->CreateEngineObject(rank);
-           SetPosition(18+i, D3DVECTOR(23.5f, 0.0f, -7.0f));
-       }
+#if 0
+       CreateCrashSphere(D3DVECTOR(  0.0f,  0.0f,   0.0f), 40.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 35.0f,  3.0f,  15.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 35.0f,  3.0f,  25.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f,  3.0f,  35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 25.0f,  3.0f,  35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 35.0f,  3.0f, -15.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 35.0f,  3.0f, -25.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f,  3.0f, -35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 25.0f,  3.0f, -35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-35.0f,  3.0f,  15.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-35.0f,  3.0f,  25.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-15.0f,  3.0f,  35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-25.0f,  3.0f,  35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-35.0f,  3.0f, -15.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-35.0f,  3.0f, -25.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-15.0f,  3.0f, -35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-25.0f,  3.0f, -35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-30.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 30.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 30.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-30.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-30.0f, -40.0f), SOUND_BOUMm, 0.45f);
+#endif
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(9, rank);
-       SetObjectParent(9, 0);
-       pModFile->ReadModel("objects\\base3.mod");  // pilier central
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
+   }
+
+   if ( m_type == OBJECT_FACTORY6 )  // 2 tuyaux haut ?
+   {
+       pModFile->ReadModel("objects\\factory6.mod");
        pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+   }
 
-       CreateCrashSphere(D3DVECTOR(  0.0f, 33.0f,   0.0f),  2.5f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 39.0f,   0.0f),  2.5f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 45.0f,   0.0f),  2.5f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 51.0f,   0.0f),  2.5f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 57.0f,   0.0f),  2.5f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 63.0f,   0.0f),  2.5f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 69.0f,   0.0f),  2.5f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 82.0f,   0.0f),  8.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 18.0f, 94.0f,   0.0f), 10.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-18.0f, 94.0f,   0.0f), 10.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 94.0f,  18.0f), 10.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 94.0f, -18.0f), 10.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 13.0f, 94.0f,  13.0f), 10.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-13.0f, 94.0f,  13.0f), 10.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 13.0f, 94.0f, -13.0f), 10.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-13.0f, 94.0f, -13.0f), 10.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f,104.0f,   0.0f), 14.0f, SOUND_BOUMm, 0.45f);
+   if ( m_type == OBJECT_FACTORY7 )  // pont de chargement haut ?
+   {
+       pModFile->ReadModel("objects\\factory7.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+   }
 
-       SetGlobalSphere(D3DVECTOR(0.0f, 45.0f, 0.0f), 10.0f);
+   if ( m_type == OBJECT_FACTORY8 )  // départ tuyau 6 ?
+   {
+       pModFile->ReadModel("objects\\factory8.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
-       CreateShadowCircle(60.0f, 1.0f);
-       m_showLimitRadius = 200.0f;
+#if 0
+       CreateCrashSphere(D3DVECTOR(  0.0f,  0.0f,   0.0f), 40.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 26.0f,  3.0f,  26.0f), 14.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 26.0f,  3.0f, -26.0f), 14.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-26.0f,  3.0f,  26.0f), 14.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-26.0f,  3.0f, -26.0f), 14.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 36.0f,  3.0f,  36.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 36.0f,  3.0f, -36.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-36.0f,  3.0f,  36.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-36.0f,  3.0f, -36.0f),  4.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-30.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 30.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 30.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-30.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-30.0f, -40.0f), SOUND_BOUMm, 0.45f);
+#endif
 
-       m_terrain->AddBuildingLevel(pos, 28.6f, 73.4f, 30.0f, 0.4f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
    }
 
-   if ( m_type == OBJECT_DERRICK )
+   if ( m_type == OBJECT_FACTORY9 )  // cilo rond ?
    {
-       pModFile->ReadModel("objects\\derrick1.mod");
+       pModFile->ReadModel("objects\\factory9.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(1, rank);
-       SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\derrick2.mod");
-       pModFile->CreateEngineObject(rank);
-
-       CreateCrashSphere(D3DVECTOR(0.0f,  0.0f, 0.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(0.0f, 17.0f, 0.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(0.0f, 26.0f, 0.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(7.0f, 17.0f, 0.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 10.0f);
+       CreateCrashSphere(D3DVECTOR( 19.0f, 3.0f,   5.0f), 1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 19.0f, 3.0f,  -5.0f), 1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-19.0f, 3.0f,   5.0f), 1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-19.0f, 3.0f,  -5.0f), 1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  5.0f, 3.0f,  19.0f), 1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( -5.0f, 3.0f,  19.0f), 1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  5.0f, 3.0f, -19.0f), 1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( -5.0f, 3.0f, -19.0f), 1.5f, SOUND_BOUMm, 0.45f);
 
-       CreateShadowCircle(10.0f, 0.4f);
+       CreateShadowCircle(20.0f, 0.5f);
    }
 
-   if ( m_type == OBJECT_RESEARCH )
+   if ( m_type == OBJECT_FACTORY10 )  // tanker A2 ?
    {
-       pModFile->ReadModel("objects\\search1.mod");
+       pModFile->ReadModel("objects\\factory10.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(1, rank);
-       SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\search2.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(0.0f, 13.0f, 0.0f));
+       CreateCrashSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 40.0f, SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
+   }
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(2, rank);
-       SetObjectParent(2, 1);
-       pModFile->ReadModel("objects\\search3.mod");
+   if ( m_type == OBJECT_FACTORY11 )  // tanker C5 ?
+   {
+       pModFile->ReadModel("objects\\factory11.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(2, D3DVECTOR(0.0f, 4.0f, 0.0f));
-       SetAngleZ(2, 35.0f*PI/180.0f);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
-       CreateCrashSphere(D3DVECTOR(0.0f,  0.0f, 0.0f), 9.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(0.0f,  6.0f, 0.0f), 9.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(0.0f, 14.0f, 0.0f), 7.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 8.0f, 0.0f), 12.0f);
+       CreateCrashSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 40.0f, SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
+   }
 
-       m_character.posPower = D3DVECTOR(7.5f, 3.0f, 0.0f);
+   if ( m_type == OBJECT_FACTORY12 )  // tanker F4 ?
+   {
+       pModFile->ReadModel("objects\\factory12.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
-       CreateShadowCircle(12.0f, 1.0f);
+       CreateCrashSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 40.0f, SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
    }
 
-   if ( m_type == OBJECT_RADAR )
+   if ( m_type == OBJECT_FACTORY13 )  // cilo carré ?
    {
-       pModFile->ReadModel("objects\\radar1.mod");
+       pModFile->ReadModel("objects\\factory13.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(1, rank);
-       SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\radar2.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(0.0f, 5.0f, 0.0f));
+       CreateCrashSphere(D3DVECTOR( 9.0f, 3.0f,   29.5f), 1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 9.0f, 3.0f,  -29.5f), 1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-9.0f, 3.0f,   29.5f), 1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-9.0f, 3.0f,  -29.5f), 1.5f, SOUND_BOUMm, 0.45f);
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(2, rank);
-       SetObjectParent(2, 0);
-       pModFile->ReadModel("objects\\radar3.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(2, D3DVECTOR(0.0f, 11.0f, 0.0f));
-       SetAngleY(2, -PI/2.0f);
+       CreateShadowCircle(20.0f, 0.5f);
+   }
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(3, rank);
-       SetObjectParent(3, 2);
-       pModFile->ReadModel("objects\\radar4.mod");
+   if ( m_type == OBJECT_FACTORY14 )  // tapis roulant ?
+   {
+       pModFile->ReadModel("objects\\factory14.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(3, D3DVECTOR(0.0f, 4.5f, 1.9f));
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
-       CreateCrashSphere(D3DVECTOR(0.0f,  3.0f, 0.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(0.0f, 11.0f, 0.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 7.0f, 0.0f), 7.0f);
+       CreateCrashLine(FPOINT(-18.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(  5.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(  5.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-18.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-18.0f, -4.0f), SOUND_BOUMm, 0.45f);
 
-       CreateShadowCircle(8.0f, 1.0f);
+//?        CreateShadowCircle(18.0f, 1.0f, D3DSHADOWBARRIER2);
    }
 
-   if ( m_type == OBJECT_INFO )
+   if ( m_type == OBJECT_GRAVEL )  // tas de gravier ?
    {
-       pModFile->ReadModel("objects\\info1.mod");
+       pModFile->ReadModel("objects\\gravel.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
+       SetZoom(0, zoom);
        SetFloorHeight(0.0f);
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(1, rank);
-       SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\info2.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(0.0f, 5.0f, 0.0f));
-
-       for ( i=0 ; i<3 ; i++ )
-       {
-           rank = m_engine->CreateObject();
-           m_engine->SetObjectType(rank, TYPEDESCENDANT);
-           SetObjectRank(2+i*2, rank);
-           SetObjectParent(2+i*2, 1);
-           pModFile->ReadModel("objects\\info3.mod");
-           pModFile->CreateEngineObject(rank);
-           SetPosition(2+i*2, D3DVECTOR(0.0f, 4.5f, 0.0f));
-
-           rank = m_engine->CreateObject();
-           m_engine->SetObjectType(rank, TYPEDESCENDANT);
-           SetObjectRank(3+i*2, rank);
-           SetObjectParent(3+i*2, 2+i*2);
-           pModFile->ReadModel("objects\\radar4.mod");
-           pModFile->CreateEngineObject(rank);
-           SetPosition(3+i*2, D3DVECTOR(0.0f, 0.0f, -4.0f));
-
-           SetAngleY(2+i*2, 2.0f*PI/3.0f*i);
-       }
+//?        CreateCrashSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 15.0f, SOUND_BOUMv, 0.15f);
+       m_terrain->AddBuildingLevel(pos, 6.0f*zoom, 14.0f*zoom, 10.0f*zoom, 0.5f);
+   }
 
-       CreateCrashSphere(D3DVECTOR(0.0f,  3.0f, 0.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(0.0f, 11.0f, 0.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 5.0f, 0.0f), 6.0f);
+   if ( m_type == OBJECT_TUB )  // bac de gravier ?
+   {
+       pModFile->ReadModel("objects\\tub.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetZoom(0, zoom);
+       SetFloorHeight(0.0f);
 
-       CreateShadowCircle(8.0f, 1.0f);
+       CreateCrashLine(FPOINT(-20.0f, -20.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f, -20.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  20.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  20.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -20.0f), SOUND_BOUMm, 0.45f);
    }
 
-   if ( m_type == OBJECT_ENERGY )
+   if ( m_type == OBJECT_ALIEN1 )  // usine ?
    {
-       pModFile->ReadModel("objects\\energy.mod");
+       pModFile->ReadModel("objects\\alien1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
 
-       CreateCrashSphere(D3DVECTOR(-2.0f, 13.0f, 0.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-7.0f,  3.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 0.0f,  1.0f, 0.0f), 1.5f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(-7.0f, 5.0f, 0.0f), 5.0f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
 
-       m_character.posPower = D3DVECTOR(0.0f, 3.0f, 0.0f);
-       m_energy = power;  // initialise le niveau d'énergie
-
-       CreateShadowCircle(6.0f, 0.5f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
    }
 
-   if ( m_type == OBJECT_LABO )
+   if ( m_type == OBJECT_ALIEN2 )  // tour ?
    {
-       pModFile->ReadModel("objects\\labo1.mod");
+       pModFile->ReadModel("objects\\alien2.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
@@ -2730,123 +2735,72 @@ BOOL CObject::CreateBuilding(D3DVECTOR pos, float angle, float height,
        m_engine->SetObjectType(rank, TYPEDESCENDANT);
        SetObjectRank(1, rank);
        SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\labo2.mod");
+       pModFile->ReadModel("objects\\alien21.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(-9.0f, 3.0f, 0.0f));
-       SetAngleZ(1, PI/2.0f);
+       SetPosition(1, D3DVECTOR(0.0f, 40.0f, 0.0f));
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(2, rank);
-       SetObjectParent(2, 1);
-       pModFile->ReadModel("objects\\labo3.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(2, D3DVECTOR(9.0f, -1.0f, 0.0f));
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(3, rank);
-       SetObjectParent(3, 2);
-       pModFile->ReadModel("objects\\labo4.mod");
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
+   }
+
+   if ( m_type == OBJECT_ALIEN3 )  // tour haute ?
+   {
+       pModFile->ReadModel("objects\\alien3.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(3, D3DVECTOR(0.0f, 0.0f, 0.0f));
-       SetAngleZ(3, 80.0f*PI/180.0f);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(4, rank);
-       SetObjectParent(4, 2);
-       pModFile->ReadModel("objects\\labo4.mod");
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\alien21.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(4, D3DVECTOR(0.0f, 0.0f, 0.0f));
-       SetAngleZ(4, 80.0f*PI/180.0f);
-       SetAngleY(4, PI*2.0f/3.0f);
+       SetPosition(1, D3DVECTOR(0.0f, 50.0f, 0.0f));
 
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(5, rank);
-       SetObjectParent(5, 2);
-       pModFile->ReadModel("objects\\labo4.mod");
+       SetObjectRank(2, rank);
+       SetObjectParent(2, 0);
+       pModFile->ReadModel("objects\\alien21.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(5, D3DVECTOR(0.0f, 0.0f, 0.0f));
-       SetAngleZ(5, 80.0f*PI/180.0f);
-       SetAngleY(5, -PI*2.0f/3.0f);
+       SetPosition(2, D3DVECTOR(0.0f, 80.0f, 0.0f));
 
-       CreateCrashSphere(D3DVECTOR(  0.0f,  1.0f,  0.0f), 1.5f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 11.0f,  0.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-10.0f, 10.0f,  0.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-12.0f,  3.0f,  3.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-12.0f,  3.0f, -3.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(-10.0f, 5.0f, 0.0f), 7.0f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
 
-       m_character.posPower = D3DVECTOR(0.0f, 3.0f, 0.0f);
-
-       CreateShadowCircle(7.0f, 0.5f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
    }
 
-   if ( m_type == OBJECT_FACTORY )
+   if ( m_type == OBJECT_ALIEN4 )  // habitation ?
    {
-       pModFile->ReadModel("objects\\factory1.mod");
+       pModFile->ReadModel("objects\\alien4.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
 
-       for ( i=0 ; i<9 ; i++ )
-       {
-           rank = m_engine->CreateObject();
-           m_engine->SetObjectType(rank, TYPEDESCENDANT);
-           SetObjectRank(1+i, rank);
-           SetObjectParent(1+i, 0);
-           pModFile->ReadModel("objects\\factory2.mod");
-           pModFile->CreateEngineObject(rank);
-           SetPosition(1+i, D3DVECTOR(10.0f, 2.0f*i, 10.0f));
-           SetAngleZ(1+i, PI/2.0f);
-           SetZoomZ(1+i, 0.30f);
-
-           rank = m_engine->CreateObject();
-           m_engine->SetObjectType(rank, TYPEDESCENDANT);
-           SetObjectRank(10+i, rank);
-           SetObjectParent(10+i, 0);
-           pModFile->ReadModel("objects\\factory2.mod");
-           pModFile->CreateEngineObject(rank);
-           SetPosition(10+i, D3DVECTOR(10.0f, 2.0f*i, -10.0f));
-           SetAngleZ(10+i, -PI/2.0f);
-           SetAngleY(10+i, PI);
-           SetZoomZ(10+i, 0.30f);
-       }
-
-       for ( i=0 ; i<2 ; i++ )
-       {
-           float s = (float)(i*2-1);
-           CreateCrashSphere(D3DVECTOR(-10.0f,  2.0f, 11.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR( -3.0f,  2.0f, 11.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR(  3.0f,  2.0f, 11.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR( 10.0f,  2.0f, 11.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR(-10.0f,  9.0f, 11.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR( -3.0f,  9.0f, 11.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR(  3.0f,  9.0f, 11.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR( 10.0f,  9.0f, 11.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR(-10.0f, 16.0f, 11.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR( -3.0f, 16.0f, 11.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR(  3.0f, 16.0f, 11.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR( 10.0f, 16.0f, 11.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR(-10.0f, 16.0f,  4.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR( -3.0f, 16.0f,  4.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR(  3.0f, 16.0f,  4.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR( 10.0f, 16.0f,  4.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR(-10.0f,  2.0f,  4.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR(-10.0f,  9.0f,  4.0f*s), 4.0f, SOUND_BOUMm, 0.45f);
-       }
-       CreateCrashSphere(D3DVECTOR(-10.0f, 21.0f, -4.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 18.0f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
 
-       CreateShadowCircle(24.0f, 0.3f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
    }
 
-   if ( m_type == OBJECT_REPAIR )
+   if ( m_type == OBJECT_ALIEN5 )  // marteau ?
    {
-       pModFile->ReadModel("objects\\repair1.mod");
+       pModFile->ReadModel("objects\\alien5.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
@@ -2856,23 +2810,22 @@ BOOL CObject::CreateBuilding(D3DVECTOR pos, float angle, float height,
        m_engine->SetObjectType(rank, TYPEDESCENDANT);
        SetObjectRank(1, rank);
        SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\repair2.mod");
+       pModFile->ReadModel("objects\\alien51.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(-11.0f, 13.5f, 0.0f));
-       SetAngleZ(1, PI/2.0f);
+       SetPosition(1, D3DVECTOR(0.0f, 25.0f, 17.0f));
 
-       m_terrain->AddBuildingLevel(pos, 7.0f, 9.0f, 1.0f, 0.5f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
 
-       CreateCrashSphere(D3DVECTOR(-11.0f,  0.0f,  4.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-11.0f,  0.0f,  0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-11.0f,  0.0f, -4.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-11.0f, 10.0f,  0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(-11.0f, 13.0f, 0.0f), 15.0f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
    }
 
-   if ( m_type == OBJECT_DESTROYER )
+   if ( m_type == OBJECT_ALIEN6 )  // écraseur ?
    {
-       pModFile->ReadModel("objects\\destroy1.mod");
+       pModFile->ReadModel("objects\\alien6.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
@@ -2882,84 +2835,102 @@ BOOL CObject::CreateBuilding(D3DVECTOR pos, float angle, float height,
        m_engine->SetObjectType(rank, TYPEDESCENDANT);
        SetObjectRank(1, rank);
        SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\destroy2.mod");
+       pModFile->ReadModel("objects\\alien61.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(0.0f, 0.0f, 0.0f));
+       SetPosition(1, D3DVECTOR(-26.0f, 13.0f, 0.0f));
 
-       m_terrain->AddBuildingLevel(pos, 7.0f, 9.0f, 1.0f, 0.5f);
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(2, rank);
+       SetObjectParent(2, 0);
+       pModFile->ReadModel("objects\\alien62.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(2, D3DVECTOR(26.0f, 13.0f, 0.0f));
 
-       CreateCrashSphere(D3DVECTOR(-3.5f, 0.0f, -13.5f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 3.5f, 0.0f, -13.5f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-3.5f, 0.0f,  13.5f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 3.5f, 0.0f,  13.5f), 4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
 
-       CreateShadowCircle(19.0f, 1.0f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
    }
 
-   if ( m_type == OBJECT_STATION )
+   if ( m_type == OBJECT_ALIEN7 )  // électrocuteur ?
    {
-       pModFile->ReadModel("objects\\station.mod");
+       pModFile->ReadModel("objects\\alien7.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
 
-       m_terrain->AddBuildingLevel(pos, 7.0f, 9.0f, 1.0f, 0.5f);
-
-       CreateCrashSphere(D3DVECTOR(-15.0f, 2.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-15.0f, 6.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(-15.0f, 5.0f, 0.0f), 6.0f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
 
-       m_energy = power;  // initialise le niveau d'énergie
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
    }
 
-   if ( m_type == OBJECT_CONVERT )
+   if ( m_type == OBJECT_ALIEN8 )  // générateur ?
    {
-       pModFile->ReadModel("objects\\convert1.mod");
+       pModFile->ReadModel("objects\\alien8.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
 
-       rank = m_engine->CreateObject();
+       rank = m_engine->CreateObject();  // bras
        m_engine->SetObjectType(rank, TYPEDESCENDANT);
        SetObjectRank(1, rank);
        SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\convert2.mod");
+       pModFile->ReadModel("objects\\alien81.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(0.0f, 14.0f, 0.0f));
+       SetPosition(1, D3DVECTOR(25.0f, 13.0f, 15.0f));
+       SetAngleY(1, 50.0f*PI/180.0f);
 
-       rank = m_engine->CreateObject();
+       rank = m_engine->CreateObject();  // pince gauche
        m_engine->SetObjectType(rank, TYPEDESCENDANT);
        SetObjectRank(2, rank);
-       SetObjectParent(2, 0);
-       pModFile->ReadModel("objects\\convert3.mod");
+       SetObjectParent(2, 1);
+       pModFile->ReadModel("objects\\alien82.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(2, D3DVECTOR(0.0f, 11.5f, 0.0f));
-       SetAngleX(2, -PI*0.35f);
+       SetPosition(2, D3DVECTOR(-3.0f, 0.0f, -47.0f));
+       SetAngleY(2, 45.0f*PI/180.0f);
 
-       rank = m_engine->CreateObject();
+       rank = m_engine->CreateObject();  // pince droite
        m_engine->SetObjectType(rank, TYPEDESCENDANT);
        SetObjectRank(3, rank);
-       SetObjectParent(3, 0);
-       pModFile->ReadModel("objects\\convert3.mod");
+       SetObjectParent(3, 1);
+       pModFile->ReadModel("objects\\alien83.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(3, D3DVECTOR(0.0f, 11.5f, 0.0f));
-       SetAngleY(3, PI);
-       SetAngleX(3, -PI*0.35f);
+       SetPosition(3, D3DVECTOR(3.0f, 0.0f, -47.0f));
+       SetAngleY(3, -45.0f*PI/180.0f);
 
-       m_terrain->AddBuildingLevel(pos, 7.0f, 9.0f, 1.0f, 0.5f);
+       rank = m_engine->CreateObject();  // bouton rouge
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(4, rank);
+       SetObjectParent(4, 0);
+       pModFile->ReadModel("objects\\alien84.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(4, D3DVECTOR(-14.0f, 5.0f, 40.0f));
+
+       // bouton rouge :
+       CreateCrashSphere(D3DVECTOR(-14.0f, 3.0f, 42.0f), 3.0f, SOUND_BOUMm, 0.44f);
 
-       CreateCrashSphere(D3DVECTOR(-10.0f,  2.0f,  4.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-10.0f,  2.0f, -4.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-10.0f,  9.0f,  0.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 14.0f,  0.0f), 1.5f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(-3.0f, 8.0f, 0.0f), 14.0f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 40.0f);
    }
 
-   if ( m_type == OBJECT_TOWER )
+   if ( m_type == OBJECT_ALIEN9 )  // torture ?
    {
-       pModFile->ReadModel("objects\\tower.mod");
+       pModFile->ReadModel("objects\\alien9.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
@@ -2969,264 +2940,873 @@ BOOL CObject::CreateBuilding(D3DVECTOR pos, float angle, float height,
        m_engine->SetObjectType(rank, TYPEDESCENDANT);
        SetObjectRank(1, rank);
        SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\roller2c.mod");
+       pModFile->ReadModel("objects\\alien91.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(0.0f, 20.0f, 0.0f));
-       SetAngleZ(1, PI/2.0f);
+       SetPosition(1, D3DVECTOR(0.0f, 34.0f, 0.0f));
 
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEDESCENDANT);
        SetObjectRank(2, rank);
        SetObjectParent(2, 1);
-       pModFile->ReadModel("objects\\roller3c.mod");
+       pModFile->ReadModel("objects\\alien92.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(2, D3DVECTOR(4.5f, 0.0f, 0.0f));
-       SetAngleZ(2, 0.0f);
+       SetPosition(2, D3DVECTOR(0.0f, -1.0f, 0.0f));
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(3, rank);
+       SetObjectParent(3, 2);
+       pModFile->ReadModel("objects\\alien93.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(3, D3DVECTOR(0.0f, 1.0f, 0.0f));
 
-       CreateCrashSphere(D3DVECTOR(0.0f,  0.0f, 0.0f), 6.5f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(0.0f,  8.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(0.0f, 15.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(0.0f, 24.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 5.0f, 0.0f), 7.0f);
+       CreateCrashLine(FPOINT(-15.0f, -15.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 15.0f, -15.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 15.0f,  15.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-15.0f,  15.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-15.0f, -15.0f), SOUND_BOUMm, 0.45f);
+   }
 
-       m_character.posPower = D3DVECTOR(5.0f, 3.0f, 0.0f);
+   if ( m_type == OBJECT_INCA1 )  // temple ?
+   {
+       pModFile->ReadModel("objects\\inca1.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
-       CreateShadowCircle(6.0f, 1.0f);
-       m_showLimitRadius = BLITZPARA;
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
    }
 
-   if ( m_type == OBJECT_NUCLEAR )
+   if ( m_type == OBJECT_INCA2 )  // temple ?
    {
-       pModFile->ReadModel("objects\\nuclear1.mod");
+       pModFile->ReadModel("objects\\inca2.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(1, rank);
-       SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\nuclear2.mod");
+       CreateCrashLine(FPOINT(-10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+   }
+
+   if ( m_type == OBJECT_INCA3 )  // temple ?
+   {
+       pModFile->ReadModel("objects\\inca3.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(20.0f, 10.0f, 0.0f));
-       SetAngleZ(1, 135.0f*PI/180.0f);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
-       CreateCrashSphere(D3DVECTOR( 0.0f,  0.0f, 0.0f), 19.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 0.0f, 24.0f, 0.0f), 15.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(22.0f,  1.0f, 0.0f),  1.5f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 17.0f, 0.0f), 26.0f);
+       CreateCrashLine(FPOINT(-50.0f, -30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 50.0f, -30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 50.0f,  30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-50.0f,  30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-50.0f, -30.0f), SOUND_BOUMm, 0.45f);
+   }
 
-       m_character.posPower = D3DVECTOR(22.0f, 3.0f, 0.0f);
+   if ( m_type == OBJECT_INCA4 )  // temple ?
+   {
+       pModFile->ReadModel("objects\\inca4.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
-       CreateShadowCircle(21.0f, 1.0f);
+       CreateCrashLine(FPOINT(-40.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -10.0f), SOUND_BOUMm, 0.45f);
    }
 
-   if ( m_type == OBJECT_PARA )
+   if ( m_type == OBJECT_INCA5 )  // temple ?
    {
-       pModFile->ReadModel("objects\\para.mod");
+       pModFile->ReadModel("objects\\inca5.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
 
-       m_terrain->AddBuildingLevel(pos, 16.0f, 18.0f, 1.0f, 0.5f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+   }
 
-       CreateCrashSphere(D3DVECTOR( 13.0f,  3.0f,  13.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 11.0f, 15.0f,  11.0f),  2.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-13.0f,  3.0f,  13.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-11.0f, 15.0f, -11.0f),  2.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 13.0f,  3.0f, -13.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 11.0f, 15.0f, -11.0f),  2.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-13.0f,  3.0f, -13.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-11.0f, 15.0f, -11.0f),  2.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 26.0f,   0.0f),  9.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 54.0f,   0.0f), 14.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 20.0f);
+   if ( m_type == OBJECT_INCA6 )  // statue ?
+   {
+       pModFile->ReadModel("objects\\inca6.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
-       CreateShadowCircle(21.0f, 1.0f);
-       m_showLimitRadius = BLITZPARA;
+       CreateCrashLine(FPOINT(-10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f, -10.0f), SOUND_BOUMm, 0.45f);
    }
 
-   if ( m_type == OBJECT_SAFE )
+   if ( m_type == OBJECT_INCA7 )  // temple électrocuteur ?
    {
-       pModFile->ReadModel("objects\\safe1.mod");
+       pModFile->ReadModel("objects\\inca71.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
 
-       rank = m_engine->CreateObject();
+       rank = m_engine->CreateObject();  // bouton rouge
        m_engine->SetObjectType(rank, TYPEDESCENDANT);
        SetObjectRank(1, rank);
        SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\safe2.mod");
+       pModFile->ReadModel("objects\\inca72.mod");
        pModFile->CreateEngineObject(rank);
-       SetZoom(1, 1.05f);
+       SetPosition(1, D3DVECTOR(-10.0f, 5.0f, 0.0f));
 
-       rank = m_engine->CreateObject();
+       rank = m_engine->CreateObject();  // pilier
        m_engine->SetObjectType(rank, TYPEDESCENDANT);
        SetObjectRank(2, rank);
        SetObjectParent(2, 0);
-       pModFile->ReadModel("objects\\safe3.mod");
+       pModFile->ReadModel("objects\\inca73.mod");
        pModFile->CreateEngineObject(rank);
-       SetZoom(2, 1.05f);
+       SetPosition(2, D3DVECTOR(0.0f, 10.0f, 0.0f));
 
-       m_terrain->AddBuildingLevel(pos, 18.0f, 20.0f, 1.0f, 0.5f);
+       rank = m_engine->CreateObject();  // porte gauche
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(3, rank);
+       SetObjectParent(3, 2);
+       pModFile->ReadModel("objects\\inca74.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(3, D3DVECTOR(0.0f, 25.0f, 0.0f));
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 1.0f, 0.0f), 13.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 1.0f, 0.0f), 13.0f);
+       rank = m_engine->CreateObject();  // porte droite
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(4, rank);
+       SetObjectParent(4, 2);
+       pModFile->ReadModel("objects\\inca75.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(4, D3DVECTOR(0.0f, 25.0f, 0.0f));
+   
+       // bouton rouge :
+       CreateCrashSphere(D3DVECTOR(-12.0f, 3.0f,  0.0f), 3.0f, SOUND_BOUMm, 0.44f);
 
-       CreateShadowCircle(23.0f, 1.0f);
+       CreateCrashLine(FPOINT(-10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f, -10.0f), SOUND_BOUMm, 0.45f);
    }
 
-   if ( m_type == OBJECT_HUSTON )
+   if ( m_type == OBJECT_BUILDING1 )  // bâtiment ?
    {
-       pModFile->ReadModel("objects\\huston1.mod");
+       pModFile->ReadModel("objects\\buildin1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(1, rank);
-       SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\huston2.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(0.0f, 39.0f, 30.0f));
-       SetAngleY(1, -PI/2.0f);
-       SetZoom(1, 3.0f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+   }
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(2, rank);
-       SetObjectParent(2, 1);
-       pModFile->ReadModel("objects\\huston3.mod");
+   if ( m_type == OBJECT_BUILDING2 )  // bâtiment ?
+   {
+       pModFile->ReadModel("objects\\buildin2.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(2, D3DVECTOR(0.0f, 4.5f, 1.9f));
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
-       CreateCrashSphere(D3DVECTOR( 15.0f,  6.0f, -53.0f), 16.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-15.0f,  6.0f, -53.0f), 16.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 15.0f,  6.0f, -26.0f), 16.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-15.0f,  6.0f, -26.0f), 16.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 15.0f,  6.0f,   0.0f), 16.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-15.0f,  6.0f,   0.0f), 16.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 15.0f,  6.0f,  26.0f), 16.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-15.0f,  6.0f,  26.0f), 16.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 15.0f,  6.0f,  53.0f), 16.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-15.0f,  6.0f,  53.0f), 16.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 27.0f,  30.0f), 12.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 45.0f,  30.0f), 14.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 26.0f,  4.0f, -61.0f),  5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-26.0f,  4.0f, -61.0f),  5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 26.0f,  4.0f,  61.0f),  5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-26.0f,  4.0f,  61.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
    }
 
-   if ( m_type == OBJECT_TARGET1 )
+   if ( m_type == OBJECT_BUILDING3 )  // bâtiment ?
    {
-       pModFile->ReadModel("objects\\target1.mod");
+       pModFile->ReadModel("objects\\buildin3.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, 1.5f);
        SetFloorHeight(0.0f);
 
-       CreateCrashSphere(D3DVECTOR(  0.0f, 50.0f+14.0f, 0.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( -7.0f, 50.0f+12.0f, 0.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  7.0f, 50.0f+12.0f, 0.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-12.0f, 50.0f+ 7.0f, 0.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 12.0f, 50.0f+ 7.0f, 0.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-14.0f, 50.0f+ 0.0f, 0.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 14.0f, 50.0f+ 0.0f, 0.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-12.0f, 50.0f- 7.0f, 0.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 12.0f, 50.0f- 7.0f, 0.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( -7.0f, 50.0f-12.0f, 0.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  7.0f, 50.0f-12.0f, 0.0f),  3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 50.0f-14.0f, 0.0f),  3.0f, SOUND_BOUMm, 0.45f);
-
-       CreateCrashSphere(D3DVECTOR(0.0f, 30.0f, 0.0f), 2.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(0.0f, 24.0f, 0.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(0.0f, 16.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(0.0f,  4.0f, 0.0f), 8.0f, SOUND_BOUMm, 0.45f);
-
-       CreateShadowCircle(15.0f, 1.0f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f, -40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f,  40.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-40.0f, -40.0f), SOUND_BOUMm, 0.45f);
    }
 
-   if ( m_type == OBJECT_TARGET2 )
+   if ( m_type == OBJECT_CARCASS1 )  // carcasse ?
    {
-       pModFile->ReadModel("objects\\target2.mod");
+       pModFile->ReadModel("objects\\carcass1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
+       SetZoom(0, 1.4f);
+
+       CreateCrashLine(FPOINT(-6.0f, -3.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 6.0f, -3.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 6.0f,  3.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-6.0f,  3.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-6.0f, -3.0f), SOUND_BOUMm, 0.45f);
 
-       height += 50.0f*1.5f;
+       CreateShadowCircle(4.6f, 1.0f, D3DSHADOWCAR07);
+       FloorAdjust();
    }
 
-   if ( m_type == OBJECT_NEST )
+   if ( m_type == OBJECT_CARCASS2 )  // carcasse ?
    {
-       pModFile->ReadModel("objects\\nest.mod");
+       pModFile->ReadModel("objects\\carcass2.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
+       SetZoom(0, 1.4f);
 
-       m_terrain->AddBuildingLevel(pos, 3.0f, 5.0f, 1.0f, 0.5f);
+       CreateCrashLine(FPOINT(-6.0f, -3.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 6.0f, -3.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 6.0f,  3.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-6.0f,  3.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-6.0f, -3.0f), SOUND_BOUMm, 0.45f);
 
-       CreateShadowCircle(4.0f, 1.0f);
+       CreateShadowCircle(7.0f, 0.2f);
+       FloorAdjust();
    }
 
-   if ( m_type == OBJECT_START )
+   if ( m_type == OBJECT_ORGA1 )  // organique ?
    {
-       pModFile->ReadModel("objects\\start.mod");
+       pModFile->ReadModel("objects\\orga1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
+       SetZoom(0, zoom);
 
-       m_terrain->AddBuildingLevel(pos, 7.0f, 9.0f, 1.0f, 0.5f);
+       CreateCrashSphere(D3DVECTOR(-25.0f, 3.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 24.0f, 3.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
    }
 
-   if ( m_type == OBJECT_END )
+   if ( m_type == OBJECT_ORGA2 )  // organique ?
    {
-       pModFile->ReadModel("objects\\end.mod");
+       pModFile->ReadModel("objects\\orga2.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
        SetFloorHeight(0.0f);
+       SetZoom(0, zoom);
 
-       m_terrain->AddBuildingLevel(pos, 7.0f, 9.0f, 1.0f, 0.5f);
+       CreateCrashSphere(D3DVECTOR(-25.0f, 3.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 28.0f, 3.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
    }
 
-#if 0
-   if ( power > 0.0f )  // crée une pile ?
+   if ( m_type == OBJECT_ORGA3 )  // organique ?
    {
-       CObject*    pPower;
-
-       pPower = new CObject(m_iMan);
-       pPower->SetType(power<=1.0f?OBJECT_POWER:OBJECT_ATOMIC);
+       pModFile->ReadModel("objects\\orga3.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+       SetZoom(0, zoom);
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       pPower->SetObjectRank(0, rank);
+       CreateCrashSphere(D3DVECTOR(-25.0f, 3.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 24.0f, 3.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
+   }
 
-       if ( power <= 1.0f )  pModFile->ReadModel("objects\\power.mod");
-       else                  pModFile->ReadModel("objects\\atomic.mod");
+   if ( m_type == OBJECT_TOWER )
+   {
+       pModFile->ReadModel("objects\\tower1.mod");
        pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
 
-       pPower->SetPosition(0, RetCharacter()->posPower);
-       pPower->CreateCrashSphere(D3DVECTOR(0.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       pPower->SetGlobalSphere(D3DVECTOR(0.0f, 1.0f, 0.0f), 1.5f);
-
-       pPower->SetTruck(this);
-       SetPower(pPower);
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\tower2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR(0.0f, 40.0f, 0.0f));
 
-       if ( power <= 1.0f )  pPower->SetEnergy(power);
-       else                  pPower->SetEnergy(power/100.0f);
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(2, rank);
+       SetObjectParent(2, 1);
+       pModFile->ReadModel("objects\\tower3.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(2, D3DVECTOR(0.0f, 9.0f, 0.0f));
+       SetAngleZ(2, 0.0f);
+
+       CreateCrashSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 11.0f, SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 7.0f, 0.0f), 11.0f);
+
+       CreateShadowCircle(9.0f, 1.0f);
+   }
+
+   if ( m_type == OBJECT_NUCLEAR )
+   {
+       pModFile->ReadModel("objects\\nuclear1.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       CreateCrashSphere(D3DVECTOR( 0.0f,  0.0f, 0.0f), 55.0f, SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 60.0f);
+   }
+
+   if ( m_type == OBJECT_PARA )
+   {
+       pModFile->ReadModel("objects\\para.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       m_terrain->AddBuildingLevel(pos, 24.5f, 27.4f, 2.2f, 0.5f);
+
+       CreateCrashSphere(D3DVECTOR( 19.5f, 4.5f,  19.5f), 4.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-19.5f, 4.5f,  19.5f), 4.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 19.5f, 4.5f, -19.5f), 4.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-19.5f, 4.5f, -19.5f), 4.5f, SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 15.0f, 0.0f), 30.0f);
+   }
+
+   if ( m_type == OBJECT_COMPUTER )
+   {
+       pModFile->ReadModel("objects\\compu1.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       rank = m_engine->CreateObject();  // bouton rouge
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\compu2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR(-6.0f, 5.0f, 0.0f));
+       SetZoom(1, D3DVECTOR(0.8f, 0.7f, 0.7f));
+
+       rank = m_engine->CreateObject();  // bouton rouge
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(2, rank);
+       SetObjectParent(2, 0);
+       pModFile->ReadModel("objects\\compu2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(2, D3DVECTOR(3.0f, 5.0f, -5.2f));
+       SetZoom(2, D3DVECTOR(0.8f, 0.7f, 0.7f));
+       SetAngleY(2, -120.0f*PI/180.0f);
+
+       rank = m_engine->CreateObject();  // bouton rouge
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(3, rank);
+       SetObjectParent(3, 0);
+       pModFile->ReadModel("objects\\compu2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(3, D3DVECTOR(3.0f, 5.0f, 5.2f));
+       SetZoom(3, D3DVECTOR(0.8f, 0.7f, 0.7f));
+       SetAngleY(3, 120.0f*PI/180.0f);
+
+       // boutons rouges :
+       CreateCrashSphere(D3DVECTOR(-9.0f, 3.0f,  0.0f), 2.0f, SOUND_BOUMm, 0.44f);
+       CreateCrashSphere(D3DVECTOR( 4.4f, 3.0f,  7.8f), 2.0f, SOUND_BOUMm, 0.43f);
+       CreateCrashSphere(D3DVECTOR( 4.4f, 3.0f, -7.8f), 2.0f, SOUND_BOUMm, 0.42f);
+
+       CreateCrashSphere(D3DVECTOR( 0.0f,  2.0f, 0.0f), 9.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 10.0f, 0.0f), 9.0f, SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 10.0f);
+       CreateShadowCircle(12.0f, 1.0f);
+   }
+
+   if ( m_type == OBJECT_REPAIR )
+   {
+       pModFile->ReadModel("objects\\repair1.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\repair2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR(-11.0f, 13.5f, 0.0f));
+       SetAngleZ(1, PI*0.5f);
+
+       CreateCrashSphere(D3DVECTOR(-11.0f, 3.0f, 0.0f), 8.0f, SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(-11.0f, 3.0f, 0.0f), 8.0f);
+       m_terrain->AddBuildingLevel(pos, 7.0f, 9.0f, 1.0f, 0.5f);
+   }
+
+   if ( m_type == OBJECT_SWEET )
+   {
+       pModFile->ReadModel("objects\\sweet.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       CreateCrashSphere(D3DVECTOR(-4.0f, 3.0f, 0.0f), 7.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 4.0f, 3.0f, 0.0f), 7.0f, SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 10.0f);
+       CreateShadowCircle(12.0f, 1.0f);
    }
+
+   if ( m_type == OBJECT_DOOR1 )
+   {
+       pModFile->ReadModel("objects\\door10.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\door11.mod");
+       pModFile->CreateEngineObject(rank);
+
+       // Sphères déplacées par MoveCrashSphere.
+       CreateCrashSphere(D3DVECTOR(  0.0f, 35.0f,  24.0f),  6.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 35.0f,  12.0f),  6.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 35.0f,   0.0f),  6.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 35.0f, -12.0f),  6.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 35.0f, -24.0f),  6.0f, SOUND_BOUMm, 0.45f);
+
+#if 0
+       CreateCrashSphere(D3DVECTOR(  5.0f,  3.0f,  42.0f), 12.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( -5.0f,  3.0f,  42.0f), 12.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 14.0f,  3.0f,  33.0f),  3.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-14.0f,  3.0f,  33.0f),  3.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 14.0f,  3.0f,  51.0f),  3.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-14.0f,  3.0f,  51.0f),  3.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 36.0f,  38.0f),  9.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  5.0f,  3.0f, -42.0f), 12.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( -5.0f,  3.0f, -42.0f), 12.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 14.0f,  3.0f, -33.0f),  3.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-14.0f,  3.0f, -33.0f),  3.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 14.0f,  3.0f, -51.0f),  3.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-14.0f,  3.0f, -51.0f),  3.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 36.0f, -38.0f),  9.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-17.0f,  30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 17.0f,  30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 17.0f,  55.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-17.0f,  55.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-17.0f,  30.0f), SOUND_BOUMm, 0.45f);
+
+       CreateCrashLine(FPOINT(-17.0f, -55.0f), SOUND_BOUMm, 0.45f, TRUE);
+       CreateCrashLine(FPOINT( 17.0f, -55.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 17.0f, -30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-17.0f, -30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-17.0f, -55.0f), SOUND_BOUMm, 0.45f);
 #endif
+   }
+
+   if ( m_type == OBJECT_DOOR2 )
+   {
+       pModFile->ReadModel("objects\\door20.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       // machoire gauche
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\door21.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR(0.0f, 17.0f, 20.0f));
+
+       // machoire droite
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(2, rank);
+       SetObjectParent(2, 0);
+       pModFile->ReadModel("objects\\door21.mod");
+       pModFile->Mirror();
+       pModFile->CreateEngineObject(rank);
+       SetPosition(2, D3DVECTOR(0.0f, 17.0f, -20.0f));
+
+       // grande roue
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(3, rank);
+       SetObjectParent(3, 0);
+       pModFile->ReadModel("objects\\door23.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(3, D3DVECTOR(21.0f, 9.0f, -38.0f));
+
+       // piston
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(4, rank);
+       SetObjectParent(4, 0);
+       pModFile->ReadModel("objects\\door24.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(4, D3DVECTOR(26.0f, 28.0f, -38.0f));
+
+       // bielle
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(5, rank);
+       SetObjectParent(5, 4);
+       pModFile->ReadModel("objects\\door25.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(5, D3DVECTOR(0.0f, 0.0f, 0.0f));
+
+       // petite roue
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(6, rank);
+       SetObjectParent(6, 0);
+       pModFile->ReadModel("objects\\door26.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(6, D3DVECTOR(21.0f, 17.0f, -42.0f));
+
+       // Sphères déplacées par MoveCrashSphere.
+       CreateCrashSphere(D3DVECTOR(-15.0f, 5.0f, -23.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( -8.0f, 5.0f, -23.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 5.0f, -23.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  8.0f, 5.0f, -23.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f, 5.0f, -23.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       // Sphères déplacées par MoveCrashSphere.
+       CreateCrashSphere(D3DVECTOR(-15.0f, 5.0f,  23.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( -8.0f, 5.0f,  23.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 5.0f,  23.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  8.0f, 5.0f,  23.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f, 5.0f,  23.0f),  4.0f, SOUND_BOUMm, 0.45f);
+
+       // Sphère du mécanisme.
+       CreateCrashSphere(D3DVECTOR( 20.0f, 4.0f, -38.0f),  7.0f, SOUND_BOUMm, 0.44f);
+
+       CreateCrashSphere(D3DVECTOR(-12.0f, 5.0f, -38.0f),  9.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 5.0f, -38.0f),  9.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 12.0f, 5.0f, -38.0f),  9.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 5.0f, -48.0f), 11.0f, SOUND_BOUMm, 0.45f);
+
+       CreateCrashSphere(D3DVECTOR(-12.0f, 5.0f,  38.0f),  9.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 5.0f,  38.0f),  9.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 12.0f, 5.0f,  38.0f),  9.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 5.0f,  48.0f), 11.0f, SOUND_BOUMm, 0.45f);
+   }
+
+   if ( m_type == OBJECT_DOOR3 )
+   {
+       pModFile->ReadModel("objects\\door30.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       // piston écraseur
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\door31.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR(0.0f, 20.0f, 0.0f));
+
+       // grande roue
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(3, rank);
+       SetObjectParent(3, 0);
+       pModFile->ReadModel("objects\\door23.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(3, D3DVECTOR(21.0f, 9.0f, -43.0f));
+
+       // piston
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(4, rank);
+       SetObjectParent(4, 0);
+       pModFile->ReadModel("objects\\door24.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(4, D3DVECTOR(26.0f, 28.0f, -43.0f));
+
+       // bielle
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(5, rank);
+       SetObjectParent(5, 4);
+       pModFile->ReadModel("objects\\door25.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(5, D3DVECTOR(0.0f, 0.0f, 0.0f));
+
+       // petite roue
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(6, rank);
+       SetObjectParent(6, 0);
+       pModFile->ReadModel("objects\\door26.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(6, D3DVECTOR(21.0f, 17.0f, -47.0f));
+
+       // Sphères déplacées par MoveCrashSphere.
+       CreateCrashSphere(D3DVECTOR( 14.0f, 25.0f,   0.0f),  6.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-14.0f, 25.0f,   0.0f),  6.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 25.0f,  14.0f),  6.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 25.0f, -14.0f),  6.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 10.0f, 25.0f,  10.0f),  6.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 10.0f, 25.0f, -10.0f),  6.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-10.0f, 25.0f,  10.0f),  6.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-10.0f, 25.0f, -10.0f),  6.0f, SOUND_BOUMm, 0.45f);
+
+       // Sphère du mécanisme.
+       CreateCrashSphere(D3DVECTOR( 20.0f, 4.0f, -43.0f),  7.0f, SOUND_BOUMm, 0.44f);
+
+#if 0
+       CreateCrashSphere(D3DVECTOR(  0.0f, 5.0f, -48.0f), 20.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f, 5.0f, -35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-15.0f, 5.0f, -35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f, 5.0f, -61.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-15.0f, 5.0f, -61.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 25.0f, 3.0f, -32.5f),  3.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-25.0f, 3.0f, -32.5f),  3.0f, SOUND_BOUMm, 0.45f);
+
+       CreateCrashSphere(D3DVECTOR(  0.0f, 5.0f,  48.0f), 20.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f, 5.0f,  35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-15.0f, 5.0f,  35.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f, 5.0f,  61.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-15.0f, 5.0f,  61.0f),  5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 25.0f, 3.0f,  32.5f),  3.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-25.0f, 3.0f,  32.5f),  3.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashSphere(D3DVECTOR( 25.0f, 3.0f, -32.5f),  3.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-25.0f, 3.0f, -32.5f),  3.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 25.0f, 3.0f,  32.5f),  3.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-25.0f, 3.0f,  32.5f),  3.0f, SOUND_BOUMm, 0.45f);
+
+       CreateCrashLine(FPOINT(-20.0f,  30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  67.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  67.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  30.0f), SOUND_BOUMm, 0.45f);
+
+       CreateCrashLine(FPOINT(-20.0f, -67.0f), SOUND_BOUMm, 0.45f, TRUE);
+       CreateCrashLine(FPOINT( 20.0f, -67.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f, -30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -30.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -67.0f), SOUND_BOUMm, 0.45f);
+#endif
+   }
+
+   if ( m_type == OBJECT_DOOR4 )
+   {
+       pModFile->ReadModel("objects\\door40.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f,  34.0f), 6.0f, SOUND_CHOCm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, -34.0f), 6.0f, SOUND_CHOCm, 0.45f);
+   }
+
+   if ( m_type == OBJECT_DOCK )
+   {
+       pModFile->ReadModel("objects\\dock1.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\dock2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR(0.0f, 20.0f, 0.0f));
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(2, rank);
+       SetObjectParent(2, 1);
+       pModFile->ReadModel("objects\\dock3.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(2, D3DVECTOR(0.0f, 0.0f, 0.0f));
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(3, rank);
+       SetObjectParent(3, 2);
+       pModFile->ReadModel("objects\\dock4.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(3, D3DVECTOR(0.0f, (16.0f-14.0f)*3.0f/10.0f, 0.0f));
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(4, rank);
+       SetObjectParent(4, 2);
+       pModFile->ReadModel("objects\\dock5.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(4, D3DVECTOR(0.0f, (16.0f-14.0f)*6.0f/10.0f, 0.0f));
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(5, rank);
+       SetObjectParent(5, 2);
+       pModFile->ReadModel("objects\\dock6.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(5, D3DVECTOR(0.0f, 16.0f-14.0f, 0.0f));
+
+       m_terrain->AddBuildingLevel(pos, 7.0f, 9.0f, 1.0f, 0.5f);
+       m_terrain->AddSlowerZone(pos, 20.0f, 30.0f, 0.2f);
+
+#if 0
+       CreateCrashSphere(D3DVECTOR(  0.0f, 6.0f, 27.0f), 15.0f, SOUND_BOUMm, 0.45f);
+
+       CreateCrashSphere(D3DVECTOR(-15.5f, 2.0f,-12.0f),  1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-15.0f, 7.0f,-12.0f),  1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-15.5f, 2.0f, 12.0f),  1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-14.0f, 2.0f, 17.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-14.0f, 2.0f, 22.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-14.0f, 2.0f, 27.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-14.0f, 2.0f, 32.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-14.0f, 2.0f, 37.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-15.5f, 2.0f, 42.0f),  1.5f, SOUND_BOUMm, 0.45f);
+
+       CreateCrashSphere(D3DVECTOR( 15.5f, 2.0f,-12.0f),  1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f, 7.0f,-12.0f),  1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.5f, 2.0f, 12.0f),  1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 14.0f, 2.0f, 17.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 14.0f, 2.0f, 22.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 14.0f, 2.0f, 27.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 14.0f, 2.0f, 32.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 14.0f, 2.0f, 37.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.5f, 2.0f, 42.0f),  1.5f, SOUND_BOUMm, 0.45f);
+
+       CreateCrashSphere(D3DVECTOR(-10.0f, 2.0f, 14.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( -5.0f, 2.0f, 14.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 2.0f, 14.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 10.0f, 2.0f, 14.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 10.0f, 2.0f, 14.0f),  2.5f, SOUND_BOUMm, 0.45f);
+
+       CreateCrashSphere(D3DVECTOR(-10.0f, 2.0f, 40.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( -5.0f, 2.0f, 40.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(  0.0f, 2.0f, 40.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 10.0f, 2.0f, 40.0f),  2.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 10.0f, 2.0f, 40.0f),  2.5f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashSphere(D3DVECTOR(-15.5f, 2.0f,-12.0f),  1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-15.0f, 7.0f,-12.0f),  1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.5f, 2.0f,-12.0f),  1.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 15.0f, 7.0f,-12.0f),  1.5f, SOUND_BOUMm, 0.45f);
+
+       CreateCrashLine(FPOINT(-15.0f, 12.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 15.0f, 12.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 15.0f, 42.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-15.0f, 42.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-15.0f, 12.0f), SOUND_BOUMm, 0.45f);
+#endif
+   }
+
+   if ( m_type == OBJECT_REMOTE )
+   {
+       pModFile->ReadModel("objects\\remote1.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\remote2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR(3.6f, 4.4f, 0.0f));
+
+       m_terrain->AddBuildingLevel(pos, 7.0f, 9.0f, 1.0f, 0.5f);
+
+       CreateCrashSphere(D3DVECTOR( 6.0f, 3.0f,  4.0f), 1.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 6.0f, 3.0f,  0.0f), 1.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 6.0f, 3.0f, -4.0f), 1.0f, SOUND_BOUMm, 0.45f);
+   }
+
+   if ( m_type == OBJECT_STAND )
+   {
+       pModFile->ReadModel("objects\\stand.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       m_terrain->AddBuildingLevel(pos, 7.0f, 9.0f, 1.0f, 0.5f);
+
+       CreateCrashLine(FPOINT(-30.0f, -60.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 22.0f, -60.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 22.0f,  60.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-30.0f,  60.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-30.0f, -60.0f), SOUND_BOUMm, 0.45f);
+   }
+
+   if ( m_type == OBJECT_GENERATOR )
+   {
+       pModFile->ReadModel("objects\\generat.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+   }
+
+   if ( m_type == OBJECT_START )
+   {
+       pModFile->ReadModel("objects\\start.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       m_terrain->AddBuildingLevel(pos, 7.0f, 9.0f, 1.0f, 0.5f);
+   }
+
+   if ( m_type == OBJECT_END )
+   {
+       pModFile->ReadModel("objects\\end.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+
+       m_terrain->AddBuildingLevel(pos, 7.0f, 9.0f, 1.0f, 0.5f);
+   }
+
+   if ( m_type == OBJECT_SUPPORT )
+   {
+       pModFile->ReadModel("objects\\support.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+       SetFloorHeight(0.0f);
+   }
 
    pos = RetPosition(0);
    pos.y += height;
@@ -3241,13 +3821,13 @@ BOOL CObject::CreateBuilding(D3DVECTOR pos, float angle, float height,
 
 // Crée une petite ressource posée sur le sol.
 
-BOOL CObject::CreateResource(D3DVECTOR pos, float angle, ObjectType type,
-                            float power)
+BOOL CObject::CreateResource(D3DVECTOR pos, float angle, float zoom,
+                            ObjectType type, BOOL bPlumb)
 {
    CModFile*   pModFile;
    char        name[50];
    int         rank;
-   float       radius, height;
+   float       radius, height, density;
 
    if ( type != OBJECT_SHOW )
    {
@@ -3261,13 +3841,14 @@ BOOL CObject::CreateResource(D3DVECTOR pos, float angle, ObjectType type,
    rank = m_engine->CreateObject();
    m_engine->SetObjectType(rank, TYPEFIX);  // c'est un objet fixe
    SetObjectRank(0, rank);
-   SetEnergy(power);
+   m_character.mass = 1000.0f;
 
    name[0] = 0;
    if ( type == OBJECT_STONE       )  strcpy(name, "objects\\stone.mod");
    if ( type == OBJECT_URANIUM     )  strcpy(name, "objects\\uranium.mod");
    if ( type == OBJECT_METAL       )  strcpy(name, "objects\\metal.mod");
-   if ( type == OBJECT_POWER       )  strcpy(name, "objects\\power.mod");
+   if ( type == OBJECT_BARREL      )  strcpy(name, "objects\\barrel.mod");
+   if ( type == OBJECT_BARRELa     )  strcpy(name, "objects\\barrela.mod");
    if ( type == OBJECT_ATOMIC      )  strcpy(name, "objects\\atomic.mod");
    if ( type == OBJECT_BULLET      )  strcpy(name, "objects\\bullet.mod");
    if ( type == OBJECT_BBOX        )  strcpy(name, "objects\\bbox.mod");
@@ -3276,30 +3857,99 @@ BOOL CObject::CreateResource(D3DVECTOR pos, float angle, ObjectType type,
    if ( type == OBJECT_KEYc        )  strcpy(name, "objects\\keyc.mod");
    if ( type == OBJECT_KEYd        )  strcpy(name, "objects\\keyd.mod");
    if ( type == OBJECT_TNT         )  strcpy(name, "objects\\tnt.mod");
-   if ( type == OBJECT_SCRAP1      )  strcpy(name, "objects\\scrap1.mod");
-   if ( type == OBJECT_SCRAP2      )  strcpy(name, "objects\\scrap2.mod");
-   if ( type == OBJECT_SCRAP3      )  strcpy(name, "objects\\scrap3.mod");
-   if ( type == OBJECT_SCRAP4      )  strcpy(name, "objects\\scrap4.mod");
-   if ( type == OBJECT_SCRAP5      )  strcpy(name, "objects\\scrap5.mod");
-   if ( type == OBJECT_BOMB        )  strcpy(name, "objects\\bomb.mod");
+   if ( type == OBJECT_MINE        )  strcpy(name, "objects\\mine.mod");
+   if ( type == OBJECT_POLE        )  strcpy(name, "objects\\pole.mod");
+   if ( type == OBJECT_BOMB        )  strcpy(name, "objects\\bomb1.mod");
+   if ( type == OBJECT_CONE        )  strcpy(name, "objects\\cone.mod");
+   if ( type == OBJECT_PIPES       )  strcpy(name, "objects\\pipes.mod");
    if ( type == OBJECT_WAYPOINT    )  strcpy(name, "objects\\waypoint.mod");
+   if ( type == OBJECT_TRAJECT     )  strcpy(name, "objects\\traject.mod");
+   if ( type == OBJECT_TARGET      )  strcpy(name, "objects\\xxx.mod");
    if ( type == OBJECT_SHOW        )  strcpy(name, "objects\\show.mod");
    if ( type == OBJECT_WINFIRE     )  strcpy(name, "objects\\winfire.mod");
    if ( type == OBJECT_BAG         )  strcpy(name, "objects\\bag.mod");
-   if ( type == OBJECT_MARKSTONE   )  strcpy(name, "objects\\cross1.mod");
-   if ( type == OBJECT_MARKURANIUM )  strcpy(name, "objects\\cross3.mod");
-   if ( type == OBJECT_MARKPOWER   )  strcpy(name, "objects\\cross2.mod");
-   if ( type == OBJECT_MARKKEYa    )  strcpy(name, "objects\\crossa.mod");
-   if ( type == OBJECT_MARKKEYb    )  strcpy(name, "objects\\crossb.mod");
-   if ( type == OBJECT_MARKKEYc    )  strcpy(name, "objects\\crossc.mod");
-   if ( type == OBJECT_MARKKEYd    )  strcpy(name, "objects\\crossd.mod");
-   if ( type == OBJECT_EGG         )  strcpy(name, "objects\\egg.mod");
+   if ( type == OBJECT_MARK        )  strcpy(name, "objects\\mark.mod");
+   if ( type == OBJECT_CROWN       )  strcpy(name, "objects\\crown.mod");
+   if ( type == OBJECT_ROADSIGN1   )  strcpy(name, "objects\\road1.mod");
+   if ( type == OBJECT_ROADSIGN2   )  strcpy(name, "objects\\road2.mod");
+   if ( type == OBJECT_ROADSIGN3   )  strcpy(name, "objects\\road3.mod");
+   if ( type == OBJECT_ROADSIGN4   )  strcpy(name, "objects\\road4.mod");
+   if ( type == OBJECT_ROADSIGN5   )  strcpy(name, "objects\\road5.mod");
+   if ( type == OBJECT_ROADSIGN6   )  strcpy(name, "objects\\road6.mod");
+   if ( type == OBJECT_ROADSIGN7   )  strcpy(name, "objects\\road7.mod");
+   if ( type == OBJECT_ROADSIGN8   )  strcpy(name, "objects\\road8.mod");
+   if ( type == OBJECT_ROADSIGN9   )  strcpy(name, "objects\\road9.mod");
+   if ( type == OBJECT_ROADSIGN10  )  strcpy(name, "objects\\road10.mod");
+   if ( type == OBJECT_ROADSIGN11  )  strcpy(name, "objects\\road11.mod");
+   if ( type == OBJECT_ROADSIGN12  )  strcpy(name, "objects\\road12.mod");
+   if ( type == OBJECT_ROADSIGN13  )  strcpy(name, "objects\\road13.mod");
+   if ( type == OBJECT_ROADSIGN14  )  strcpy(name, "objects\\road14.mod");
+   if ( type == OBJECT_ROADSIGN15  )  strcpy(name, "objects\\road15.mod");
+   if ( type == OBJECT_ROADSIGN16  )  strcpy(name, "objects\\road16.mod");
+   if ( type == OBJECT_ROADSIGN17  )  strcpy(name, "objects\\road17.mod");
+   if ( type == OBJECT_ROADSIGN18  )  strcpy(name, "objects\\road18.mod");
+   if ( type == OBJECT_ROADSIGN19  )  strcpy(name, "objects\\road19.mod");
+   if ( type == OBJECT_ROADSIGN20  )  strcpy(name, "objects\\road20.mod");
+   if ( type == OBJECT_ROADSIGN21  )  strcpy(name, "objects\\road21.mod");
+   if ( type == OBJECT_ROADSIGN22  )  strcpy(name, "objects\\road22.mod");
+   if ( type == OBJECT_ROADSIGN23  )  strcpy(name, "objects\\road23.mod");
+   if ( type == OBJECT_ROADSIGN24  )  strcpy(name, "objects\\road24.mod");
+   if ( type == OBJECT_ROADSIGN25  )  strcpy(name, "objects\\road25.mod");
+   if ( type == OBJECT_ROADSIGN26  )  strcpy(name, "objects\\road26.mod");
+   if ( type == OBJECT_ROADSIGN27  )  strcpy(name, "objects\\road27.mod");
+   if ( type == OBJECT_ROADSIGN28  )  strcpy(name, "objects\\road28.mod");
+   if ( type == OBJECT_ROADSIGN29  )  strcpy(name, "objects\\road29.mod");
+   if ( type == OBJECT_ROADSIGN30  )  strcpy(name, "objects\\road30.mod");
+   if ( type == OBJECT_PUB11       )  strcpy(name, "objects\\pub11.mod");
+   if ( type == OBJECT_PUB12       )  strcpy(name, "objects\\pub12.mod");
+   if ( type == OBJECT_PUB13       )  strcpy(name, "objects\\pub13.mod");
+   if ( type == OBJECT_PUB14       )  strcpy(name, "objects\\pub14.mod");
+   if ( type == OBJECT_PUB21       )  strcpy(name, "objects\\pub21.mod");
+   if ( type == OBJECT_PUB22       )  strcpy(name, "objects\\pub22.mod");
+   if ( type == OBJECT_PUB23       )  strcpy(name, "objects\\pub23.mod");
+   if ( type == OBJECT_PUB24       )  strcpy(name, "objects\\pub24.mod");
+   if ( type == OBJECT_PUB31       )  strcpy(name, "objects\\pub31.mod");
+   if ( type == OBJECT_PUB32       )  strcpy(name, "objects\\pub32.mod");
+   if ( type == OBJECT_PUB33       )  strcpy(name, "objects\\pub33.mod");
+   if ( type == OBJECT_PUB34       )  strcpy(name, "objects\\pub34.mod");
+   if ( type == OBJECT_PUB41       )  strcpy(name, "objects\\pub41.mod");
+   if ( type == OBJECT_PUB42       )  strcpy(name, "objects\\pub42.mod");
+   if ( type == OBJECT_PUB43       )  strcpy(name, "objects\\pub43.mod");
+   if ( type == OBJECT_PUB44       )  strcpy(name, "objects\\pub44.mod");
+   if ( type == OBJECT_PUB51       )  strcpy(name, "objects\\pub51.mod");
+   if ( type == OBJECT_PUB52       )  strcpy(name, "objects\\pub52.mod");
+   if ( type == OBJECT_PUB53       )  strcpy(name, "objects\\pub53.mod");
+   if ( type == OBJECT_PUB54       )  strcpy(name, "objects\\pub54.mod");
+   if ( type == OBJECT_PUB61       )  strcpy(name, "objects\\pub61.mod");
+   if ( type == OBJECT_PUB62       )  strcpy(name, "objects\\pub62.mod");
+   if ( type == OBJECT_PUB63       )  strcpy(name, "objects\\pub63.mod");
+   if ( type == OBJECT_PUB64       )  strcpy(name, "objects\\pub64.mod");
+   if ( type == OBJECT_PUB71       )  strcpy(name, "objects\\pub71.mod");
+   if ( type == OBJECT_PUB72       )  strcpy(name, "objects\\pub72.mod");
+   if ( type == OBJECT_PUB73       )  strcpy(name, "objects\\pub73.mod");
+   if ( type == OBJECT_PUB74       )  strcpy(name, "objects\\pub74.mod");
+   if ( type == OBJECT_PUB81       )  strcpy(name, "objects\\pub81.mod");
+   if ( type == OBJECT_PUB82       )  strcpy(name, "objects\\pub82.mod");
+   if ( type == OBJECT_PUB83       )  strcpy(name, "objects\\pub83.mod");
+   if ( type == OBJECT_PUB84       )  strcpy(name, "objects\\pub84.mod");
+   if ( type == OBJECT_PUB91       )  strcpy(name, "objects\\pub91.mod");
+   if ( type == OBJECT_PUB92       )  strcpy(name, "objects\\pub92.mod");
+   if ( type == OBJECT_PUB93       )  strcpy(name, "objects\\pub93.mod");
+   if ( type == OBJECT_PUB94       )  strcpy(name, "objects\\pub94.mod");
+   if ( type == OBJECT_TRAXf       )  strcpy(name, "objects\\trax1f.mod");
+
+   if ( (type >= OBJECT_ROADSIGN1  && type <= OBJECT_ROADSIGN30) ||
+        (type >= OBJECT_PUB11      && type <= OBJECT_PUB94     ) )
+   {
+       angle -= PI/2.0f;  // pour des raisons historiques !
+   }
 
    pModFile->ReadModel(name);
    pModFile->CreateEngineObject(rank);
 
    SetPosition(0, pos);
    SetAngleY(0, angle);
+   SetZoom(0, zoom);
 
    if ( type == OBJECT_SHOW )  // reste en l'air ?
    {
@@ -3307,483 +3957,458 @@ BOOL CObject::CreateResource(D3DVECTOR pos, float angle, ObjectType type,
        return TRUE;
    }
 
-   radius = 1.5f;
-   height = 0.0f;
+   radius  = 1.5f;
+   density = 1.0f;
+   height  = 0.0f;
+
+   if ( type == OBJECT_BOMB )
+   {
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\bomb2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR(0.0f, 4.2f, 0.0f));
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(2, rank);
+       SetObjectParent(2, 1);
+       pModFile->ReadModel("objects\\bomb2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(2, D3DVECTOR(0.0f, 2.0f, 0.0f));
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(3, rank);
+       SetObjectParent(3, 2);
+       pModFile->ReadModel("objects\\bomb2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(3, D3DVECTOR(0.0f, 2.0f, 0.0f));
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(4, rank);
+       SetObjectParent(4, 3);
+       pModFile->ReadModel("objects\\bomb2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(4, D3DVECTOR(0.0f, 2.0f, 0.0f));
+   }
 
-   if ( type == OBJECT_MARKSTONE   ||
-        type == OBJECT_MARKURANIUM ||
-        type == OBJECT_MARKKEYa    ||
-        type == OBJECT_MARKKEYb    ||
-        type == OBJECT_MARKKEYc    ||
-        type == OBJECT_MARKKEYd    ||
-        type == OBJECT_MARKPOWER   ||
-        type == OBJECT_WAYPOINT    )
+   if ( type == OBJECT_WAYPOINT    )
    {
    }
-   else if ( type == OBJECT_EGG )
+   else if ( type == OBJECT_TARGET )
    {
-       CreateCrashSphere(D3DVECTOR(-1.0f, 2.8f, 0.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 5.0f, 0.0f), 10.0f);
-       radius = 3.0f;
+       radius = 0.0f;
    }
    else if ( type == OBJECT_BOMB )
    {
-       CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 3.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(0.0f, 1.0f, 0.0f), 2.0f, SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 1.0f, 0.0f), 2.0f);
+       radius = 3.0f;
+   }
+   else if ( type == OBJECT_MINE )
+   {
+       CreateCrashSphere(D3DVECTOR(0.0f, -1.0f, 0.0f), 3.0f, SOUND_BOUMm, 0.45f);
        SetGlobalSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 3.0f);
        radius = 3.0f;
    }
-   else if ( type == OBJECT_BAG )
+   else if ( type == OBJECT_POLE )
+   {
+       CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 3.5f, SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 3.5f);
+       radius = 3.0f;
+   }
+   else if ( type == OBJECT_BAG )
+   {
+       CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f);
+       SetZoom(0, 1.5f);
+       radius =  5.0f;
+       height = -1.4f;
+   }
+   else if ( type == OBJECT_MARK )
+   {
+       CreateCrashSphere(D3DVECTOR(0.0f, 3.0f, 4.0f), 6.0f, SOUND_BOUMm, 0.45f);
+       radius =  10.0f;
+       density = 0.6f;
+   }
+   else if ( type == OBJECT_CROWN )
+   {
+       D3DVECTOR   z;
+       z = RetZoom(0);
+       z.y *= 0.8f;
+       SetZoom(0, z);
+       radius =  12.0f;
+       density = 0.8f;
+   }
+   else if ( type == OBJECT_BARREL  ||
+             type == OBJECT_BARRELa )
+   {
+       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 2.0f, SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 2.0f);
+       radius  = 3.0f;
+       density = 0.6f;
+       m_character.mass = 1500.0f;
+   }
+   else if ( type == OBJECT_CONE )
+   {
+       CreateCrashSphere(D3DVECTOR(0.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMv, 0.45f);
+       radius  = 1.2f;
+       density = 1.0f;
+       m_character.mass = 700.0f;
+   }
+   else if ( type == OBJECT_PIPES )
+   {
+       CreateCrashLine(FPOINT(-20.0f, -6.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f, -6.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  6.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  6.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -6.0f), SOUND_CHOCm, 0.45f);
+       radius  = 0.0f;
+       CreateShadowCircle(20.0f, 1.0f, D3DSHADOWWORM);
+   }
+   else if ( type >= OBJECT_ROADSIGN1 &&
+             type <= OBJECT_ROADSIGN5 )
+   {
+       CreateCrashSphere(D3DVECTOR( 4.0f, 3.0f, 0.0f), 2.0f, SOUND_CHOCo, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 3.0f, 0.0f), 2.0f, SOUND_CHOCo, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-3.0f, 3.0f, 0.0f), 2.0f, SOUND_CHOCo, 0.45f);
+       radius  = 5.0f;
+       density = 0.3f;
+   }
+   else if ( type >= OBJECT_ROADSIGN6  &&
+             type <= OBJECT_ROADSIGN21 )
+   {
+       CreateCrashSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 2.5f, SOUND_CHOCo, 0.45f);
+       radius  = 2.0f;
+       density = 0.3f;
+       bPlumb  = TRUE;  // toujours droit
+   }
+   else if ( type >= OBJECT_ROADSIGN22 &&
+             type <= OBJECT_ROADSIGN25 )
+   {
+       CreateCrashSphere(D3DVECTOR(0.0f, 3.0f,  32.5f), 3.0f, SOUND_CHOCm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(0.0f, 3.0f, -32.5f), 3.0f, SOUND_CHOCm, 0.45f);
+       radius  = 0.0f;
+       bPlumb  = TRUE;  // toujours droit
+   }
+   else if ( type >= OBJECT_PUB11 &&
+             type <= OBJECT_PUB94 )
+   {
+       SetZoom(0, 0.5f*zoom);  // pour éclaircir l'image !!!
+       CreateCrashLine(FPOINT(-15.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT( 15.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT( 15.0f,  1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT(-15.0f,  1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT(-15.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       radius  = 0.0f;
+       bPlumb  = TRUE;  // toujours droit
+   }
+   else if ( type == OBJECT_TRAXf )
+   {
+       // Crée la chenille droite.
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\trax2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR(-1.0f, 3.0f, -4.0f));
+
+       // Crée la chenille gauche.
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(2, rank);
+       SetObjectParent(2, 0);
+       pModFile->ReadModel("objects\\trax3.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(2, D3DVECTOR(-1.0f, 3.0f, 4.0f));
+
+       // Crée la pelle.
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(3, rank);
+       SetObjectParent(3, 0);
+       pModFile->ReadModel("objects\\trax4.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(3, D3DVECTOR(-1.0f, 4.0f, 0.0f));
+
+       // Crée le levier droite.
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(4, rank);
+       SetObjectParent(4, 0);
+       pModFile->ReadModel("objects\\trax5.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(4, D3DVECTOR(-3.5f, 8.0f, -3.0f));
+
+       // Crée le levier gauche.
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(5, rank);
+       SetObjectParent(5, 0);
+       pModFile->ReadModel("objects\\trax5.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(5, D3DVECTOR(-3.5f, 8.0f, 3.0f));
+
+       CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 11.0f, SOUND_CHOCo, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 14.0f);
+       radius = 10.0f;
+   }
+   else if ( type == OBJECT_TRAJECT )
    {
-       CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f);
-       SetZoom(0, 1.5f);
-       radius =  5.0f;
-       height = -1.4f;
+       radius = 0.0f;
    }
    else
    {
        CreateCrashSphere(D3DVECTOR(0.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
        SetGlobalSphere(D3DVECTOR(0.0f, 1.0f, 0.0f), 1.5f);
    }
-   CreateShadowCircle(radius, 1.0f);
-
-   SetFloorHeight(0.0f);
-   CreateOtherObject(type);
-   m_engine->LoadAllTexture();
-   FloorAdjust();
-
-   pos = RetPosition(0);
-   pos.y += height;
-   SetPosition(0, pos);  // pour afficher les ombres tout de suite
-
-   delete pModFile;
-   return TRUE;
-}
-
-// Crée un drapeau posé sur le sol.
-
-BOOL CObject::CreateFlag(D3DVECTOR pos, float angle, ObjectType type)
-{
-   CModFile*   pModFile;
-   char        name[50];
-   int         rank, i;
-
-   if ( m_engine->RetRestCreate() < 1+4 )  return FALSE;
-
-   pModFile = new CModFile(m_iMan);
-
-   SetType(type);
-
-   name[0] = 0;
-   if ( type == OBJECT_FLAGb )  strcpy(name, "objects\\flag1b.mod");
-   if ( type == OBJECT_FLAGr )  strcpy(name, "objects\\flag1r.mod");
-   if ( type == OBJECT_FLAGg )  strcpy(name, "objects\\flag1g.mod");
-   if ( type == OBJECT_FLAGy )  strcpy(name, "objects\\flag1y.mod");
-   if ( type == OBJECT_FLAGv )  strcpy(name, "objects\\flag1v.mod");
-
-   rank = m_engine->CreateObject();
-   m_engine->SetObjectType(rank, TYPEFIX);  // c'est un objet fixe
-   SetObjectRank(0, rank);
-   pModFile->ReadModel(name);
-   pModFile->CreateEngineObject(rank);
-   SetPosition(0, pos);
-   SetAngleY(0, angle);
-
-   name[0] = 0;
-   if ( type == OBJECT_FLAGb )  strcpy(name, "objects\\flag2b.mod");
-   if ( type == OBJECT_FLAGr )  strcpy(name, "objects\\flag2r.mod");
-   if ( type == OBJECT_FLAGg )  strcpy(name, "objects\\flag2g.mod");
-   if ( type == OBJECT_FLAGy )  strcpy(name, "objects\\flag2y.mod");
-   if ( type == OBJECT_FLAGv )  strcpy(name, "objects\\flag2v.mod");
 
-   for ( i=0 ; i<4 ; i++ )
+   if ( radius != 0.0f )
    {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(1+i, rank);
-       SetObjectParent(1+i, i);
-       pModFile->ReadModel(name);
-       pModFile->CreateEngineObject(rank);
-       if ( i == 0 )  SetPosition(1+i, D3DVECTOR(0.15f, 5.0f, 0.0f));
-       else           SetPosition(1+i, D3DVECTOR(0.79f, 0.0f, 0.0f));
+       CreateShadowCircle(radius, density);
    }
 
-   SetJotlerSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 1.0f);
-   CreateShadowCircle(2.0f, 0.3f);
-
    SetFloorHeight(0.0f);
    CreateOtherObject(type);
    m_engine->LoadAllTexture();
-   FloorAdjust();
+   if ( !bPlumb )  FloorAdjust();
 
    pos = RetPosition(0);
+   pos.y += height;
    SetPosition(0, pos);  // pour afficher les ombres tout de suite
 
    delete pModFile;
    return TRUE;
 }
 
-// Crée une barrière posée sur le sol.
+// Crée un robot posé sur le sol.
 
-BOOL CObject::CreateBarrier(D3DVECTOR pos, float angle, float height,
-                           ObjectType type)
+BOOL CObject::CreateBot(D3DVECTOR pos, float angle, float zoom,
+                       ObjectType type, BOOL bPlumb)
 {
-   CModFile*   pModFile;
-   int         rank;
-
-   if ( m_engine->RetRestCreate() < 1 )  return FALSE;
-
-   pModFile = new CModFile(m_iMan);
-
-   SetType(type);
-
-   if ( type == OBJECT_BARRIER0 )
-   {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\barrier0.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
-
-       CreateCrashSphere(D3DVECTOR( 3.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 0.0f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-3.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
+   m_type = type;
 
-       CreateShadowCircle(6.0f, 0.5f, D3DSHADOWWORM);
-   }
+   SetZoom(0, zoom);
 
-   if ( type == OBJECT_BARRIER1 )
+   if ( type == OBJECT_CARROT  ||
+        type == OBJECT_STARTER ||
+        type == OBJECT_WALKER  ||
+        type == OBJECT_CRAZY   ||
+        type == OBJECT_GUIDE   ||
+        type == OBJECT_EVIL1   ||
+        type == OBJECT_EVIL3   ||
+        type == OBJECT_EVIL4   ||
+        type == OBJECT_EVIL5   )
    {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\barrier1.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
+       m_physics = new CPhysics(m_iMan, this);
+       m_brain   = new CBrain(m_iMan, this);
 
-       CreateCrashSphere(D3DVECTOR( 8.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 3.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 0.0f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-3.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-8.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
+       m_physics->SetBrain(m_brain);
+       m_brain->SetPhysics(m_physics);
 
-       CreateShadowCircle(12.0f, 0.5f, D3DSHADOWWORM);
-   }
-
-   if ( type == OBJECT_BARRIER2 )  // en carton ?
-   {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\barrier2.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
+       m_motion = new CMotionBot(m_iMan, this);
+       if ( m_motion == 0 )  return FALSE;
 
-       CreateCrashSphere(D3DVECTOR( 8.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 3.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 0.0f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-3.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-8.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-
-       CreateShadowCircle(12.0f, 0.8f, D3DSHADOWWORM);
+       m_physics->SetMotion(m_motion);
+       m_brain->SetMotion(m_motion);
+       m_motion->SetPhysics(m_physics);
+       m_motion->SetBrain(m_brain);
+       if ( !m_motion->Create(pos, angle, type, TRUE) )
+       {
+           if ( m_physics != 0 )
+           {
+               m_physics->DeleteObject();
+               delete m_physics;
+               m_physics = 0;
+           }
+           if ( m_brain != 0 )
+           {
+               m_brain->DeleteObject();
+               delete m_brain;
+               m_brain = 0;
+           }
+           if ( m_motion != 0 )
+           {
+               m_motion->DeleteObject();
+               delete m_motion;
+               m_motion = 0;
+           }
+           return FALSE;
+       }
    }
-
-   if ( type == OBJECT_BARRIER3 )  // allumettes + paille ?
+   else
    {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\barrier3.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
-
-       CreateCrashSphere(D3DVECTOR( 8.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 3.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 0.0f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-3.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-8.5f, 3.0f, 0.0f), 0.7f, SOUND_BOUMm, 0.45f);
-
-       CreateShadowCircle(10.0f, 0.5f, D3DSHADOWWORM);
+       m_motion = new CMotionBot(m_iMan, this);
+       if ( m_motion == 0 )  return FALSE;
+       if ( !m_motion->Create(pos, angle, type, bPlumb) )  return FALSE;
    }
 
-   pos = RetPosition(0);
-   SetPosition(0, pos);  // pour afficher les ombres tout de suite
-
-   SetFloorHeight(0.0f);
-   CreateOtherObject(type);
-   FloorAdjust();
-
-   pos = RetPosition(0);
-   pos.y += height;
-   SetPosition(0, pos);
-
-   delete pModFile;
    return TRUE;
 }
 
-// Crée une plante posée sur le sol.
+// Crée une object additionnel pour un véhicule.
 
-BOOL CObject::CreatePlant(D3DVECTOR pos, float angle, float height,
-                         ObjectType type)
+BOOL CObject::CreateAdditionnal(D3DVECTOR pos, float angle, float zoom,
+                               ObjectType type, BOOL bPlumb)
 {
    CModFile*   pModFile;
    int         rank;
 
-   if ( m_engine->RetRestCreate() < 1 )  return FALSE;
-
-   pModFile = new CModFile(m_iMan);
-
-   SetType(type);
-
-   if ( type == OBJECT_PLANT0 ||
-        type == OBJECT_PLANT1 ||
-        type == OBJECT_PLANT2 ||
-        type == OBJECT_PLANT3 ||
-        type == OBJECT_PLANT4 )  // standard ?
+   if ( type != OBJECT_SHOW )
    {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       if ( type == OBJECT_PLANT0 )  pModFile->ReadModel("objects\\plant0.mod");
-       if ( type == OBJECT_PLANT1 )  pModFile->ReadModel("objects\\plant1.mod");
-       if ( type == OBJECT_PLANT2 )  pModFile->ReadModel("objects\\plant2.mod");
-       if ( type == OBJECT_PLANT3 )  pModFile->ReadModel("objects\\plant3.mod");
-       if ( type == OBJECT_PLANT4 )  pModFile->ReadModel("objects\\plant4.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
-
-       height -= 2.0f;
-
-       CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f, SOUND_BOUM, 0.10f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 6.0f);
-       SetJotlerSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 8.0f);
-
-       CreateShadowCircle(8.0f, 0.5f);
+       if ( m_engine->RetRestCreate() < 1 )  return FALSE;
    }
 
-   if ( type == OBJECT_PLANT5 ||
-        type == OBJECT_PLANT6 ||
-        type == OBJECT_PLANT7 )  // trèfle ?
-   {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       if ( type == OBJECT_PLANT5 )  pModFile->ReadModel("objects\\plant5.mod");
-       if ( type == OBJECT_PLANT6 )  pModFile->ReadModel("objects\\plant6.mod");
-       if ( type == OBJECT_PLANT7 )  pModFile->ReadModel("objects\\plant7.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
+   pModFile = new CModFile(m_iMan);
 
-//?        CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 3.0f, SOUND_BOUM, 0.10f);
-       SetJotlerSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f);
+   SetType(type);
 
-       CreateShadowCircle(5.0f, 0.3f);
-   }
+   rank = m_engine->CreateObject();
+   m_engine->SetObjectType(rank, TYPEFIX);  // c'est un objet fixe
+   SetObjectRank(0, rank);
+   m_character.mass = 1000.0f;
 
-   if ( type == OBJECT_PLANT8 ||
-        type == OBJECT_PLANT9 )  // courgette ?
+   if ( type == OBJECT_FIRE )
    {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       if ( type == OBJECT_PLANT8 )  pModFile->ReadModel("objects\\plant8.mod");
-       if ( type == OBJECT_PLANT9 )  pModFile->ReadModel("objects\\plant9.mod");
+       pModFile->ReadModel("objects\\fire1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
+       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(0.0f,  2.0f, 0.0f), 4.0f, SOUND_BOUM, 0.10f);
-       CreateCrashSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 4.0f, SOUND_BOUM, 0.10f);
-
-       CreateShadowCircle(10.0f, 0.5f);
-   }
-
-   if ( type == OBJECT_PLANT10 ||
-        type == OBJECT_PLANT11 ||
-        type == OBJECT_PLANT12 ||
-        type == OBJECT_PLANT13 ||
-        type == OBJECT_PLANT14 )  // plante grasse ?
-   {
        rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       if ( type == OBJECT_PLANT10 )  pModFile->ReadModel("objects\\plant10.mod");
-       if ( type == OBJECT_PLANT11 )  pModFile->ReadModel("objects\\plant11.mod");
-       if ( type == OBJECT_PLANT12 )  pModFile->ReadModel("objects\\plant12.mod");
-       if ( type == OBJECT_PLANT13 )  pModFile->ReadModel("objects\\plant13.mod");
-       if ( type == OBJECT_PLANT14 )  pModFile->ReadModel("objects\\plant14.mod");
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\fire2.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
-
-       CreateCrashSphere(D3DVECTOR(0.0f, 12.0f, 0.0f), 5.0f, SOUND_BOUM, 0.10f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 6.0f, 0.0f), 6.0f);
-       SetJotlerSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 8.0f);
-
-       CreateShadowCircle(8.0f, 0.3f);
-   }
+       SetPosition(1, D3DVECTOR(0.0f, 4.5f, 0.0f));
 
-   if ( type == OBJECT_PLANT15 ||
-        type == OBJECT_PLANT16 ||
-        type == OBJECT_PLANT17 ||
-        type == OBJECT_PLANT18 ||
-        type == OBJECT_PLANT19 )  // fougère ?
-   {
        rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       if ( type == OBJECT_PLANT15 )  pModFile->ReadModel("objects\\plant15.mod");
-       if ( type == OBJECT_PLANT16 )  pModFile->ReadModel("objects\\plant16.mod");
-       if ( type == OBJECT_PLANT17 )  pModFile->ReadModel("objects\\plant17.mod");
-       if ( type == OBJECT_PLANT18 )  pModFile->ReadModel("objects\\plant18.mod");
-       if ( type == OBJECT_PLANT19 )  pModFile->ReadModel("objects\\plant19.mod");
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(2, rank);
+       SetObjectParent(2, 1);
+       pModFile->ReadModel("objects\\fire3.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
-
-       if ( type != OBJECT_PLANT19 )
-       {
-           CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f, SOUND_BOUM, 0.10f);
-           SetGlobalSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 6.0f);
-       }
-       SetJotlerSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 8.0f);
-
-       CreateShadowCircle(8.0f, 0.5f);
+       SetPosition(2, D3DVECTOR(0.0f, 2.0f, 0.0f));
+       SetAngleZ(2, 20.0f*PI/180.0f);
    }
 
-   if ( type == OBJECT_TREE0 )
+   if ( type == OBJECT_HELICO )
    {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\tree0.mod");
+       pModFile->ReadModel("objects\\helico1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
+       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR( 0.0f,  3.0f, 2.0f), 3.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR(-1.0f, 10.0f, 1.0f), 2.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR( 0.0f, 17.0f, 0.0f), 2.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR( 1.0f, 27.0f, 0.0f), 2.0f, SOUND_BOUMs, 0.20f);
-
-       CreateShadowCircle(8.0f, 0.5f);
-   }
-
-   if ( type == OBJECT_TREE1 )
-   {
        rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\tree1.mod");
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\helico2.mod");
        pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
-
-       CreateCrashSphere(D3DVECTOR( 0.0f,  3.0f, 2.0f), 3.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR(-2.0f, 11.0f, 1.0f), 2.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR(-2.0f, 19.0f, 2.0f), 2.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR( 2.0f, 26.0f, 0.0f), 2.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR( 2.0f, 34.0f,-2.0f), 2.0f, SOUND_BOUMs, 0.20f);
-
-       CreateShadowCircle(8.0f, 0.5f);
+       SetPosition(1, D3DVECTOR(0.0f, 5.0f, 0.0f));
    }
 
-   if ( type == OBJECT_TREE2 )
+   if ( type == OBJECT_COMPASS )
    {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\tree2.mod");
+       pModFile->ReadModel("objects\\compass1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
+       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR( 0.0f,  3.0f, 1.0f), 3.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR(-2.0f, 10.0f, 1.0f), 2.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR(-2.0f, 19.0f, 2.0f), 2.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR( 2.0f, 25.0f, 0.0f), 2.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR( 3.0f, 32.0f,-2.0f), 2.0f, SOUND_BOUMs, 0.20f);
-
-       CreateShadowCircle(8.0f, 0.5f);
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\compass2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR(0.0f, 5.0f, 0.0f));
    }
 
-   if ( type == OBJECT_TREE3 )
+   if ( type == OBJECT_BLITZER )
    {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\tree3.mod");
+       pModFile->ReadModel("objects\\blitzer.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-
-       CreateCrashSphere(D3DVECTOR(-2.0f,  3.0f, 2.0f), 3.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR(-3.0f,  9.0f, 1.0f), 2.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR( 0.0f, 18.0f, 0.0f), 2.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR( 0.0f, 27.0f, 7.0f), 2.0f, SOUND_BOUMs, 0.20f);
-
-       CreateShadowCircle(8.0f, 0.5f);
+       SetZoom(0, zoom);
    }
 
-   if ( type == OBJECT_TREE4 )
+   if ( type == OBJECT_HOOK )
    {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\tree4.mod");
+       pModFile->ReadModel("objects\\hook1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
+       SetZoom(0, zoom);
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\hook2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR(0.0f, 4.6f, 0.0f));
+       SetAngleY(1, PI);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 10.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR(0.0f, 21.0f, 0.0f),  8.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR(0.0f, 32.0f, 0.0f),  7.0f, SOUND_BOUMs, 0.20f);
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(2, rank);
+       SetObjectParent(2, 1);
+       pModFile->ReadModel("objects\\hook3.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(2, D3DVECTOR(-8.0f, 0.9f, 0.0f));
 
-       CreateShadowCircle(8.0f, 0.5f);
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(3, rank);
+       SetObjectParent(3, 2);
+       pModFile->ReadModel("objects\\hook4.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(3, D3DVECTOR(0.0f, -2.1f, 0.0f));
    }
 
-   if ( type == OBJECT_TREE5 )  // arbre géant (pour monde "teen")
+   if ( type == OBJECT_AQUA )
    {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\tree5.mod");
+       pModFile->ReadModel("objects\\aqua1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
+       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(  0.0f, 5.0f,-10.0f), 25.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR(-65.0f, 5.0f, 65.0f), 20.0f, SOUND_BOUMs, 0.20f);
-       CreateCrashSphere(D3DVECTOR( 38.0f, 5.0f, 21.0f), 18.0f, SOUND_BOUMs, 0.20f);
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\aqua2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR(0.0f, 0.0f, 0.0f));
 
-       CreateShadowCircle(50.0f, 0.5f);
+       CreateCrashSphere(D3DVECTOR(0.0f, 1.0f, 0.0f), 2.0f, SOUND_BOUMm, 0.45f);
+       CreateShadowCircle(2.0f, 0.8f);
    }
 
-   pos = RetPosition(0);
-   SetPosition(0, pos);  // pour afficher les ombres tout de suite
-
    SetFloorHeight(0.0f);
    CreateOtherObject(type);
-
-   pos = RetPosition(0);
-   pos.y += height;
-   SetPosition(0, pos);
+   m_engine->LoadAllTexture();
+   if ( !bPlumb )  FloorAdjust();
 
    delete pModFile;
    return TRUE;
 }
 
-// Crée un champignon posé sur le sol.
+// Crée une barrière posée sur le sol.
 
-BOOL CObject::CreateMushroom(D3DVECTOR pos, float angle, float height,
-                            ObjectType type)
+BOOL CObject::CreateBarrier(D3DVECTOR pos, float angle, float zoom,
+                           float height, ObjectType type, BOOL bPlumb)
 {
    CModFile*   pModFile;
    int         rank;
@@ -3794,925 +4419,1179 @@ BOOL CObject::CreateMushroom(D3DVECTOR pos, float angle, float height,
 
    SetType(type);
 
-   if ( type == OBJECT_MUSHROOM1 )
+   if ( type == OBJECT_BARRIER0 )  // barrière //// jaune-noire 2.5m
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\mush1.mod");
+       pModFile->ReadModel("objects\\barrier0.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 3.0f, SOUND_BOUM, 0.10f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 5.5f);
-       SetJotlerSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 5.5f);
-
-       CreateShadowCircle(6.0f, 0.5f);
+       CreateCrashSphere(D3DVECTOR( 3.5f, 3.0f, 0.0f), 0.7f, SOUND_CHOCo, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 3.0f, 0.0f), 0.7f, SOUND_CHOCo, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-3.5f, 3.0f, 0.0f), 0.7f, SOUND_CHOCo, 0.45f);
+       SetCrashLineHeight(2.0f);
+       CreateShadowCircle(8.0f, 0.2f);
    }
 
-   if ( type == OBJECT_MUSHROOM2 )
+   if ( type == OBJECT_BARRIER1 )  // barrière //// jaune-noire 5m
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\mush2.mod");
+       pModFile->ReadModel("objects\\barrier1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 5.0f, 0.0f), 3.0f, SOUND_BOUM, 0.10f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 5.5f);
-       SetJotlerSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 5.5f);
-
-       CreateShadowCircle(5.0f, 0.5f);
+       CreateCrashLine(FPOINT(-10.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f,  1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f,  1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       SetCrashLineHeight(2.0f);
+       CreateShadowCircle(8.0f, 1.0f, D3DSHADOWBARRIER1);
    }
 
-   pos = RetPosition(0);
-   SetPosition(0, pos);  // pour afficher les ombres tout de suite
-
-   SetFloorHeight(0.0f);
-   CreateOtherObject(type);
-
-   pos = RetPosition(0);
-   pos.y += height;
-   SetPosition(0, pos);
-
-   delete pModFile;
-   return TRUE;
-}
-
-// Crée un jouet posé sur le sol.
-
-BOOL CObject::CreateTeen(D3DVECTOR pos, float angle, float zoom, float height,
-                        ObjectType type)
-{
-   CModFile*       pModFile;
-   D3DMATRIX*      mat;
-   D3DCOLORVALUE   color;
-   int             rank;
-   float           fShadow;
-   BOOL            bFloorAdjust = TRUE;
-
-   if ( m_engine->RetRestCreate() < 1 )  return FALSE;
+   if ( type == OBJECT_BARRIER2 )  // barrière >>>> rouge-grise 10m
+   {
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEFIX);
+       SetObjectRank(0, rank);
+       pModFile->ReadModel("objects\\barrier2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
 
-   pModFile = new CModFile(m_iMan);
+       CreateCrashLine(FPOINT(-20.0f, -3.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f, -3.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  3.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  3.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -3.0f), SOUND_BOUMm, 0.45f);
+       SetCrashLineHeight(3.0f);
+   }
 
-   SetType(type);
+   if ( type == OBJECT_BARRIER3 )  // barrière carrée
+   {
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEFIX);
+       SetObjectRank(0, rank);
+       pModFile->ReadModel("objects\\barrier3.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
 
-   fShadow = Norm(1.0f-height/10.0f);
+       CreateCrashLine(FPOINT(-10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       SetCrashLineHeight(3.0f);
+       CreateShadowCircle(16.0f, 1.0f);
+   }
 
-   if ( type == OBJECT_TEEN0 )  // crayon orange lg=10
+   if ( type == OBJECT_BARRIER4 )  // barrière en bois cassée 5m
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen0.mod");
+       pModFile->ReadModel("objects\\barrier4.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-
-       CreateCrashSphere(D3DVECTOR( 5.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 2.5f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 0.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-2.5f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-5.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
 
-       CreateShadowCircle(5.0f, 0.8f*fShadow, D3DSHADOWWORM);
+       CreateCrashLine(FPOINT(-10.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f,  1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f,  1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       SetCrashLineHeight(2.0f);
+       CreateShadowCircle(8.0f, 1.0f, D3DSHADOWBARRIER1);
    }
 
-   if ( type == OBJECT_TEEN1 )  // crayon bleu lg=14
+   if ( type == OBJECT_BARRIER5 )  // barrière en bois droite 5m
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen1.mod");
+       pModFile->ReadModel("objects\\barrier5.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-
-       CreateCrashSphere(D3DVECTOR( 6.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 2.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 0.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-2.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-4.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-6.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
 
-       CreateShadowCircle(6.0f, 0.8f*fShadow, D3DSHADOWWORM);
+       CreateCrashLine(FPOINT(-10.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f,  1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f,  1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       SetCrashLineHeight(2.0f);
+       CreateShadowCircle(8.0f, 1.0f, D3DSHADOWBARRIER1);
    }
 
-   if ( type == OBJECT_TEEN2 )  // crayon rouge lg=16
+   if ( type == OBJECT_BARRIER6 )  // barrière métal 5m
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen2.mod");
+       pModFile->ReadModel("objects\\barrier6.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-
-       CreateCrashSphere(D3DVECTOR( 7.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.7f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 2.3f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 0.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-2.3f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-4.7f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-7.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
 
-       CreateShadowCircle(6.0f, 0.8f*fShadow, D3DSHADOWWORM);
+       CreateCrashLine(FPOINT(-10.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f,  1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f,  1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       SetCrashLineHeight(2.0f);
+       CreateShadowCircle(8.0f, 1.0f, D3DSHADOWBARRIER1);
    }
 
-   if ( type == OBJECT_TEEN3 )  // bocal avec crayon
+   if ( type == OBJECT_BARRIER7 )  // barrière métal 10m
    {
        rank = m_engine->CreateObject();
-//?        m_engine->SetObjectType(rank, TYPEFIX);
-       m_engine->SetObjectType(rank, TYPEMETAL);
+       m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen3.mod");
+       pModFile->ReadModel("objects\\barrier7.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR( 0.0f, 4.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 4.0f);
-       CreateShadowCircle(6.0f, 0.5f*fShadow);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       SetCrashLineHeight(2.0f);
+       CreateShadowCircle(16.0f, 1.0f, D3DSHADOWBARRIER2);
    }
 
-   if ( type == OBJECT_TEEN4 )  // ciseaux
+   if ( type == OBJECT_BARRIER8 )  // barrière métal 14m
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen4.mod");
+       pModFile->ReadModel("objects\\barrier8.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-
-       CreateCrashSphere(D3DVECTOR(-9.0f, 1.0f, 0.0f), 1.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-6.0f, 1.0f, 0.0f), 1.1f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-3.0f, 1.0f, 0.0f), 1.2f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 0.0f, 1.0f, 0.0f), 1.3f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 5.1f, 1.0f,-1.3f), 2.6f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 8.0f, 1.0f, 2.2f), 2.3f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 9.4f, 1.0f,-2.0f), 2.0f, SOUND_BOUMm, 0.45f);
 
-       CreateShadowCircle(10.0f, 0.5f*fShadow, D3DSHADOWWORM);
+       CreateCrashLine(FPOINT(-28.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 28.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 28.0f,  1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-28.0f,  1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-28.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       SetCrashLineHeight(2.0f);
+       CreateShadowCircle(19.0f, 1.0f, D3DSHADOWBARRIER2);
    }
 
-   if ( type == OBJECT_TEEN5 )  // CD
+   if ( type == OBJECT_BARRIER9 )  // barrière rouge-blanche 10m
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen5.mod");
+       pModFile->ReadModel("objects\\barrier9.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-       SetFloorHeight(0.0f);
-       bFloorAdjust = FALSE;
 
-       m_terrain->AddBuildingLevel(pos, 5.9f, 6.1f, 0.2f, 0.5f);
-       CreateShadowCircle(8.0f, 0.2f*fShadow);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  1.0f), SOUND_CHOCo, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_CHOCo, 0.45f);
+       SetCrashLineHeight(3.0f);
+       CreateShadowCircle(15.0f, 1.0f, D3DSHADOWBARRIER2);
    }
 
-   if ( type == OBJECT_TEEN6 )  // livre 1
+   if ( type == OBJECT_BARRIER10 )  // tuyau extrémité 10m
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen6.mod");
+       pModFile->ReadModel("objects\\barrier10.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-
-       CreateCrashSphere(D3DVECTOR(-5.0f, 3.0f, 7.5f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.5f, 3.0f, 7.5f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-5.0f, 3.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.5f, 3.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-5.0f, 3.0f,-7.5f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.5f, 3.0f,-7.5f), 5.0f, SOUND_BOUMm, 0.45f);
 
-       CreateShadowCircle(20.0f, 0.2f*fShadow);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       SetCrashLineHeight(3.0f);
+       CreateShadowCircle(15.0f, 1.0f, D3DSHADOWBARRIER2);
    }
 
-   if ( type == OBJECT_TEEN7 )  // livre 2
+   if ( type == OBJECT_BARRIER11 )  // tuyau milieu 10m
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen7.mod");
+       pModFile->ReadModel("objects\\barrier11.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-
-       CreateCrashSphere(D3DVECTOR(-5.0f, 3.0f, 7.5f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.5f, 3.0f, 7.5f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-5.0f, 3.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.5f, 3.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-5.0f, 3.0f,-7.5f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.5f, 3.0f,-7.5f), 5.0f, SOUND_BOUMm, 0.45f);
 
-       CreateShadowCircle(20.0f, 0.2f*fShadow);
+       CreateCrashSphere(D3DVECTOR(-20.0f, 3.0f, 0.0f), 3.5f, SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       SetCrashLineHeight(3.0f);
+       CreateShadowCircle(15.0f, 1.0f, D3DSHADOWBARRIER2);
    }
 
-   if ( type == OBJECT_TEEN8 )  // pile de livres 1
+   if ( type == OBJECT_BARRIER12 )  // tuyau milieu avec robinet 10m
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen8.mod");
+       pModFile->ReadModel("objects\\barrier12.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-
-       CreateCrashSphere(D3DVECTOR(-5.0f, 3.0f, 7.5f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.5f, 3.0f, 7.5f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-5.0f, 3.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.5f, 3.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-5.0f, 3.0f,-7.5f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.5f, 3.0f,-7.5f), 5.0f, SOUND_BOUMm, 0.45f);
 
-       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 12.0f);
-       CreateShadowCircle(20.0f, 0.2f*fShadow);
+       CreateCrashSphere(D3DVECTOR(-20.0f, 3.0f, 0.0f), 3.5f, SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  1.0f), SOUND_CHOCm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_CHOCm, 0.45f);
+       SetCrashLineHeight(3.0f);
+       CreateShadowCircle(15.0f, 1.0f, D3DSHADOWBARRIER2);
    }
 
-   if ( type == OBJECT_TEEN9 )  // pile de livres 2
+   if ( type == OBJECT_BARRIER13 )  // tuyau aérien 10m
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen9.mod");
+       pModFile->ReadModel("objects\\barrier13.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-
-       CreateCrashSphere(D3DVECTOR(-5.0f, 3.0f, 7.5f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.5f, 3.0f, 7.5f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-5.0f, 3.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.5f, 3.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-5.0f, 3.0f,-7.5f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 4.5f, 3.0f,-7.5f), 5.0f, SOUND_BOUMm, 0.45f);
 
-       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 12.0f);
-       CreateShadowCircle(20.0f, 0.2f*fShadow);
+       CreateCrashSphere(D3DVECTOR(-20.0f, 3.0f, 0.0f), 3.5f, SOUND_CHOCm, 0.45f);
+       CreateShadowCircle(15.0f, 1.0f, D3DSHADOWBARRIER2);
    }
 
-   if ( type == OBJECT_TEEN10 )  // bibliothèque
+   if ( type == OBJECT_BARRIER14 )  // mur 10m
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen10.mod");
+       pModFile->ReadModel("objects\\barrier14.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-
-       CreateCrashSphere(D3DVECTOR(-26.0f, 3.0f, 0.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-15.0f, 3.0f,-4.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-15.0f, 3.0f, 5.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( -4.0f, 3.0f,-4.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( -4.0f, 3.0f, 5.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  6.0f, 3.0f,-4.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  6.0f, 3.0f, 4.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 14.0f, 3.0f,-3.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 14.0f, 3.0f, 2.0f), 6.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 24.0f, 3.0f, 5.0f), 6.0f, SOUND_BOUMm, 0.45f);
 
-       SetGlobalSphere(D3DVECTOR(0.0f, 6.0f, 0.0f), 20.0f);
-       CreateShadowCircle(40.0f, 0.2f*fShadow);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f, -1.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  1.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  1.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 21.0f);
+       bPlumb = TRUE;
    }
 
-   if ( type == OBJECT_TEEN11 )  // lampe
+   if ( type == OBJECT_BARRIER15 )  // mur haut 10m
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen11.mod");
+       pModFile->ReadModel("objects\\barrier15.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetFloorHeight(0.0f);
-       SetZoom(0, zoom);
 
-       mat = RetWorldMatrix(0);
-       pos = Transform(*mat, D3DVECTOR(-56.0f, 22.0f, 0.0f));
-       m_particule->CreateParticule(pos, D3DVECTOR(0.0f, 0.0f, 0.0f), FPOINT(20.0f, 20.0f), PARTISELY, 1.0f, 0.0f, 0.0f);
-
-       pos = Transform(*mat, D3DVECTOR(-65.0f, 40.0f, 0.0f));
-       color.r = 4.0f;
-       color.g = 2.0f;
-       color.b = 0.0f;  // jaune-orange
-       color.a = 0.0f;
-       m_main->CreateSpot(pos, color);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f, -1.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  1.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  1.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -1.0f), SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 21.0f);
+       bPlumb = TRUE;
    }
 
-   if ( type == OBJECT_TEEN12 )  // coca
+   if ( type == OBJECT_BARRIER16 )  // mur  14m
    {
        rank = m_engine->CreateObject();
-//?        m_engine->SetObjectType(rank, TYPEFIX);
-       m_engine->SetObjectType(rank, TYPEMETAL);
+       m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen12.mod");
+       pModFile->ReadModel("objects\\barrier16.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR( 0.0f, 4.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 9.0f, 0.0f), 5.0f);
-       CreateShadowCircle(4.5f, 1.0f*fShadow);
+       CreateCrashLine(FPOINT(-28.0f, -1.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 28.0f, -1.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 28.0f,  1.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-28.0f,  1.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-28.0f, -1.0f), SOUND_BOUMm, 0.45f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 30.0f);
+       bPlumb = TRUE;
    }
 
-   if ( type == OBJECT_TEEN13 )  // carton fermé
+   if ( type == OBJECT_BARRIER17 )  // barrière panneaux >
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen13.mod");
+       pModFile->ReadModel("objects\\barrier17.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(-10.0f, 4.0f,-7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 4.0f,-7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 10.0f, 4.0f,-7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-10.0f, 4.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 4.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 10.0f, 4.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-10.0f, 4.0f, 7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 4.0f, 7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 10.0f, 4.0f, 7.0f), 5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -2.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f, -2.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  2.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  2.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -2.5f), SOUND_BOUMm, 0.45f);
+       SetCrashLineHeight(3.0f);
+   }
+   if ( type == OBJECT_BARRIER18 )  // barrière panneaux <
+   {
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEFIX);
+       SetObjectRank(0, rank);
+       pModFile->ReadModel("objects\\barrier17.mod");
+       pModFile->Mirror();
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
 
-       SetGlobalSphere(D3DVECTOR(0.0f, 5.0f, 0.0f), 15.0f);
-       CreateShadowCircle(20.0f, 1.0f*fShadow);
+       CreateCrashLine(FPOINT(-20.0f, -2.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f, -2.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 20.0f,  2.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f,  2.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-20.0f, -2.5f), SOUND_BOUMm, 0.45f);
+       SetCrashLineHeight(3.0f);
    }
 
-   if ( type == OBJECT_TEEN14 )  // carton ouvert
+   if ( type == OBJECT_BARRIER19 )  // poteau >
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen14.mod");
+       pModFile->ReadModel("objects\\barrier19.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(-10.0f, 4.0f,-7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 4.0f,-7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 10.0f, 4.0f,-7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-10.0f, 4.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 4.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 10.0f, 4.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-10.0f, 4.0f, 7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 4.0f, 7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 10.0f, 4.0f, 7.0f), 5.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 1.2f, SOUND_CHOCo, 0.45f);
+       SetCrashLineHeight(3.0f);
+       CreateShadowCircle(2.5f, 0.5f);
+   }
+
+   pos = RetPosition(0);
+   SetPosition(0, pos);  // pour afficher les ombres tout de suite
 
-       SetGlobalSphere(D3DVECTOR(0.0f, 5.0f, 0.0f), 15.0f);
-       CreateShadowCircle(20.0f, 1.0f*fShadow);
+   SetFloorHeight(0.0f);
+   CreateOtherObject(type);
+   if ( !bPlumb )
+   {
+       FloorAdjust();
+       if ( type != OBJECT_BARRIER3  &&
+            type != OBJECT_BARRIER14 )
+       {
+           SetAngleX(0, 0.0f);
+       }
    }
 
-   if ( type == OBJECT_TEEN15 )  // pile de cartons
+   pos = RetPosition(0);
+   pos.y += height;
+   SetPosition(0, pos);
+
+   CrashLineFusion();
+
+   delete pModFile;
+   return TRUE;
+}
+
+// Crée une caisse posée sur le sol.
+
+BOOL CObject::CreateBox(D3DVECTOR pos, float angle, float zoom,
+                       float height, ObjectType type, BOOL bPlumb)
+{
+   CModFile*   pModFile;
+   int         rank;
+   char        text[100];
+
+   if ( m_engine->RetRestCreate() < 1 )  return FALSE;
+
+   pModFile = new CModFile(m_iMan);
+
+   SetType(type);
+
+   if ( type == OBJECT_BOX1 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen15.mod");
+       sprintf(text, "objects\\box1%d.mod", rand()%6);
+       pModFile->ReadModel(text);
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-
-       CreateCrashSphere(D3DVECTOR(-10.0f, 4.0f,-7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 4.0f,-7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 10.0f, 4.0f,-7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-10.0f, 4.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 4.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 10.0f, 4.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-10.0f, 4.0f, 7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 4.0f, 7.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 10.0f, 4.0f, 7.0f), 5.0f, SOUND_BOUMm, 0.45f);
+       m_character.height = 4.0f;
 
-       SetGlobalSphere(D3DVECTOR(0.0f, 5.0f, 0.0f), 15.0f);
-       CreateShadowCircle(20.0f, 1.0f*fShadow);
+#if 0
+       CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 4.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-4.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+#endif
+       CreateShadowCircle(5.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN16 )  // arrosoir
+   if ( type == OBJECT_BOX2 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen16.mod");
+       sprintf(text, "objects\\box1%d.mod", rand()%6);
+       pModFile->ReadModel(text);
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
+       m_character.height = 4.0f;
 
-       CreateCrashSphere(D3DVECTOR(-8.0f, 4.0f, 0.0f), 12.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 8.0f, 4.0f, 0.0f), 12.0f, SOUND_BOUMm, 0.45f);
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       sprintf(text, "objects\\box1%d.mod", rand()%6);
+       pModFile->ReadModel(text);
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR((Rand()-0.5f)*4.0f, 8.0f, (Rand()-0.5f)*4.0f));
+       SetAngleY(1, Rand()*PI);
 
-       SetGlobalSphere(D3DVECTOR(0.0f, 13.0f, 0.0f), 20.0f);
-       CreateShadowCircle(18.0f, 1.0f*fShadow);
+#if 0
+       CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 4.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-4.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+#endif
+       CreateShadowCircle(5.0f, 1.0f);
+       m_character.mass = 4000.0f;
    }
 
-   if ( type == OBJECT_TEEN17 )  // roue |
+   if ( type == OBJECT_BOX3 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen17.mod");
+       sprintf(text, "objects\\box1%d.mod", rand()%6);
+       pModFile->ReadModel(text);
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
+       m_character.height = 4.0f;
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       sprintf(text, "objects\\box1%d.mod", rand()%6);
+       pModFile->ReadModel(text);
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR((Rand()-0.5f)*3.0f, 8.0f, (Rand()-0.5f)*3.0f));
+       SetAngleY(1, Rand()*PI);
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(2, rank);
+       SetObjectParent(2, 1);
+       sprintf(text, "objects\\box1%d.mod", rand()%6);
+       pModFile->ReadModel(text);
+       pModFile->CreateEngineObject(rank);
+       SetPosition(2, D3DVECTOR((Rand()-0.5f)*2.0f, 8.0f, (Rand()-0.5f)*2.0f));
+       SetAngleY(2, Rand()*PI);
 
-       CreateCrashSphere(D3DVECTOR( 0.0f, 31.0f, 0.0f), 31.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 31.0f, 0.0f), 31.0f);
-       CreateShadowCircle(24.0f, 0.5f*fShadow);
+#if 0
+       CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 4.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-4.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+#endif
+       CreateShadowCircle(5.0f, 1.0f);
+       m_character.mass = 6000.0f;
    }
 
-   if ( type == OBJECT_TEEN18 )  // roue /
+   if ( type == OBJECT_BOX4 )
    {
+       m_physics = new CPhysics(m_iMan, this);
+       m_physics->SetType(TYPE_MASS);
+
+       m_character.mass = 2000.0f;
+
+//?        m_physics->SetLinMotion(MO_STOACCEL, D3DVECTOR(20.0f, 50.0f, 20.0f));
+       m_physics->SetLinMotion(MO_STOACCEL, D3DVECTOR( 5.0f, 50.0f,  5.0f));
+//?        m_physics->SetLinMotionY(MO_MOTSPEED, -200.0f);
+       m_physics->SetLinMotion(MO_TERSLIDE, D3DVECTOR( 1.0f,  1.0f,  1.0f));
+       m_physics->SetLinMotion(MO_TERFORCE, D3DVECTOR(50.0f, 50.0f, 50.0f));
+       m_physics->SetCirMotion(MO_MOTACCEL, D3DVECTOR( 1.0f,  1.0f,  1.0f));
+
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen18.mod");
+       sprintf(text, "objects\\box1%d.mod", rand()%6);
+       pModFile->ReadModel(text);
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
+       m_character.height = 4.0f;
 
-       CreateCrashSphere(D3DVECTOR( 0.0f, 31.0f, 0.0f), 31.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 31.0f, 0.0f), 31.0f);
-       CreateShadowCircle(24.0f, 0.5f*fShadow);
+#if 0
+       CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 4.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-4.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+#endif
+       CreateShadowCircle(5.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN19 )  // roue =
+   if ( type == OBJECT_BOX5 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen19.mod");
+       pModFile->ReadModel("objects\\box5.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR( 0.0f, 10.0f, 0.0f), 32.0f, SOUND_BOUMm, 0.45f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 32.0f);
-       CreateShadowCircle(33.0f, 1.0f*fShadow);
+       CreateCrashLine(FPOINT(-4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 4.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-4.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateShadowCircle(5.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN20 )  // mur avec étagère
+   if ( type == OBJECT_BOX6 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen20.mod");
+       pModFile->ReadModel("objects\\box6.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(-175.0f, 0.0f,  -5.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-175.0f, 0.0f, -35.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( -55.0f, 0.0f,  -5.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( -55.0f, 0.0f, -35.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( -37.0f, 0.0f,  -5.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( -37.0f, 0.0f, -35.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  83.0f, 0.0f,  -5.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  83.0f, 0.0f, -35.0f), 4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 4.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-4.0f,  4.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-4.0f, -4.0f), SOUND_BOUMm, 0.45f);
+       CreateShadowCircle(5.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN21 )  // mur avec fenêtre
+   if ( type == OBJECT_TOYS1 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen21.mod");
+       pModFile->ReadModel("objects\\toys1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
+
+       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 2.2f, SOUND_CHOCo, 0.45f);
+       CreateShadowCircle(3.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN22 )  // mur avec porte et étagère
+   if ( type == OBJECT_TOYS2 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen22.mod");
+       pModFile->ReadModel("objects\\toys2.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(-135.0f, 0.0f,  -5.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-135.0f, 0.0f, -35.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( -15.0f, 0.0f,  -5.0f), 4.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( -15.0f, 0.0f, -35.0f), 4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 2.2f, SOUND_CHOCo, 0.45f);
+       CreateShadowCircle(3.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN23 )  // skate sur ses roues
+   if ( type == OBJECT_TOYS3 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen23.mod");
+       pModFile->ReadModel("objects\\toys3.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-
-       if ( m_option == 1 )  // passage sous le skate interdit ?
-       {
-           CreateCrashSphere(D3DVECTOR(-10.0f, 2.0f, 0.0f), 11.0f, SOUND_BOUMm, 0.45f);
-           CreateCrashSphere(D3DVECTOR( 10.0f, 2.0f, 0.0f), 11.0f, SOUND_BOUMm, 0.45f);
-       }
 
-       CreateCrashSphere(D3DVECTOR(-23.0f, 2.0f, 7.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-23.0f, 2.0f, 0.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-23.0f, 2.0f,-7.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 23.0f, 2.0f, 7.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 23.0f, 2.0f, 0.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 23.0f, 2.0f,-7.0f), 3.0f, SOUND_BOUMm, 0.45f);
-
-       CreateShadowCircle(35.0f, 0.8f*fShadow, D3DSHADOWWORM);
+       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 2.2f, SOUND_CHOCo, 0.45f);
+       CreateShadowCircle(3.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN24 )  // skate /
+   if ( type == OBJECT_TOYS4 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen24.mod");
+       pModFile->ReadModel("objects\\toys4.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(-12.0f, 0.0f, -3.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-12.0f, 0.0f,  3.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateShadowCircle(20.0f, 0.2f*fShadow);
+       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 2.2f, SOUND_CHOCo, 0.45f);
+       CreateShadowCircle(3.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN25 )  // skate /
+   if ( type == OBJECT_TOYS5 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen25.mod");
+       pModFile->ReadModel("objects\\toys5.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(-12.0f, 0.0f, -3.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-12.0f, 0.0f,  3.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateShadowCircle(20.0f, 0.2f*fShadow);
+       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 2.2f, SOUND_CHOCo, 0.45f);
+       CreateShadowCircle(3.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN26 )  // lampe au plafond
+   pos = RetPosition(0);
+   SetPosition(0, pos);  // pour afficher les ombres tout de suite
+
+   SetFloorHeight(0.0f);
+   CreateOtherObject(type);
+   if ( !bPlumb )  FloorAdjust();
+
+   pos = RetPosition(0);
+   pos.y += height;
+   SetPosition(0, pos);
+
+   delete pModFile;
+   return TRUE;
+}
+
+// Crée une pierre posée sur le sol.
+
+BOOL CObject::CreateStone(D3DVECTOR pos, float angle, float zoom,
+                       float height, ObjectType type, BOOL bPlumb)
+{
+   CModFile*   pModFile;
+   int         rank;
+
+   if ( m_engine->RetRestCreate() < 1 )  return FALSE;
+
+   pModFile = new CModFile(m_iMan);
+
+   SetType(type);
+
+   if ( type == OBJECT_STONE1 )  // cube 1
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen26.mod");
+       pModFile->ReadModel("objects\\stone1.mod");
        pModFile->CreateEngineObject(rank);
+       SetZoom(0, zoom);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-       SetFloorHeight(0.0f);
 
-       mat = RetWorldMatrix(0);
-       pos = Transform(*mat, D3DVECTOR(0.0f, 50.0f, 0.0f));
-       m_particule->CreateParticule(pos, D3DVECTOR(0.0f, 0.0f, 0.0f), FPOINT(100.0f, 100.0f), PARTISELY, 1.0f, 0.0f, 0.0f);
-
-       pos = Transform(*mat, D3DVECTOR(0.0f, 50.0f, 0.0f));
-       color.r = 4.0f;
-       color.g = 2.0f;
-       color.b = 0.0f;  // jaune-orange
-       color.a = 0.0f;
-       m_main->CreateSpot(pos, color);
+#if 1
+       CreateCrashSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 6.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-6.0f, -6.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 6.0f, -6.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 6.0f,  6.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-6.0f,  6.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-6.0f, -6.0f), SOUND_BOUMm, 0.45f);
+#endif
+       CreateShadowCircle(8.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN27 )  // grande plante ?
+   if ( type == OBJECT_STONE2 )  // cube 2
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen27.mod");
+       pModFile->ReadModel("objects\\stone2.mod");
        pModFile->CreateEngineObject(rank);
+       SetZoom(0, zoom);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f, SOUND_BOUM, 0.10f);
-       CreateShadowCircle(40.0f, 0.5f);
+#if 1
+       CreateCrashSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 8.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-8.0f, -8.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 8.0f, -8.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 8.0f,  8.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-8.0f,  8.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-8.0f, -8.0f), SOUND_BOUMm, 0.45f);
+#endif
+       CreateShadowCircle(10.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN28 )  // bouteille ?
+   if ( type == OBJECT_STONE3 )  // cube 3
    {
        rank = m_engine->CreateObject();
-//?        m_engine->SetObjectType(rank, TYPEFIX);
-       m_engine->SetObjectType(rank, TYPEMETAL);
+       m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen28.mod");
+       pModFile->ReadModel("objects\\stone3.mod");
        pModFile->CreateEngineObject(rank);
+       SetZoom(0, zoom);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 5.0f, SOUND_BOUM, 0.10f);
-       CreateShadowCircle(7.0f, 0.6f*fShadow);
+#if 1
+       CreateCrashSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 10.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-9.5f, -9.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 9.5f, -9.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 9.5f,  9.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-9.5f,  9.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-9.5f, -9.5f), SOUND_BOUMm, 0.45f);
+#endif
+       CreateShadowCircle(12.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN29 )  // pont ?
+   if ( type == OBJECT_STONE4 )  // cube 4
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen29.mod");
+       pModFile->ReadModel("objects\\stone4.mod");
        pModFile->CreateEngineObject(rank);
+       SetZoom(0, zoom);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-       bFloorAdjust = FALSE;
+
+#if 1
+       CreateCrashSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 15.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-14.0f, -14.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 14.0f, -14.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 14.0f,  14.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-14.0f,  14.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-14.0f, -14.0f), SOUND_BOUMm, 0.45f);
+#endif
+       CreateShadowCircle(18.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN30 )  // saut ?
+   if ( type == OBJECT_STONE5 )  // pilier h=30
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen30.mod");
+       pModFile->ReadModel("objects\\stone5.mod");
        pModFile->CreateEngineObject(rank);
+       SetZoom(0, zoom);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 15.0f, SOUND_BOUM, 0.10f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 15.0f, 0.0f), 17.0f);
-       CreateShadowCircle(20.0f, 1.0f*fShadow);
+#if 1
+       CreateCrashSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 8.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-8.0f, -8.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 8.0f, -8.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 8.0f,  8.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-8.0f,  8.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-8.0f, -8.0f), SOUND_BOUMm, 0.45f);
+#endif
+       CreateShadowCircle(10.0f, 1.0f);
    }
 
-   if ( type == OBJECT_TEEN31 )  // basket ?
+   if ( type == OBJECT_STONE6 )  // dalle haute pour piliers espacés d=60
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen31.mod");
+       pModFile->ReadModel("objects\\stone6.mod");
        pModFile->CreateEngineObject(rank);
+       SetZoom(0, zoom);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-
-       CreateCrashSphere(D3DVECTOR(-10.0f, 2.0f, 0.0f), 5.0f, SOUND_BOUM, 0.10f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 2.0f, 0.0f), 6.0f, SOUND_BOUM, 0.10f);
-       CreateCrashSphere(D3DVECTOR(  9.0f, 4.0f, 1.0f), 6.0f, SOUND_BOUM, 0.10f);
-
-       SetGlobalSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 10.0f);
-       CreateShadowCircle(16.0f, 0.6f*fShadow);
    }
 
-   if ( type == OBJECT_TEEN32 )  // chaise ?
+   if ( type == OBJECT_CROSS1 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen32.mod");
+       pModFile->ReadModel("objects\\cross1.mod");
        pModFile->CreateEngineObject(rank);
+       SetZoom(0, zoom);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR( 17.5f, 1.0f,  17.5f), 3.5f, SOUND_BOUM, 0.10f);
-       CreateCrashSphere(D3DVECTOR( 17.5f, 1.0f, -17.5f), 3.5f, SOUND_BOUM, 0.10f);
-       CreateCrashSphere(D3DVECTOR(-17.5f, 1.0f,  17.5f), 3.5f, SOUND_BOUM, 0.10f);
-       CreateCrashSphere(D3DVECTOR(-17.5f, 1.0f, -17.5f), 3.5f, SOUND_BOUM, 0.10f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 26.0f);
-       CreateShadowCircle(35.0f, 0.3f*fShadow);
+       CreateCrashSphere(D3DVECTOR( 33.5f, 3.0f,  33.5f), 3.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 33.5f, 3.0f, -33.5f), 3.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-33.5f, 3.0f,  33.5f), 3.5f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-33.5f, 3.0f, -33.5f), 3.5f, SOUND_BOUMm, 0.45f);
    }
 
-   if ( type == OBJECT_TEEN33 )  // panneau ?
+   SetPosition(0, pos);  // pour afficher les ombres tout de suite
+
+   SetFloorHeight(0.0f);
+   CreateOtherObject(type);
+   if ( !bPlumb )  FloorAdjust();
+
+   pos = RetPosition(0);
+   pos.y += height;
+   SetPosition(0, pos);
+
+   delete pModFile;
+   return TRUE;
+}
+
+// Crée une pièce mécanique posée sur le sol.
+
+BOOL CObject::CreatePiece(D3DVECTOR pos, float angle, float zoom,
+                       float height, ObjectType type, BOOL bPlumb)
+{
+   CModFile*   pModFile;
+   int         rank;
+   char        name[50];
+
+   if ( m_engine->RetRestCreate() < 1 )  return FALSE;
+
+   pModFile = new CModFile(m_iMan);
+
+   SetType(type);
+
+   sprintf(name, "objects\\piece%d.mod", type-OBJECT_PIECE0);
+   rank = m_engine->CreateObject();
+   m_engine->SetObjectType(rank, TYPEFIX);
+   SetObjectRank(0, rank);
+   pModFile->ReadModel(name);
+   pModFile->CreateEngineObject(rank);
+   SetZoom(0, zoom);
+   SetPosition(0, pos);
+   SetAngleY(0, angle);
+
+   CreateShadowCircle(1.0f, 0.5f);
+
+   SetFloorHeight(0.0f);
+   CreateOtherObject(type);
+   if ( !bPlumb )  FloorAdjust();
+
+   pos = RetPosition(0);
+   pos.y += height;
+   SetPosition(0, pos);
+
+   delete pModFile;
+   return TRUE;
+}
+
+// Crée une plante posée sur le sol.
+
+BOOL CObject::CreatePlant(D3DVECTOR pos, float angle, float zoom,
+                         float height, ObjectType type, BOOL bPlumb)
+{
+   CModFile*   pModFile;
+   int         rank;
+
+   if ( m_engine->RetRestCreate() < 1 )  return FALSE;
+
+   pModFile = new CModFile(m_iMan);
+
+   SetType(type);
+
+   if ( type == OBJECT_PLANT0 ||
+        type == OBJECT_PLANT1 ||
+        type == OBJECT_PLANT2 ||
+        type == OBJECT_PLANT3 ||
+        type == OBJECT_PLANT4 )  // standard ?
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen33.mod");
+       if ( type == OBJECT_PLANT0 )  pModFile->ReadModel("objects\\plant0.mod");
+       if ( type == OBJECT_PLANT1 )  pModFile->ReadModel("objects\\plant1.mod");
+       if ( type == OBJECT_PLANT2 )  pModFile->ReadModel("objects\\plant2.mod");
+       if ( type == OBJECT_PLANT3 )  pModFile->ReadModel("objects\\plant3.mod");
+       if ( type == OBJECT_PLANT4 )  pModFile->ReadModel("objects\\plant4.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 4.0f, SOUND_BOUM, 0.10f);
-       CreateShadowCircle(10.0f, 0.3f*fShadow);
+       height -= 2.0f;
+
+//?        CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f, SOUND_BOUM, 0.10f);
+//?        SetGlobalSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 6.0f);
+       SetJotlerSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 8.0f);
+
+       CreateShadowCircle(8.0f, 0.5f);
    }
 
-   if ( type == OBJECT_TEEN34 )  // caillou ?
+   if ( type == OBJECT_PLANT5 ||
+        type == OBJECT_PLANT6 ||
+        type == OBJECT_PLANT7 )  // trèfle ?
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen34.mod");
+       if ( type == OBJECT_PLANT5 )  pModFile->ReadModel("objects\\plant5.mod");
+       if ( type == OBJECT_PLANT6 )  pModFile->ReadModel("objects\\plant6.mod");
+       if ( type == OBJECT_PLANT7 )  pModFile->ReadModel("objects\\plant7.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 4.0f, SOUND_BOUM, 0.10f);
-       CreateShadowCircle(3.0f, 1.0f*fShadow);
+//?        CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 3.0f, SOUND_BOUM, 0.10f);
+       SetJotlerSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f);
+
+       CreateShadowCircle(5.0f, 0.3f);
    }
 
-   if ( type == OBJECT_TEEN35 )  // tuyau ?
+   if ( type == OBJECT_PLANT8 ||
+        type == OBJECT_PLANT9 )  // courgette ?
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen35.mod");
+       if ( type == OBJECT_PLANT8 )  pModFile->ReadModel("objects\\plant8.mod");
+       if ( type == OBJECT_PLANT9 )  pModFile->ReadModel("objects\\plant9.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(-40.0f, 5.0f, 0.0f), 10.0f, SOUND_BOUM, 0.10f);
-       CreateCrashSphere(D3DVECTOR(-20.0f, 5.0f, 0.0f), 10.0f, SOUND_BOUM, 0.10f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 5.0f, 0.0f), 10.0f, SOUND_BOUM, 0.10f);
-       CreateCrashSphere(D3DVECTOR( 20.0f, 5.0f, 0.0f), 10.0f, SOUND_BOUM, 0.10f);
-       CreateCrashSphere(D3DVECTOR( 40.0f, 5.0f, 0.0f), 10.0f, SOUND_BOUM, 0.10f);
-       CreateShadowCircle(40.0f, 0.8f*fShadow, D3DSHADOWWORM);
+       CreateCrashSphere(D3DVECTOR(0.0f,  2.0f, 0.0f), 4.0f, SOUND_BOUM, 0.10f);
+       CreateCrashSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 4.0f, SOUND_BOUM, 0.10f);
+
+       CreateShadowCircle(10.0f, 0.5f);
    }
 
-   if ( type == OBJECT_TEEN36 )  // tronc ?
+   if ( type == OBJECT_PLANT10 ||
+        type == OBJECT_PLANT11 ||
+        type == OBJECT_PLANT12 ||
+        type == OBJECT_PLANT13 ||
+        type == OBJECT_PLANT14 )  // plante grasse ?
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen36.mod");
+       if ( type == OBJECT_PLANT10 )  pModFile->ReadModel("objects\\plant10.mod");
+       if ( type == OBJECT_PLANT11 )  pModFile->ReadModel("objects\\plant11.mod");
+       if ( type == OBJECT_PLANT12 )  pModFile->ReadModel("objects\\plant12.mod");
+       if ( type == OBJECT_PLANT13 )  pModFile->ReadModel("objects\\plant13.mod");
+       if ( type == OBJECT_PLANT14 )  pModFile->ReadModel("objects\\plant14.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-       bFloorAdjust = FALSE;
+
+//?        CreateCrashSphere(D3DVECTOR(0.0f, 12.0f, 0.0f), 5.0f, SOUND_BOUM, 0.10f);
+//?        SetGlobalSphere(D3DVECTOR(0.0f, 6.0f, 0.0f), 6.0f);
+       SetJotlerSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 8.0f);
+
+       CreateShadowCircle(8.0f, 0.3f);
    }
 
-   if ( type == OBJECT_TEEN37 )  // bateau ?
+   if ( type == OBJECT_PLANT15 ||
+        type == OBJECT_PLANT16 ||
+        type == OBJECT_PLANT17 ||
+        type == OBJECT_PLANT18 ||
+        type == OBJECT_PLANT19 )  // fougère ?
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen37.mod");
+       if ( type == OBJECT_PLANT15 )  pModFile->ReadModel("objects\\plant15.mod");
+       if ( type == OBJECT_PLANT16 )  pModFile->ReadModel("objects\\plant16.mod");
+       if ( type == OBJECT_PLANT17 )  pModFile->ReadModel("objects\\plant17.mod");
+       if ( type == OBJECT_PLANT18 )  pModFile->ReadModel("objects\\plant18.mod");
+       if ( type == OBJECT_PLANT19 )  pModFile->ReadModel("objects\\plant19.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-       bFloorAdjust = FALSE;
+
+       if ( type != OBJECT_PLANT19 )
+       {
+//?            CreateCrashSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 4.0f, SOUND_BOUM, 0.10f);
+//?            SetGlobalSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 6.0f);
+       }
+       SetJotlerSphere(D3DVECTOR(0.0f, 0.0f, 0.0f), 8.0f);
+
+       CreateShadowCircle(8.0f, 0.5f);
    }
 
-   if ( type == OBJECT_TEEN38 )  // ventillateur ?
+   if ( type == OBJECT_TREE0 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen38a.mod");
+       pModFile->ReadModel("objects\\tree0.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
-
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(1, rank);
-       SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\teen38b.mod");  // moteur
-       pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(0.0f, 30.0f, 0.0f));
 
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(2, rank);
-       SetObjectParent(2, 1);
-       pModFile->ReadModel("objects\\teen38c.mod");  // hélice
-       pModFile->CreateEngineObject(rank);
-       SetPosition(2, D3DVECTOR(0.0f, 0.0f, 0.0f));
+       CreateCrashSphere(D3DVECTOR( 0.0f,  3.0f, 2.0f), 3.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-1.0f, 10.0f, 1.0f), 2.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 17.0f, 0.0f), 2.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 1.0f, 27.0f, 0.0f), 2.0f, SOUND_CHOCa, 0.45f);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 10.0f, SOUND_BOUM, 0.10f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 10.0f);
-       CreateShadowCircle(15.0f, 0.5f*fShadow);
+       CreateShadowCircle(8.0f, 0.5f);
    }
 
-   if ( type == OBJECT_TEEN39 )  // plante en pot ?
+   if ( type == OBJECT_TREE1 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen39.mod");
+       pModFile->ReadModel("objects\\tree1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 8.5f, SOUND_BOUM, 0.10f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 8.5f);
-       CreateShadowCircle(10.0f, 1.0f*fShadow);
+       CreateCrashSphere(D3DVECTOR( 0.0f,  3.0f, 2.0f), 3.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-2.0f, 11.0f, 1.0f), 2.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-2.0f, 19.0f, 2.0f), 2.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 2.0f, 26.0f, 0.0f), 2.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 2.0f, 34.0f,-2.0f), 2.0f, SOUND_CHOCa, 0.45f);
+
+       CreateShadowCircle(8.0f, 0.5f);
    }
 
-   if ( type == OBJECT_TEEN40 )  // ballon ?
+   if ( type == OBJECT_TREE2 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen40.mod");
+       pModFile->ReadModel("objects\\tree2.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 5.0f, 0.0f), 11.0f, SOUND_BOUM, 0.10f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 14.0f, 0.0f), 15.0f);
-       CreateShadowCircle(15.0f, 0.7f*fShadow);
+       CreateCrashSphere(D3DVECTOR( 0.0f,  3.0f, 1.0f), 3.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-2.0f, 10.0f, 1.0f), 2.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-2.0f, 19.0f, 2.0f), 2.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 2.0f, 25.0f, 0.0f), 2.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 3.0f, 32.0f,-2.0f), 2.0f, SOUND_CHOCa, 0.45f);
+
+       CreateShadowCircle(8.0f, 0.5f);
    }
 
-   if ( type == OBJECT_TEEN41 )  // clôture ?
+   if ( type == OBJECT_TREE3 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen41.mod");
+       pModFile->ReadModel("objects\\tree3.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
+
+       CreateCrashSphere(D3DVECTOR(-2.0f,  3.0f, 2.0f), 3.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-3.0f,  9.0f, 1.0f), 2.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 18.0f, 0.0f), 2.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 27.0f, 7.0f), 2.0f, SOUND_CHOCa, 0.45f);
+
+       CreateShadowCircle(8.0f, 0.5f);
    }
 
-   if ( type == OBJECT_TEEN42 )  // trèfle ?
+   if ( type == OBJECT_TREE4 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen42.mod");
+       pModFile->ReadModel("objects\\tree4.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 2.0f, SOUND_BOUM, 0.10f);
-       CreateShadowCircle(15.0f, 0.4f*fShadow);
+       CreateCrashSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 10.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR(0.0f, 21.0f, 0.0f),  8.0f, SOUND_CHOCa, 0.45f);
+       CreateCrashSphere(D3DVECTOR(0.0f, 32.0f, 0.0f),  7.0f, SOUND_CHOCa, 0.45f);
+
+       CreateShadowCircle(8.0f, 0.5f);
    }
 
-   if ( type == OBJECT_TEEN43 )  // trèfle ?
+   SetZoom(0, zoom);
+
+   pos = RetPosition(0);
+   SetPosition(0, pos);  // pour afficher les ombres tout de suite
+
+   SetFloorHeight(0.0f);
+   CreateOtherObject(type);
+
+   pos = RetPosition(0);
+   pos.y += height;
+   SetPosition(0, pos);
+
+   delete pModFile;
+   return TRUE;
+}
+
+// Crée un champignon posé sur le sol.
+
+BOOL CObject::CreateMushroom(D3DVECTOR pos, float angle, float zoom,
+                            float height, ObjectType type, BOOL bPlumb)
+{
+   CModFile*   pModFile;
+   int         rank;
+
+   if ( m_engine->RetRestCreate() < 1 )  return FALSE;
+
+   pModFile = new CModFile(m_iMan);
+
+   SetType(type);
+
+   if ( type == OBJECT_MUSHROOM1 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen43.mod");
+       pModFile->ReadModel("objects\\mush1.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 2.0f, SOUND_BOUM, 0.10f);
-       CreateShadowCircle(15.0f, 0.4f*fShadow);
+       CreateCrashSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 3.0f, SOUND_BOUM, 0.10f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 5.5f);
+       SetJotlerSphere(D3DVECTOR(0.0f, 3.0f, 0.0f), 5.5f);
+
+       CreateShadowCircle(6.0f, 0.5f);
    }
 
-   if ( type == OBJECT_TEEN44 )  // caisse ?
+   if ( type == OBJECT_MUSHROOM2 )
    {
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEFIX);
        SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\teen44.mod");
+       pModFile->ReadModel("objects\\mush2.mod");
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, zoom);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 55.0f, SOUND_BOUM, 0.10f);
-       SetGlobalSphere(D3DVECTOR(0.0f, 10.0f, 0.0f), 55.0f);
-       CreateShadowCircle(55.0f, 1.0f*fShadow);
+       CreateCrashSphere(D3DVECTOR(0.0f, 5.0f, 0.0f), 3.0f, SOUND_BOUM, 0.10f);
+       SetGlobalSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 5.5f);
+       SetJotlerSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 5.5f);
+
+       CreateShadowCircle(5.0f, 0.5f);
    }
 
+   SetZoom(0, zoom);
+
    pos = RetPosition(0);
    SetPosition(0, pos);  // pour afficher les ombres tout de suite
 
-   if ( bFloorAdjust )
-   {
-       SetFloorHeight(0.0f);
-       FloorAdjust();
-   }
-
+   SetFloorHeight(0.0f);
    CreateOtherObject(type);
 
    pos = RetPosition(0);
@@ -4725,8 +5604,8 @@ BOOL CObject::CreateTeen(D3DVECTOR pos, float angle, float zoom, float height,
 
 // Crée un quartz posé sur le sol.
 
-BOOL CObject::CreateQuartz(D3DVECTOR pos, float angle, float height,
-                          ObjectType type)
+BOOL CObject::CreateQuartz(D3DVECTOR pos, float angle, float zoom,
+                          float height, ObjectType type, BOOL bPlumb)
 {
    CModFile*   pModFile;
    float       radius;
@@ -4799,6 +5678,8 @@ BOOL CObject::CreateQuartz(D3DVECTOR pos, float angle, float height,
        CreateShadowCircle(10.0f, 0.5f);
    }
 
+   SetZoom(0, zoom);
+
    pos = RetPosition(0);
    SetPosition(0, pos);  // pour afficher les ombres tout de suite
 
@@ -4829,8 +5710,8 @@ BOOL CObject::CreateQuartz(D3DVECTOR pos, float angle, float height,
        pos.y += 16.0f;
        radius = 8.0f;
    }
-   m_particule->CreateParticule(pos, pos, FPOINT(2.0f, 2.0f), PARTIQUARTZ, 0.7f+Rand()*0.7f, radius, 0.0f);
-   m_particule->CreateParticule(pos, pos, FPOINT(2.0f, 2.0f), PARTIQUARTZ, 0.7f+Rand()*0.7f, radius, 0.0f);
+   m_particule->CreateParticule(pos, pos, FPOINT(2.0f, 2.0f), PARTIQUARTZ, 0.7f+Rand()*0.7f, radius);
+   m_particule->CreateParticule(pos, pos, FPOINT(2.0f, 2.0f), PARTIQUARTZ, 0.7f+Rand()*0.7f, radius);
 
    delete pModFile;
    return TRUE;
@@ -4838,8 +5719,8 @@ BOOL CObject::CreateQuartz(D3DVECTOR pos, float angle, float height,
 
 // Crée une racine posée sur le sol.
 
-BOOL CObject::CreateRoot(D3DVECTOR pos, float angle, float height,
-                        ObjectType type)
+BOOL CObject::CreateRoot(D3DVECTOR pos, float angle, float zoom,
+                        float height, ObjectType type, BOOL bPlumb)
 {
    CModFile*   pModFile;
    int         rank;
@@ -4859,7 +5740,7 @@ BOOL CObject::CreateRoot(D3DVECTOR pos, float angle, float height,
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, 2.0f);
+       SetZoom(0, 2.0f*zoom);
 
        CreateCrashSphere(D3DVECTOR(-5.0f,  1.0f,  0.0f), 2.0f, SOUND_BOUMv, 0.15f);
        CreateCrashSphere(D3DVECTOR( 4.0f,  1.0f,  2.0f), 2.0f, SOUND_BOUMv, 0.15f);
@@ -4881,7 +5762,7 @@ BOOL CObject::CreateRoot(D3DVECTOR pos, float angle, float height,
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, 2.0f);
+       SetZoom(0, 2.0f*zoom);
 
        CreateCrashSphere(D3DVECTOR(-4.0f,  1.0f,  1.0f), 2.0f, SOUND_BOUMv, 0.15f);
        CreateCrashSphere(D3DVECTOR( 0.0f,  1.0f,  2.0f), 1.5f, SOUND_BOUMv, 0.15f);
@@ -4903,7 +5784,7 @@ BOOL CObject::CreateRoot(D3DVECTOR pos, float angle, float height,
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, 2.0f);
+       SetZoom(0, 2.0f*zoom);
 
        CreateCrashSphere(D3DVECTOR(-3.0f,  1.0f,  0.5f), 2.0f, SOUND_BOUMv, 0.15f);
        CreateCrashSphere(D3DVECTOR( 3.0f,  1.0f, -1.0f), 2.0f, SOUND_BOUMv, 0.15f);
@@ -4924,7 +5805,7 @@ BOOL CObject::CreateRoot(D3DVECTOR pos, float angle, float height,
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, 2.0f);
+       SetZoom(0, 2.0f*zoom);
 
        CreateCrashSphere(D3DVECTOR(-4.0f,  1.0f,  1.0f), 3.0f, SOUND_BOUMv, 0.15f);
        CreateCrashSphere(D3DVECTOR( 4.0f,  1.0f, -3.0f), 3.0f, SOUND_BOUMv, 0.15f);
@@ -4947,7 +5828,7 @@ BOOL CObject::CreateRoot(D3DVECTOR pos, float angle, float height,
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, 2.0f);
+       SetZoom(0, 2.0f*zoom);
 
        CreateCrashSphere(D3DVECTOR( -7.0f,  2.0f,  3.0f), 4.0f, SOUND_BOUMv, 0.15f);
        CreateCrashSphere(D3DVECTOR(  5.0f,  2.0f, -6.0f), 4.0f, SOUND_BOUMv, 0.15f);
@@ -4972,7 +5853,7 @@ BOOL CObject::CreateRoot(D3DVECTOR pos, float angle, float height,
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, 2.0f);
+       SetZoom(0, 2.0f*zoom);
 
        rank = m_engine->CreateObject();
        m_engine->SetObjectType(rank, TYPEDESCENDANT);
@@ -5015,8 +5896,8 @@ BOOL CObject::CreateRoot(D3DVECTOR pos, float angle, float height,
 
 // Crée une petite maison.
 
-BOOL CObject::CreateHome(D3DVECTOR pos, float angle, float height,
-                        ObjectType type)
+BOOL CObject::CreateHome(D3DVECTOR pos, float angle, float zoom,
+                        float height, ObjectType type, BOOL bPlumb)
 {
    CModFile*   pModFile;
    int         rank;
@@ -5036,10 +5917,123 @@ BOOL CObject::CreateHome(D3DVECTOR pos, float angle, float height,
        pModFile->CreateEngineObject(rank);
        SetPosition(0, pos);
        SetAngleY(0, angle);
-       SetZoom(0, 1.3f);
 
-       CreateCrashSphere(D3DVECTOR(0.0f, 5.0f, 0.0f), 10.0f, SOUND_BOUMs, 0.25f);
-//?        SetGlobalSphere(D3DVECTOR(0.0f, 6.0f, 0.0f), 11.0f);
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(1, rank);
+       SetObjectParent(1, 0);
+       pModFile->ReadModel("objects\\home102.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(1, D3DVECTOR(8.5f, 14.0f, 8.5f));
+       SetAngleY(1, PI*1.75f);
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(2, rank);
+       SetObjectParent(2, 0);
+       pModFile->ReadModel("objects\\home102.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(2, D3DVECTOR(-8.5f, 14.0f, 8.5f));
+       SetAngleY(2, PI*1.25f);
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(3, rank);
+       SetObjectParent(3, 0);
+       pModFile->ReadModel("objects\\home102.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(3, D3DVECTOR(8.5f, 14.0f, -8.5f));
+       SetAngleY(3, PI*0.25f);
+
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEDESCENDANT);
+       SetObjectRank(4, rank);
+       SetObjectParent(4, 0);
+       pModFile->ReadModel("objects\\home102.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(4, D3DVECTOR(-8.5f, 14.0f, -8.5f));
+       SetAngleY(4, PI*0.75f);
+
+#if 0
+       CreateCrashSphere(D3DVECTOR( 0.0f, 2.0f,  0.0f), 10.0f, SOUND_BOUMm, 0.25f);
+       CreateCrashSphere(D3DVECTOR(-6.0f, 2.0f,  6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-6.0f, 2.0f,  0.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-6.0f, 2.0f, -6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 2.0f,  6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 2.0f,  0.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 2.0f, -6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 6.0f, 2.0f,  6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 6.0f, 2.0f,  0.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 6.0f, 2.0f, -6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+#endif
+       CreateShadowCircle(16.0f, 0.5f);
+   }
+
+   if ( type == OBJECT_HOME2 )
+   {
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEFIX);
+       SetObjectRank(0, rank);
+       pModFile->ReadModel("objects\\home2.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+
+#if 0
+       CreateCrashSphere(D3DVECTOR( 0.0f, 2.0f,  0.0f), 10.0f, SOUND_BOUMm, 0.25f);
+       CreateCrashSphere(D3DVECTOR(-6.0f, 2.0f,  6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-6.0f, 2.0f,  0.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-6.0f, 2.0f, -6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 2.0f,  6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 2.0f,  0.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 2.0f, -6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 6.0f, 2.0f,  6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 6.0f, 2.0f,  0.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 6.0f, 2.0f, -6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 10.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f,  10.0f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-10.0f, -10.0f), SOUND_BOUMm, 0.45f);
+#endif
+       CreateShadowCircle(16.0f, 0.5f);
+   }
+
+   if ( type == OBJECT_HOME3 )
+   {
+       rank = m_engine->CreateObject();
+       m_engine->SetObjectType(rank, TYPEFIX);
+       SetObjectRank(0, rank);
+       pModFile->ReadModel("objects\\home3.mod");
+       pModFile->CreateEngineObject(rank);
+       SetPosition(0, pos);
+       SetAngleY(0, angle);
+
+#if 0
+       CreateCrashSphere(D3DVECTOR( 0.0f, 2.0f,  0.0f), 10.0f, SOUND_BOUMm, 0.25f);
+       CreateCrashSphere(D3DVECTOR(-6.0f, 2.0f,  6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-6.0f, 2.0f,  0.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR(-6.0f, 2.0f, -6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 2.0f,  6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 2.0f,  0.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 0.0f, 2.0f, -6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 6.0f, 2.0f,  6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 6.0f, 2.0f,  0.0f),  4.0f, SOUND_BOUMm, 0.45f);
+       CreateCrashSphere(D3DVECTOR( 6.0f, 2.0f, -6.0f),  4.0f, SOUND_BOUMm, 0.45f);
+#else
+       CreateCrashLine(FPOINT(-9.5f, -9.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 9.5f, -9.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT( 9.5f,  9.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-9.5f,  9.5f), SOUND_BOUMm, 0.45f);
+       CreateCrashLine(FPOINT(-9.5f, -9.5f), SOUND_BOUMm, 0.45f);
+#endif
        CreateShadowCircle(16.0f, 0.5f);
    }
 
@@ -5059,8 +6053,8 @@ BOOL CObject::CreateHome(D3DVECTOR pos, float angle, float height,
 
 // Crée une ruine posée sur le sol.
 
-BOOL CObject::CreateRuin(D3DVECTOR pos, float angle, float height,
-                        ObjectType type)
+BOOL CObject::CreateRuin(D3DVECTOR pos, float angle, float zoom,
+                        float height, ObjectType type, BOOL bPlumb)
 {
    CModFile*   pModFile;
    char        name[50];
@@ -5335,7 +6329,7 @@ BOOL CObject::CreateRuin(D3DVECTOR pos, float angle, float height,
         type != OBJECT_RUINconvert &&
         type != OBJECT_RUINbase    )
    {
-       FloorAdjust();
+       if ( !bPlumb )  FloorAdjust();
    }
 
    pos = RetPosition(0);
@@ -5484,307 +6478,110 @@ BOOL CObject::CreateRuin(D3DVECTOR pos, float angle, float height,
    return TRUE;
 }
 
-// Crée un gadget apollo.
-
-BOOL CObject::CreateApollo(D3DVECTOR pos, float angle, ObjectType type)
-{
-   CModFile*   pModFile;
-   int         rank, i;
-
-   if ( m_engine->RetRestCreate() < 6 )  return FALSE;
-
-   pModFile = new CModFile(m_iMan);
-
-   SetType(type);
-
-   if ( type == OBJECT_APOLLO1 )  // LEM ?
-   {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);  // c'est un objet fixe
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\apollol1.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
-       SetZoom(0, 1.2f);
-       SetFloorHeight(0.0f);
-
-       for ( i=0 ; i<4 ; i++ )  // crée les pieds
-       {
-           rank = m_engine->CreateObject();
-           m_engine->SetObjectType(rank, TYPEDESCENDANT);
-           SetObjectRank(i+1, rank);
-           SetObjectParent(i+1, 0);
-           pModFile->ReadModel("objects\\apollol2.mod");
-           pModFile->CreateEngineObject(rank);
-           SetAngleY(i+1, PI/2.0f*i);
-       }
-
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(5, rank);
-       SetObjectParent(5, 0);
-       pModFile->ReadModel("objects\\apollol3.mod");  // échelle
-       pModFile->CreateEngineObject(rank);
-
-//?        m_terrain->AddBuildingLevel(pos, 10.0f, 13.0f, 12.0f, 0.0f);
-
-       CreateCrashSphere(D3DVECTOR(  0.0f, 4.0f,   0.0f), 9.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 11.0f, 5.0f,   0.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-11.0f, 5.0f,   0.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 5.0f, -11.0f), 3.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(  0.0f, 5.0f,  11.0f), 3.0f, SOUND_BOUMm, 0.45f);
-
-       SetGlobalSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 9.0f);
-
-       CreateShadowCircle(16.0f, 0.5f);
-   }
-
-   if ( type == OBJECT_APOLLO2 )  // jeep ?
-   {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);  // c'est un objet fixe
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\apolloj1.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
-       SetFloorHeight(0.0f);
-
-       // Roues.
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(1, rank);
-       SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\apolloj4.mod");  // roue
-       pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(-5.75f, 1.65f, -5.0f));
-
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(2, rank);
-       SetObjectParent(2, 0);
-       pModFile->ReadModel("objects\\apolloj4.mod");  // roue
-       pModFile->CreateEngineObject(rank);
-       SetPosition(2, D3DVECTOR(-5.75f, 1.65f, 5.0f));
-
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(3, rank);
-       SetObjectParent(3, 0);
-       pModFile->ReadModel("objects\\apolloj4.mod");  // roue
-       pModFile->CreateEngineObject(rank);
-       SetPosition(3, D3DVECTOR(5.75f, 1.65f, -5.0f));
-
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(4, rank);
-       SetObjectParent(4, 0);
-       pModFile->ReadModel("objects\\apolloj4.mod");  // roue
-       pModFile->CreateEngineObject(rank);
-       SetPosition(4, D3DVECTOR(5.75f, 1.65f, 5.0f));
-
-       // Accessoirs :
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(5, rank);
-       SetObjectParent(5, 0);
-       pModFile->ReadModel("objects\\apolloj2.mod");  // antenne
-       pModFile->CreateEngineObject(rank);
-       SetPosition(5, D3DVECTOR(5.5f, 8.8f, 2.0f));
-       SetAngleY(5, -120.0f*PI/180.0f);
-       SetAngleZ(5,   45.0f*PI/180.0f);
-
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(6, rank);
-       SetObjectParent(6, 0);
-       pModFile->ReadModel("objects\\apolloj3.mod");  // caméra
-       pModFile->CreateEngineObject(rank);
-       SetPosition(6, D3DVECTOR(5.5f, 2.8f, -2.0f));
-       SetAngleY(6, 30.0f*PI/180.0f);
-
-       CreateCrashSphere(D3DVECTOR( 3.0f, 2.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR(-3.0f, 2.0f, 0.0f), 5.0f, SOUND_BOUMm, 0.45f);
-       CreateCrashSphere(D3DVECTOR( 7.0f, 9.0f, 2.0f), 2.0f, SOUND_BOUMm, 0.20f);
-
-       CreateShadowCircle(7.0f, 0.8f);
-
-       FloorAdjust();
-   }
-
-   if ( type == OBJECT_APOLLO3 )  // flag ?
-   {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);  // c'est un objet fixe
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\apollof.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
-       SetFloorHeight(0.0f);
-
-       SetJotlerSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 1.0f);
-       CreateShadowCircle(2.0f, 0.3f);
-   }
-
-   if ( type == OBJECT_APOLLO4 )  // module ?
-   {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);  // c'est un objet fixe
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\apollom.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
-       SetFloorHeight(0.0f);
-
-       CreateCrashSphere(D3DVECTOR(0.0f, 2.0f, 0.0f), 2.0f, SOUND_BOUMm, 0.45f);
-       CreateShadowCircle(5.0f, 0.8f);
-
-       FloorAdjust();
-   }
-
-   if ( type == OBJECT_APOLLO5 )  // antenna ?
-   {
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEFIX);  // c'est un objet fixe
-       SetObjectRank(0, rank);
-       pModFile->ReadModel("objects\\apolloa.mod");
-       pModFile->CreateEngineObject(rank);
-       SetPosition(0, pos);
-       SetAngleY(0, angle);
-       SetFloorHeight(0.0f);
-
-       rank = m_engine->CreateObject();
-       m_engine->SetObjectType(rank, TYPEDESCENDANT);
-       SetObjectRank(1, rank);
-       SetObjectParent(1, 0);
-       pModFile->ReadModel("objects\\apolloj2.mod");  // antenne
-       pModFile->CreateEngineObject(rank);
-       SetPosition(1, D3DVECTOR(0.0f, 5.0f, 0.0f));
-       SetAngleY(1, -120.0f*PI/180.0f);
-       SetAngleZ(1,   45.0f*PI/180.0f);
-
-       CreateCrashSphere(D3DVECTOR(0.0f, 4.0f, 0.0f), 3.0f, SOUND_BOUMm, 0.35f);
-       CreateShadowCircle(3.0f, 0.7f);
-   }
-
-   CreateOtherObject(type);
-
-   pos = RetPosition(0);
-   SetPosition(0, pos);  // pour afficher les ombres tout de suite
-
-   delete pModFile;
-   return TRUE;
-}
-
 // Crée tous les sous-objets permettant de gérer cet objet.
 
 void CObject::CreateOtherObject(ObjectType type)
 {
-   if ( type == OBJECT_BASE )
-   {
-       m_auto = new CAutoBase(m_iMan, this);
-   }
-   if ( type == OBJECT_PORTICO )
-   {
-       m_auto = new CAutoPortico(m_iMan, this);
-   }
-   if ( type == OBJECT_DERRICK )
+   if ( type == OBJECT_TOWER )
    {
-       m_auto = new CAutoDerrick(m_iMan, this);
+       m_auto = new CAutoTower(m_iMan, this);
    }
-   if ( type == OBJECT_FACTORY )
+   if ( type == OBJECT_DOOR1 ||
+        type == OBJECT_DOOR2 ||
+        type == OBJECT_DOOR3 ||
+        type == OBJECT_DOOR4 )
    {
-       m_auto = new CAutoFactory(m_iMan, this);
+       m_auto = new CAutoDoor(m_iMan, this);
    }
-   if ( type == OBJECT_REPAIR )
+   if ( type == OBJECT_ALIEN2 ||
+        type == OBJECT_ALIEN3 ||
+        type == OBJECT_ALIEN5 ||
+        type == OBJECT_ALIEN6 ||
+        type == OBJECT_ALIEN7 ||
+        type == OBJECT_ALIEN8 ||
+        type == OBJECT_ALIEN9 )
    {
-       m_auto = new CAutoRepair(m_iMan, this);
+       m_auto = new CAutoAlien(m_iMan, this);
    }
-   if ( type == OBJECT_DESTROYER )
+   if ( type == OBJECT_DOCK )
    {
-       m_auto = new CAutoDestroyer(m_iMan, this);
+       m_auto = new CAutoDock(m_iMan, this);
    }
-   if ( type == OBJECT_STATION )
+   if ( type == OBJECT_REMOTE )
    {
-       m_auto = new CAutoStation(m_iMan, this);
+       m_auto = new CAutoRemote(m_iMan, this);
    }
-   if ( type == OBJECT_CONVERT )
+   if ( type == OBJECT_STAND )
    {
-       m_auto = new CAutoConvert(m_iMan, this);
+       m_auto = new CAutoStand(m_iMan, this);
    }
-   if ( type == OBJECT_TOWER )
+   if ( type == OBJECT_GENERATOR )
    {
-       m_auto = new CAutoTower(m_iMan, this);
+       m_auto = new CAutoGenerator(m_iMan, this);
    }
-   if ( type == OBJECT_RESEARCH )
+   if ( type == OBJECT_COMPUTER )
    {
-       m_auto = new CAutoResearch(m_iMan, this);
+       m_auto = new CAutoComputer(m_iMan, this);
    }
-   if ( type == OBJECT_RADAR )
+   if ( type == OBJECT_REPAIR )
    {
-       m_auto = new CAutoRadar(m_iMan, this);
+       m_auto = new CAutoRepair(m_iMan, this);
    }
-   if ( type == OBJECT_INFO )
+   if ( type == OBJECT_FIRE )
    {
-       m_auto = new CAutoInfo(m_iMan, this);
+       m_auto = new CAutoFire(m_iMan, this);
    }
-   if ( type == OBJECT_ENERGY )
+   if ( type == OBJECT_HELICO )
    {
-       m_auto = new CAutoEnergy(m_iMan, this);
+       m_auto = new CAutoHelico(m_iMan, this);
    }
-   if ( type == OBJECT_LABO )
+   if ( type == OBJECT_COMPASS )
    {
-       m_auto = new CAutoLabo(m_iMan, this);
+       m_auto = new CAutoCompass(m_iMan, this);
    }
-   if ( type == OBJECT_NUCLEAR )
+   if ( type == OBJECT_BLITZER )
    {
-       m_auto = new CAutoNuclear(m_iMan, this);
+       m_auto = new CAutoBlitzer(m_iMan, this);
    }
-   if ( type == OBJECT_PARA )
+   if ( type == OBJECT_INCA7 )
    {
-       m_auto = new CAutoPara(m_iMan, this);
+       m_auto = new CAutoInca(m_iMan, this);
    }
-   if ( type == OBJECT_SAFE )
+   if ( type == OBJECT_HOOK )
    {
-       m_auto = new CAutoSafe(m_iMan, this);
+       m_auto = new CAutoHook(m_iMan, this);
    }
-   if ( type == OBJECT_HUSTON )
+   if ( type == OBJECT_BARREL    ||
+        type == OBJECT_BARRELa   ||
+        type == OBJECT_CARCASS1  ||
+        type == OBJECT_CARCASS2  ||
+        type == OBJECT_CARCASS3  ||
+        type == OBJECT_CARCASS4  ||
+        type == OBJECT_CARCASS5  ||
+        type == OBJECT_CARCASS6  ||
+        type == OBJECT_CARCASS7  ||
+        type == OBJECT_CARCASS8  ||
+        type == OBJECT_CARCASS9  ||
+        type == OBJECT_CARCASS10 )
    {
-       m_auto = new CAutoHuston(m_iMan, this);
+       m_auto = new CAutoBarrel(m_iMan, this);
    }
-   if ( type == OBJECT_EGG )
+   if ( type == OBJECT_BOMB )
    {
-       m_auto = new CAutoEgg(m_iMan, this);
+       m_auto = new CAutoBomb(m_iMan, this);
    }
-   if ( type == OBJECT_NEST )
+   if ( type == OBJECT_HOME1 ||
+        type == OBJECT_HOME2 ||
+        type == OBJECT_HOME3 ||
+        type == OBJECT_HOME4 ||
+        type == OBJECT_HOME5 )
    {
-       m_auto = new CAutoNest(m_iMan, this);
+       m_auto = new CAutoHome(m_iMan, this);
    }
    if ( type == OBJECT_ROOT5 )
    {
        m_auto = new CAutoRoot(m_iMan, this);
    }
-   if ( type == OBJECT_MUSHROOM2 )
-   {
-       m_auto = new CAutoMush(m_iMan, this);
-   }
-   if ( type == OBJECT_FLAGb ||
-        type == OBJECT_FLAGr ||
-        type == OBJECT_FLAGg ||
-        type == OBJECT_FLAGy ||
-        type == OBJECT_FLAGv )
-   {
-       m_auto = new CAutoFlag(m_iMan, this);
-   }
-   if ( type == OBJECT_TEEN36 ||  // tronc ?
-        type == OBJECT_TEEN37 ||  // bateau ?
-        type == OBJECT_TEEN38 )   // ventillateur ?
-   {
-       m_auto = new CAutoKid(m_iMan, this);
-   }
 }
 
 
@@ -5856,7 +6653,7 @@ BOOL CObject::UpdateTransformObject(int part, BOOL bForceUpdate)
    if ( part == 0 )  // partie principale ?
    {
        position += m_linVibration;
-       angle    += m_cirVibration+m_inclinaison;
+       angle    += m_cirVibration+m_cirChoc+m_inclinaison;
    }
 
    if ( m_objectPart[part].bTranslate ||
@@ -5956,39 +6753,44 @@ BOOL CObject::UpdateTransformObject()
    }
    else
    {
-       parent1 = 0;
-       bUpdate1 = UpdateTransformObject(parent1, FALSE);
-
-       for ( level1=0 ; level1<m_totalPart ; level1++ )
+       for ( parent1=0 ; parent1<m_totalPart ; parent1++ )
        {
-           rank = SearchDescendant(parent1, level1);
-           if ( rank == -1 )  break;
+           if ( !m_objectPart[parent1].bUsed )  continue;
+           if ( m_objectPart[parent1].parentPart != -1 )  continue;
 
-           parent2 = rank;
-           bUpdate2 = UpdateTransformObject(rank, bUpdate1);
+           bUpdate1 = UpdateTransformObject(parent1, FALSE);
 
-           for ( level2=0 ; level2<m_totalPart ; level2++ )
+           for ( level1=0 ; level1<m_totalPart ; level1++ )
            {
-               rank = SearchDescendant(parent2, level2);
+               rank = SearchDescendant(parent1, level1);
                if ( rank == -1 )  break;
 
-               parent3 = rank;
-               bUpdate3 = UpdateTransformObject(rank, bUpdate2);
+               parent2 = rank;
+               bUpdate2 = UpdateTransformObject(rank, bUpdate1);
 
-               for ( level3=0 ; level3<m_totalPart ; level3++ )
+               for ( level2=0 ; level2<m_totalPart ; level2++ )
                {
-                   rank = SearchDescendant(parent3, level3);
+                   rank = SearchDescendant(parent2, level2);
                    if ( rank == -1 )  break;
 
-                   parent4 = rank;
-                   bUpdate4 = UpdateTransformObject(rank, bUpdate3);
+                   parent3 = rank;
+                   bUpdate3 = UpdateTransformObject(rank, bUpdate2);
 
-                   for ( level4=0 ; level4<m_totalPart ; level4++ )
+                   for ( level3=0 ; level3<m_totalPart ; level3++ )
                    {
-                       rank = SearchDescendant(parent4, level4);
+                       rank = SearchDescendant(parent3, level3);
                        if ( rank == -1 )  break;
 
-                       UpdateTransformObject(rank, bUpdate4);
+                       parent4 = rank;
+                       bUpdate4 = UpdateTransformObject(rank, bUpdate3);
+
+                       for ( level4=0 ; level4<m_totalPart ; level4++ )
+                       {
+                           rank = SearchDescendant(parent4, level4);
+                           if ( rank == -1 )  break;
+
+                           UpdateTransformObject(rank, bUpdate4);
+                       }
                    }
                }
            }
@@ -6009,86 +6811,44 @@ void CObject::FlatParent()
 
    for ( i=0 ; i<m_totalPart ; i++ )
    {
-       m_objectPart[i].position.x = m_objectPart[i].matWorld._41;
-       m_objectPart[i].position.y = m_objectPart[i].matWorld._42;
-       m_objectPart[i].position.z = m_objectPart[i].matWorld._43;
-
-       m_objectPart[i].matWorld._41 = 0.0f;
-       m_objectPart[i].matWorld._42 = 0.0f;
-       m_objectPart[i].matWorld._43 = 0.0f;
-
-       m_objectPart[i].matTranslate._41 = 0.0f;
-       m_objectPart[i].matTranslate._42 = 0.0f;
-       m_objectPart[i].matTranslate._43 = 0.0f;
-
-       m_objectPart[i].parentPart = -1;  // plus de parent
+       if ( m_objectPart[i].bUsed )
+       {
+           FlatParent(i);
+       }
    }
 
    m_bFlat = TRUE;
 }
 
+// Met un sous-objet à plat (il devient père).
+// Ceci permet de faire partir le sous-objet sous forme d'un débris
+// indépendamment du reste de l'objet.
 
-
-// Met à jour la mapping de la texture de la pile.
-
-void CObject::UpdateEnergyMapping()
+BOOL CObject::FlatParent(int part)
 {
-   D3DMATERIAL7    mat;
-   float           a, b, i, s, au, bu;
-   float           limit[6];
-   int             j;
+   int     i = part;
 
-   if ( Abs(m_energy-m_lastEnergy) < 0.01f )  return;
-   m_lastEnergy = m_energy;
+   if ( m_objectPart[i].parentPart == -1 )  return FALSE;
 
-   ZeroMemory( &mat, sizeof(D3DMATERIAL7) );
-   mat.diffuse.r = 1.0f;
-   mat.diffuse.g = 1.0f;
-   mat.diffuse.b = 1.0f;  // blanc
-   mat.ambient.r = 0.5f;
-   mat.ambient.g = 0.5f;
-   mat.ambient.b = 0.5f;
-
-   if ( m_type == OBJECT_POWER  ||
-        m_type == OBJECT_ATOMIC )
-   {
-       a = 2.0f;
-       b = 0.0f;  // dimensions de la pile (selon y)
-   }
-   if ( m_type == OBJECT_STATION )
-   {
-       a = 10.0f;
-       b =  4.0f;  // dimensions de la pile (selon y)
-   }
-   if ( m_type == OBJECT_ENERGY )
-   {
-       a = 9.0f;
-       b = 3.0f;  // dimensions de la pile (selon y)
-   }
+   m_objectPart[i].position.x = m_objectPart[i].matWorld._41;
+   m_objectPart[i].position.y = m_objectPart[i].matWorld._42;
+   m_objectPart[i].position.z = m_objectPart[i].matWorld._43;
 
-   i = 0.50f+0.25f*m_energy;  // origine
-   s = i+0.25f;  // largeur
+   m_objectPart[i].matWorld._41 = 0.0f;
+   m_objectPart[i].matWorld._42 = 0.0f;
+   m_objectPart[i].matWorld._43 = 0.0f;
 
-   au = (s-i)/(b-a);
-   bu = s-b*(s-i)/(b-a);
+   m_objectPart[i].matTranslate._41 = 0.0f;
+   m_objectPart[i].matTranslate._42 = 0.0f;
+   m_objectPart[i].matTranslate._43 = 0.0f;
 
-   limit[0] = 0.0f;
-   limit[1] = m_engine->RetLimitLOD(0);
-   limit[2] = limit[1];
-   limit[3] = m_engine->RetLimitLOD(1);
-   limit[4] = limit[3];
-   limit[5] = 1000000.0f;
+   m_objectPart[i].parentPart = -1;  // plus de parent
 
-   for ( j=0 ; j<3 ; j++ )
-   {
-       m_engine->ChangeTextureMapping(m_objectPart[0].object,
-                                      mat, D3DSTATEPART3, "lemt.tga", "",
-                                      limit[j*2+0], limit[j*2+1], D3DMAPPING1Y,
-                                      au, bu, 1.0f, 0.0f);
-   }
+   return TRUE;
 }
 
 
+
 // Action manuelle.
 
 BOOL CObject::EventProcess(const Event &event)
@@ -6135,23 +6895,59 @@ BOOL CObject::EventProcess(const Event &event)
 
    if ( m_physics != 0 )
    {
-       if ( !m_physics->EventProcess(event) )  // objet détruit ?
+       if ( m_bRecorderPlay && m_recorder != 0 )  // joue l'objet ?
+       {
+           RecorderEvent   re;
+           D3DVECTOR       pos;
+           float           time;
+
+           time = m_main->RetRecordTime();
+           m_recorder->Get(time, re);
+           pos = re.position;
+
+           if ( !m_main->IsRecordTime() && !m_engine->RetPause() )
+           {
+               pos.y -= 100.0f;  // voiture cachée
+           }
+
+           SetPosition(0, pos);
+           SetAngle(0, re.angle);
+       }
+       else
        {
-           if ( RetSelect()             &&
-                m_type != OBJECT_ANT    &&
-                m_type != OBJECT_SPIDER &&
-                m_type != OBJECT_BEE    )
+           if ( !m_physics->EventProcess(event) )  // objet détruit ?
+           {
+               if ( RetSelect() )
+               {
+                   if ( !m_bDead )  m_camera->SetType(CAMERA_EXPLO);
+                   m_main->DeselectAll();
+               }
+               m_main->StopStartCounter();  // moteur explosé
+               return FALSE;
+           }
+
+           if ( m_bRecorderRecord && m_recorder != 0 )  // enregistre l'objet ?
            {
-               if ( !m_bDead )  m_camera->SetType(CAMERA_EXPLO);
-               m_main->DeselectAll();
+               RecorderEvent   re;
+               float           time;
+
+               time = m_main->RetRecordTime();
+               re.position  = RetPosition(0);
+               re.position += RetLinVibration();
+               re.angle     = RetAngle(0);
+               re.angle    += RetInclinaison();
+               re.angle    += RetCirVibration();
+               m_recorder->Put(time, re);
            }
-           return FALSE;
        }
    }
 
    if ( m_auto != 0 )
    {
-       m_auto->EventProcess(event);
+       if ( !m_auto->EventProcess(event) )
+       {
+           return TRUE;  // bombe détruite
+       }
 
        if ( event.event == EVENT_FRAME &&
             m_auto->IsEnded() != ERR_CONTINUE )
@@ -6191,32 +6987,12 @@ BOOL CObject::EventFrame(const Event &event)
    m_aTime += event.rTime;
    m_shotTime += event.rTime;
 
-   VirusFrame(event.rTime);
    PartiFrame(event.rTime);
 
    UpdateMapping();
    UpdateTransformObject();
    UpdateSelectParticule();
 
-   if ( m_bProxyActivate )  // active si on est proche ?
-   {
-       CPyro*      pyro;
-       D3DVECTOR   eye;
-       float       dist;
-
-       eye = m_engine->RetLookatPt();
-       dist = Length(eye, RetPosition(0));
-       if ( dist < m_proxyDistance )
-       {
-           m_bProxyActivate = FALSE;
-           m_main->CreateShortcuts();
-           m_sound->Play(SOUND_FINDING);
-           pyro = new CPyro(m_iMan);
-           pyro->Create(PT_FINDING, this, 0.0f);
-           m_displayText->DisplayError(INFO_FINDING, this);
-       }
-   }
-
    return TRUE;
 }
 
@@ -6224,62 +7000,9 @@ BOOL CObject::EventFrame(const Event &event)
 
 void CObject::UpdateMapping()
 {
-   if ( m_type == OBJECT_POWER   ||
-        m_type == OBJECT_ATOMIC  ||
-        m_type == OBJECT_STATION ||
-        m_type == OBJECT_ENERGY  )
-   {
-       UpdateEnergyMapping();
-   }
 }
 
 
-// Gestion d'un virus.
-
-void CObject::VirusFrame(float rTime)
-{
-   ParticuleType   type;
-   D3DVECTOR       pos, speed;
-   FPOINT          dim;
-   int             r;
-
-   if ( !m_bVirusMode )  return;  // object sain ?
-
-   m_virusTime += rTime;
-   if ( m_virusTime >= VIRUS_DELAY )
-   {
-       m_bVirusMode = FALSE;  // le virus n'est plus actif
-   }
-
-   if ( m_lastVirusParticule+m_engine->ParticuleAdapt(0.2f) <= m_aTime )
-   {
-       m_lastVirusParticule = m_aTime;
-
-       r = rand()%10;
-       if ( r == 0 )  type = PARTIVIRUS1;
-       if ( r == 1 )  type = PARTIVIRUS2;
-       if ( r == 2 )  type = PARTIVIRUS3;
-       if ( r == 3 )  type = PARTIVIRUS4;
-       if ( r == 4 )  type = PARTIVIRUS5;
-       if ( r == 5 )  type = PARTIVIRUS6;
-       if ( r == 6 )  type = PARTIVIRUS7;
-       if ( r == 7 )  type = PARTIVIRUS8;
-       if ( r == 8 )  type = PARTIVIRUS9;
-       if ( r == 9 )  type = PARTIVIRUS10;
-
-       pos = RetPosition(0);
-       pos.x += (Rand()-0.5f)*10.0f;
-       pos.z += (Rand()-0.5f)*10.0f;
-       speed.x = (Rand()-0.5f)*2.0f;
-       speed.z = (Rand()-0.5f)*2.0f;
-       speed.y = Rand()*4.0f+4.0f;
-       dim.x = Rand()*0.3f+0.3f;
-       dim.y = dim.x;
-
-       m_particule->CreateParticule(pos, speed, dim, type, 3.0f);
-   }
-}
-
 // Gestion des particules maîtresses.
 
 void CObject::PartiFrame(float rTime)
@@ -6342,73 +7065,15 @@ void CObject::SetViewFromHere(D3DVECTOR &eye, float &dirH, float &dirV,
 //?        eye.y =  3.3f;
 //?        eye.z =  0.0f;
    }
-   else if ( m_type == OBJECT_MOBILErt ||
-             m_type == OBJECT_MOBILErr ||
-             m_type == OBJECT_MOBILErs )
-   {
-       eye.x = -1.1f;  // sur le capot
-       eye.y =  7.9f;
-       eye.z =  0.0f;
-   }
-   else if ( m_type == OBJECT_MOBILEwc ||
-             m_type == OBJECT_MOBILEtc ||
-             m_type == OBJECT_MOBILEfc ||
-             m_type == OBJECT_MOBILEic )  // fireball ?
-   {
-//?        eye.x = -0.9f;  // sur le canon
-//?        eye.y =  3.0f;
-//?        eye.z =  0.0f;
-//?        part = 1;
-       eye.x = -0.9f;  // sur le canon
-       eye.y =  8.3f;
-       eye.z =  0.0f;
-   }
-   else if ( m_type == OBJECT_MOBILEwi ||
-             m_type == OBJECT_MOBILEti ||
-             m_type == OBJECT_MOBILEfi ||
-             m_type == OBJECT_MOBILEii )  // orgaball ?
-   {
-//?        eye.x = -3.5f;  // sur le canon
-//?        eye.y =  5.1f;
-//?        eye.z =  0.0f;
-//?        part = 1;
-       eye.x = -2.5f;  // sur le canon
-       eye.y = 10.4f;
-       eye.z =  0.0f;
-   }
-   else if ( m_type == OBJECT_MOBILErc )
-   {
-//?        eye.x =  2.0f;  // dans le canon
-//?        eye.y =  0.0f;
-//?        eye.z =  0.0f;
-//?        part = 2;
-       eye.x =  4.0f;  // sur le canon
-       eye.y = 11.0f;
-       eye.z =  0.0f;
-   }
-   else if ( m_type == OBJECT_MOBILEsa )
-   {
-       eye.x =  3.0f;
-       eye.y =  4.5f;
-       eye.z =  0.0f;
-   }
-   else if ( m_type == OBJECT_MOBILEdr )
-   {
-       eye.x =  1.0f;
-       eye.y =  6.5f;
-       eye.z =  0.0f;
-   }
-   else if ( m_type == OBJECT_APOLLO2 )
+   else if ( m_type == OBJECT_CAR )
    {
-       eye.x = -3.0f;
-       eye.y =  6.0f;
-       eye.z = -2.0f;
+       eye = m_character.camera;
    }
    else
    {
-       eye.x = 0.7f;  // entre les supports
-       eye.y = 4.8f;
-       eye.z = 0.0f;
+       eye.x =  0.7f;  // entre les supports
+       eye.y =  4.8f;
+       eye.z =  0.0f;
    }
 #if ADJUST_ONBOARD
    eye.x += debug_x;
@@ -6457,7 +7122,6 @@ void CObject::SetViewFromHere(D3DVECTOR &eye, float &dirH, float &dirV,
 
    dirH = -(m_objectPart[part].angle.y+PI/2.0f);
    dirV = 0.0f;
-
 }
 
 
@@ -6487,42 +7151,6 @@ float CObject::RetAbsTime()
 }
 
 
-// Gestion de l'énergie contenue dans une pile.
-// Seul l'objet pile possède de l'énergie, mais pas le véhicule
-// qui transporte la pile !
-
-void CObject::SetEnergy(float level)
-{
-   if ( level < 0.0f )  level = 0.0f;
-   if ( level > 1.0f )  level = 1.0f;
-   m_energy = level;
-}
-
-float CObject::RetEnergy()
-{
-   if ( m_type != OBJECT_POWER   &&
-        m_type != OBJECT_ATOMIC  &&
-        m_type != OBJECT_STATION &&
-        m_type != OBJECT_ENERGY  )  return 0.0f;
-   return m_energy;
-}
-
-
-// Gestion de la capacité d'une pile.
-// Seul l'objet pile possède une capacité, mais pas le véhicule
-// qui transporte la pile !
-
-void CObject::SetCapacity(float capacity)
-{
-   m_capacity = capacity;
-}
-
-float CObject::RetCapacity()
-{
-   return m_capacity;
-}
-
-
 // Gestion du bouclier.
 
 void CObject::SetShield(float level)
@@ -6543,39 +7171,31 @@ float CObject::RetShield()
         m_type == OBJECT_KEYc     ||
         m_type == OBJECT_KEYd     ||
         m_type == OBJECT_TNT      ||
-        m_type == OBJECT_TEEN31    ||  // basket ?
-        m_type == OBJECT_SCRAP1   ||
-        m_type == OBJECT_SCRAP2   ||
-        m_type == OBJECT_SCRAP3   ||
-        m_type == OBJECT_SCRAP4   ||
-        m_type == OBJECT_SCRAP5   ||
+        m_type == OBJECT_MINE     ||
+        m_type == OBJECT_POLE     ||
         m_type == OBJECT_BOMB     ||
         m_type == OBJECT_WAYPOINT ||
-        m_type == OBJECT_FLAGb    ||
-        m_type == OBJECT_FLAGr    ||
-        m_type == OBJECT_FLAGg    ||
-        m_type == OBJECT_FLAGy    ||
-        m_type == OBJECT_FLAGv    ||
-        m_type == OBJECT_POWER    ||
+        m_type == OBJECT_BARREL   ||
+        m_type == OBJECT_BARRELa  ||
         m_type == OBJECT_ATOMIC   ||
-        m_type == OBJECT_ANT      ||
-        m_type == OBJECT_SPIDER   ||
-        m_type == OBJECT_BEE      ||
-        m_type == OBJECT_WORM     )  return 0.0f;
+       (m_type >= OBJECT_ROADSIGN1 && m_type <= OBJECT_ROADSIGN30) )
+   {
+       return 0.0f;
+   }
    return m_shield;
 }
 
 
-// Gestion de l'autonomie de vol (zéro = infini).
+// Gestion du bouclier de résistance au feu.
 
-void CObject::SetRange(float delay)
+void CObject::SetBurnShield(float level)
 {
-   m_range = delay;
+   m_burnShield = level;
 }
 
-float CObject::RetRange()
+float CObject::RetBurnShield()
 {
-   return m_range;
+   return m_burnShield;
 }
 
 
@@ -6591,11 +7211,6 @@ void CObject::SetTransparency(float value)
    {
        if ( m_objectPart[i].bUsed )
        {
-           if ( m_type == OBJECT_BASE )
-           {
-               if ( i != 9 )  continue;  // pas pilier central ?
-           }
-
            m_engine->SetObjectTransparency(m_objectPart[i].object, value);
        }
    }
@@ -6607,25 +7222,6 @@ float CObject::RetTransparency()
 }
 
 
-// Gestion de la matière de l'objet.
-
-ObjectMaterial CObject::RetMaterial()
-{
-   if ( m_type == OBJECT_HUMAN )
-   {
-       return OM_HUMAN;
-   }
-
-   if ( m_type == OBJECT_SCRAP4 ||
-        m_type == OBJECT_SCRAP5 )
-   {
-       return OM_HUMAN;
-   }
-
-   return OM_METAL;
-}
-
-
 // Indique si l'objet est un gadget non indispensable.
 
 void CObject::SetGadget(BOOL bMode)
@@ -6672,97 +7268,15 @@ BOOL CObject::JostleObject(float force)
 {
    CAutoJostle*    pa;
 
-   if ( m_type == OBJECT_FLAGb ||
-        m_type == OBJECT_FLAGr ||
-        m_type == OBJECT_FLAGg ||
-        m_type == OBJECT_FLAGy ||
-        m_type == OBJECT_FLAGv )  // drapeau ?
-   {
-       if ( m_auto == 0 )  return FALSE;
-
-       m_auto->Start(1);
-   }
-   else
-   {
-       if ( m_auto != 0 )  return FALSE;
-
-       m_auto = new CAutoJostle(m_iMan, this);
-       pa = (CAutoJostle*)m_auto;
-       pa->Start(0, force);
-   }
+   if ( m_auto != 0 )  return FALSE;
 
+   m_auto = new CAutoJostle(m_iMan, this);
+   pa = (CAutoJostle*)m_auto;
+   pa->Start(0, force);
    return TRUE;
 }
 
 
-// Début de l'effet lorsque l'instruction "detect" est utilisée.
-
-void CObject::StartDetectEffect(CObject *target, BOOL bFound)
-{
-   D3DMATRIX*  mat;
-   D3DVECTOR   pos, goal;
-   FPOINT      dim;
-
-   mat = RetWorldMatrix(0);
-   pos = Transform(*mat, D3DVECTOR(2.0f, 3.0f, 0.0f));
-
-   if ( target == 0 )
-   {
-       goal = Transform(*mat, D3DVECTOR(50.0f, 3.0f, 0.0f));
-   }
-   else
-   {
-       goal = target->RetPosition(0);
-       goal.y += 3.0f;
-       goal = SegmentDist(pos, goal, Length(pos, goal)-3.0f);
-   }
-
-   dim.x = 3.0f;
-   dim.y = dim.x;
-   m_particule->CreateRay(pos, goal, PARTIRAY2, dim, 0.2f);
-
-   if ( target != 0 )
-   {
-       goal = target->RetPosition(0);
-       goal.y += 3.0f;
-       goal = SegmentDist(pos, goal, Length(pos, goal)-1.0f);
-       dim.x = 6.0f;
-       dim.y = dim.x;
-       m_particule->CreateParticule(goal, D3DVECTOR(0.0f, 0.0f, 0.0f), dim,
-                                    bFound?PARTIGLINT:PARTIGLINTr, 0.5f);
-   }
-
-   m_sound->Play(bFound?SOUND_BUILD:SOUND_RECOVER);
-}
-
-
-// Gestion du temps depuis lequel un virus est actif.
-
-void CObject::SetVirusMode(BOOL bEnable)
-{
-   m_bVirusMode = bEnable;
-   m_virusTime = 0.0f;
-
-   if ( m_bVirusMode && m_brain != 0 )
-   {
-       if ( !m_brain->IntroduceVirus() )  // essaye de contaminer
-       {
-           m_bVirusMode = FALSE;  // pas de programme à contaminer !
-       }
-   }
-}
-
-BOOL CObject::RetVirusMode()
-{
-   return m_bVirusMode;
-}
-
-float CObject::RetVirusTime()
-{
-   return m_virusTime;
-}
-
-
 // Gestion du mode de la caméra.
 
 void CObject::SetCameraType(CameraType type)
@@ -6834,6 +7348,12 @@ void CObject::SetSelect(BOOL bMode, BOOL bDisplayError)
 {
    Error       err;
 
+   if ( m_main->RetFixScene() )
+   {
+       CreateSelectParticule();  // crée/supprime les particules
+       return;
+   }
+
    m_bSelect = bMode;
 
    if ( m_physics != 0 )
@@ -6841,16 +7361,10 @@ void CObject::SetSelect(BOOL bMode, BOOL bDisplayError)
        m_physics->CreateInterface(m_bSelect);
    }
 
-   if ( m_auto != 0 )
-   {
-       m_auto->CreateInterface(m_bSelect);
-   }
-
    CreateSelectParticule();  // crée/supprime les particules
 
    if ( !m_bSelect )
    {
-       SetGunGoalH(0.0f);  // met le canon droit
        return;  // fini si pas sélectionné
    }
 
@@ -6865,7 +7379,7 @@ void CObject::SetSelect(BOOL bMode, BOOL bDisplayError)
    }
    if ( err != ERR_OK && bDisplayError )
    {
-       m_displayText->DisplayError(err, this);
+       m_displayText->DisplayError(err);
    }
 }
 
@@ -6913,21 +7427,6 @@ BOOL CObject::RetActivity()
 }
 
 
-// Indique si faut vérifier les tokens de l'objet.
-
-void CObject::SetCheckToken(BOOL bMode)
-{
-   m_bCheckToken = bMode;
-}
-
-// Indique si faut vérifier les tokens de l'objet.
-
-BOOL CObject::RetCheckToken()
-{
-   return m_bCheckToken;
-}
-
-
 // Gestion de la visibilité d'un objet.
 // L'objet n'est pas caché visuellement ni inactif, mais ignoré
 // des détections ! Par exemple: ver sous terre.
@@ -6959,27 +7458,30 @@ BOOL CObject::RetEnable()
 }
 
 
-// Gestion du mode où un objet n'est activé que lorsqu'on
-// est proche.
+// Gestion du mode fantome;
 
-void CObject::SetProxyActivate(BOOL bActivate)
+void CObject::SetGhost(BOOL bGhost)
 {
-   m_bProxyActivate = bActivate;
+   m_bGhost = bGhost;
 }
 
-BOOL CObject::RetProxyActivate()
+BOOL CObject::RetGhost()
 {
-   return m_bProxyActivate;
+   return m_bGhost;
 }
 
-void CObject::SetProxyDistance(float distance)
+
+// Gestion du mode "à terre", lorsqu'un objet a été renversé
+// par PT_ACROBATIC;
+
+void CObject::SetGround(BOOL bGround)
 {
-   m_proxyDistance = distance;
+   m_bGround = bGround;
 }
 
-float CObject::RetProxyDistance()
+BOOL CObject::RetGround()
 {
-   return m_proxyDistance;
+   return m_bGround;
 }
 
 
@@ -7024,30 +7526,29 @@ BOOL CObject::RetLock()
    return m_bLock;
 }
 
-// Gestion du mode "en cours d'explosion" d'un objet.
-// Un objet dans ce mode n'est pas sauvegardé.
+// Gestion du mode "bloqué" pendant le compte à rebour (3, 2, 1, GO).
 
-void CObject::SetExplo(BOOL bExplo)
+void CObject::SetStarting(BOOL bStarting)
 {
-   m_bExplo = bExplo;
+   m_bStarting = bStarting;
 }
 
-BOOL CObject::RetExplo()
+BOOL CObject::RetStarting()
 {
-   return m_bExplo;
+   return m_bStarting;
 }
 
+// Gestion du mode "en cours d'explosion" d'un objet.
+// Un objet dans ce mode n'est pas sauvegardé.
 
-// Gestion du mode "cargaison du vaisseau" pendant les films.
-
-void CObject::SetCargo(BOOL bCargo)
+void CObject::SetExplo(BOOL bExplo)
 {
-   m_bCargo = bCargo;
+   m_bExplo = bExplo;
 }
 
-BOOL CObject::RetCargo()
+BOOL CObject::RetExplo()
 {
-   return m_bCargo;
+   return m_bExplo;
 }
 
 
@@ -7097,106 +7598,33 @@ BOOL CObject::RetRuin()
 
 BOOL CObject::RetActif()
 {
-   return !m_bLock && !m_bBurn && !m_bFlat && m_bVisible && m_bEnable;
+   return !m_bLock && !m_bBurn && !m_bFlat && m_bVisible && m_bEnable && !m_bGhost;
 }
 
 
-// Gestion du point de visée.
-
-void CObject::SetGunGoalV(float gunGoal)
-{
-   if ( m_type == OBJECT_MOBILEfc ||
-        m_type == OBJECT_MOBILEtc ||
-        m_type == OBJECT_MOBILEwc ||
-        m_type == OBJECT_MOBILEic )  // fireball ?
-   {
-       if ( gunGoal >  10.0f*PI/180.0f )  gunGoal =  10.0f*PI/180.0f;
-       if ( gunGoal < -20.0f*PI/180.0f )  gunGoal = -20.0f*PI/180.0f;
-       SetAngleZ(1, gunGoal);
-   }
-   else if ( m_type == OBJECT_MOBILEfi ||
-             m_type == OBJECT_MOBILEti ||
-             m_type == OBJECT_MOBILEwi ||
-             m_type == OBJECT_MOBILEii )  // orgaball ?
-   {
-       if ( gunGoal >  20.0f*PI/180.0f )  gunGoal =  20.0f*PI/180.0f;
-       if ( gunGoal < -20.0f*PI/180.0f )  gunGoal = -20.0f*PI/180.0f;
-       SetAngleZ(1, gunGoal);
-   }
-   else if ( m_type == OBJECT_MOBILErc )  // phazer ?
-   {
-       if ( gunGoal >  45.0f*PI/180.0f )  gunGoal =  45.0f*PI/180.0f;
-       if ( gunGoal < -20.0f*PI/180.0f )  gunGoal = -20.0f*PI/180.0f;
-       SetAngleZ(2, gunGoal);
-   }
-   else
-   {
-       gunGoal = 0.0f;
-   }
-
-   m_gunGoalV = gunGoal;
-}
-
-void CObject::SetGunGoalH(float gunGoal)
-{
-   if ( m_type == OBJECT_MOBILEfc ||
-        m_type == OBJECT_MOBILEtc ||
-        m_type == OBJECT_MOBILEwc ||
-        m_type == OBJECT_MOBILEic )  // fireball ?
-   {
-       if ( gunGoal >  40.0f*PI/180.0f )  gunGoal =  40.0f*PI/180.0f;
-       if ( gunGoal < -40.0f*PI/180.0f )  gunGoal = -40.0f*PI/180.0f;
-       SetAngleY(1, gunGoal);
-   }
-   else if ( m_type == OBJECT_MOBILEfi ||
-             m_type == OBJECT_MOBILEti ||
-             m_type == OBJECT_MOBILEwi ||
-             m_type == OBJECT_MOBILEii )  // orgaball ?
-   {
-       if ( gunGoal >  40.0f*PI/180.0f )  gunGoal =  40.0f*PI/180.0f;
-       if ( gunGoal < -40.0f*PI/180.0f )  gunGoal = -40.0f*PI/180.0f;
-       SetAngleY(1, gunGoal);
-   }
-   else if ( m_type == OBJECT_MOBILErc )  // phazer ?
-   {
-       if ( gunGoal >  40.0f*PI/180.0f )  gunGoal =  40.0f*PI/180.0f;
-       if ( gunGoal < -40.0f*PI/180.0f )  gunGoal = -40.0f*PI/180.0f;
-       SetAngleY(2, gunGoal);
-   }
-   else
-   {
-       gunGoal = 0.0f;
-   }
 
-   m_gunGoalH = gunGoal;
-}
+// Gestion du compteur du nombre de passages.
 
-float CObject::RetGunGoalV()
+void CObject::SetPassCounter(int counter)
 {
-   return m_gunGoalV;
+   m_passCounter = counter;
 }
 
-float CObject::RetGunGoalH()
+int CObject::RetPassCounter()
 {
-   return m_gunGoalH;
+   return m_passCounter;
 }
 
+// Gestion de l'ordre de passages.
 
-
-// Montre les limites de l'objet.
-
-BOOL CObject::StartShowLimit()
+void CObject::SetRankCounter(int rank)
 {
-   if ( m_showLimitRadius == 0.0f )  return FALSE;
-
-   m_main->SetShowLimit(0, PARTILIMIT1, this, RetPosition(0), m_showLimitRadius);
-   m_bShowLimit = TRUE;
-   return TRUE;
+   m_rankCounter = rank;
 }
 
-void CObject::StopShowLimit()
+int CObject::RetRankCounter()
 {
-   m_bShowLimit = FALSE;
+   return m_rankCounter;
 }
 
 
@@ -7219,7 +7647,7 @@ void CObject::CreateSelectParticule()
    int         i;
 
    // Supprime les particules précédentes.
-   for ( i=0 ; i<4 ; i++ )
+   for ( i=0 ; i<10 ; i++ )
    {
        if ( m_partiSel[i] != -1 )
        {
@@ -7228,45 +7656,27 @@ void CObject::CreateSelectParticule()
        }
    }
 
-   if ( m_bSelect || IsProgram() )
+   if ( m_bSelect || IsProgram() || m_main->RetFixScene() )
    {
        // Crée les particules lens pour les phares.
-       if ( m_type == OBJECT_MOBILEfa ||
-            m_type == OBJECT_MOBILEta ||
-            m_type == OBJECT_MOBILEwa ||
-            m_type == OBJECT_MOBILEia ||
-            m_type == OBJECT_MOBILEfc ||
-            m_type == OBJECT_MOBILEtc ||
-            m_type == OBJECT_MOBILEwc ||
-            m_type == OBJECT_MOBILEic ||
-            m_type == OBJECT_MOBILEfi ||
-            m_type == OBJECT_MOBILEti ||
-            m_type == OBJECT_MOBILEwi ||
-            m_type == OBJECT_MOBILEii ||
-            m_type == OBJECT_MOBILEfs ||
-            m_type == OBJECT_MOBILEts ||
-            m_type == OBJECT_MOBILEws ||
-            m_type == OBJECT_MOBILEis ||
-            m_type == OBJECT_MOBILErt ||
-            m_type == OBJECT_MOBILErc ||
-            m_type == OBJECT_MOBILErr ||
-            m_type == OBJECT_MOBILErs ||
-            m_type == OBJECT_MOBILEsa ||
+       if ( m_type == OBJECT_CAR      ||
             m_type == OBJECT_MOBILEtg ||
-            m_type == OBJECT_MOBILEft ||
-            m_type == OBJECT_MOBILEtt ||
-            m_type == OBJECT_MOBILEwt ||
-            m_type == OBJECT_MOBILEit ||
-            m_type == OBJECT_MOBILEdr )  // véhicule ?
+            m_type == OBJECT_MOBILEfb ||
+            m_type == OBJECT_MOBILEob ||
+            m_type == OBJECT_TRAX     ||
+            m_type == OBJECT_UFO      )  // véhicule ?
        {
            pos = D3DVECTOR(0.0f, 0.0f, 0.0f);
            speed = D3DVECTOR(0.0f, 0.0f, 0.0f);
            dim.x = 0.0f;
            dim.y = 0.0f;
-           m_partiSel[0] = m_particule->CreateParticule(pos, speed, dim, PARTISELY, 1.0f, 0.0f, 0.0f);
-           m_partiSel[1] = m_particule->CreateParticule(pos, speed, dim, PARTISELY, 1.0f, 0.0f, 0.0f);
-           m_partiSel[2] = m_particule->CreateParticule(pos, speed, dim, PARTISELR, 1.0f, 0.0f, 0.0f);
-           m_partiSel[3] = m_particule->CreateParticule(pos, speed, dim, PARTISELR, 1.0f, 0.0f, 0.0f);
+           m_partiSel[0] = m_particule->CreateParticule(pos, speed, dim, PARTISELY, 1.0f, 0.0f);
+           m_partiSel[1] = m_particule->CreateParticule(pos, speed, dim, PARTISELY, 1.0f, 0.0f);
+           m_partiSel[2] = m_particule->CreateParticule(pos, speed, dim, PARTISELR, 1.0f, 0.0f);
+           m_partiSel[3] = m_particule->CreateParticule(pos, speed, dim, PARTISELR, 1.0f, 0.0f);
+           m_partiSel[4] = m_particule->CreateParticule(pos, speed, dim, PARTISELY, 1.0f, 0.0f);
+           m_partiSel[5] = m_particule->CreateParticule(pos, speed, dim, PARTISELY, 1.0f, 0.0f);
+           m_partiSel[6] = m_particule->CreateParticule(pos, speed, dim, PARTISELR, 1.0f, 0.0f);
            UpdateSelectParticule();
        }
    }
@@ -7276,54 +7686,48 @@ void CObject::CreateSelectParticule()
 
 void CObject::UpdateSelectParticule()
 {
-   D3DVECTOR   pos[4];
-   FPOINT      dim[4];
-   float       zoom[4];
+   D3DVECTOR   pos[10];
+   FPOINT      dim[10], pp;
+   float       zoom[10];
    float       angle;
    int         i;
 
-   if ( !m_bSelect && !IsProgram() )  return;
+   if ( !m_bSelect && !IsProgram() && !m_main->RetFixScene() )  return;
 
    dim[0].x = 1.0f;
    dim[1].x = 1.0f;
    dim[2].x = 1.2f;
    dim[3].x = 1.2f;
+   dim[4].x = 1.2f;
+   dim[5].x = 1.2f;
+   dim[6].x = 0.2f;
 
    // Lens avants jaunes.
-   if ( m_type == OBJECT_MOBILErt ||
-        m_type == OBJECT_MOBILErc ||
-        m_type == OBJECT_MOBILErr ||
-        m_type == OBJECT_MOBILErs )  // grosses chenilles ?
-   {
-       pos[0] = D3DVECTOR(4.2f, 2.8f,  1.5f);
-       pos[1] = D3DVECTOR(4.2f, 2.8f, -1.5f);
-       dim[0].x = 1.5f;
-       dim[1].x = 1.5f;
-   }
-   else if ( m_type == OBJECT_MOBILEwt ||
-             m_type == OBJECT_MOBILEtt ||
-             m_type == OBJECT_MOBILEft ||
-             m_type == OBJECT_MOBILEit )  // trainer ?
+   if ( m_type == OBJECT_MOBILEtg )  // cible ?
    {
-       pos[0] = D3DVECTOR(4.2f, 2.5f,  1.2f);
-       pos[1] = D3DVECTOR(4.2f, 2.5f, -1.2f);
-       dim[0].x = 1.5f;
-       dim[1].x = 1.5f;
+       pos[0] = D3DVECTOR(3.4f, 6.5f,  2.0f);
+       pos[1] = D3DVECTOR(3.4f, 6.5f, -2.0f);
    }
-   else if ( m_type == OBJECT_MOBILEsa )  // sous-marin ?
+   else if ( m_type == OBJECT_CAR )
    {
-       pos[0] = D3DVECTOR(3.6f, 4.0f,  2.0f);
-       pos[1] = D3DVECTOR(3.6f, 4.0f, -2.0f);
+       pos[0] = m_character.lightFL;
+       pos[1] = m_character.lightFR;
    }
-   else if ( m_type == OBJECT_MOBILEtg )  // cible ?
+   else if ( m_type == OBJECT_TRAX )
    {
-       pos[0] = D3DVECTOR(3.4f, 6.5f,  2.0f);
-       pos[1] = D3DVECTOR(3.4f, 6.5f, -2.0f);
+       pos[0] = D3DVECTOR(6.2f, 10.0f,  2.5f);
+       pos[1] = D3DVECTOR(6.2f, 10.0f, -2.5f);
    }
-   else if ( m_type == OBJECT_MOBILEdr )  // dessinateur ?
+   else if ( m_type == OBJECT_UFO )
    {
-       pos[0] = D3DVECTOR(4.9f, 3.5f,  2.5f);
-       pos[1] = D3DVECTOR(4.9f, 3.5f, -2.5f);
+       angle = m_aTime*2.0f;
+       angle *= 180.0f/PI/22.5f;
+       angle = (float)((int)angle);
+       angle /= 180.0f/PI/22.5f;
+       pp = RotatePoint(angle, 6.0f);
+       pos[0] = D3DVECTOR(pp.x, -0.5f, pp.y);
+       pp = RotatePoint(-angle, 6.0f);
+       pos[1] = D3DVECTOR(pp.x, -0.5f, pp.y);
    }
    else
    {
@@ -7331,72 +7735,24 @@ void CObject::UpdateSelectParticule()
        pos[1] = D3DVECTOR(4.2f, 2.5f, -1.5f);
    }
 
-   // Lens arrières rouges.
-   if ( m_type == OBJECT_MOBILEfa ||
-        m_type == OBJECT_MOBILEfc ||
-        m_type == OBJECT_MOBILEfi ||
-        m_type == OBJECT_MOBILEfs ||
-        m_type == OBJECT_MOBILEft )  // volant ?
-   {
-       pos[2] = D3DVECTOR(-4.0f, 3.1f,  4.5f);
-       pos[3] = D3DVECTOR(-4.0f, 3.1f, -4.5f);
-       dim[2].x = 0.6f;
-       dim[3].x = 0.6f;
-   }
-   if ( m_type == OBJECT_MOBILEwa ||
-        m_type == OBJECT_MOBILEwc ||
-        m_type == OBJECT_MOBILEwi ||
-        m_type == OBJECT_MOBILEws )  // roues ?
-   {
-       pos[2] = D3DVECTOR(-4.5f, 2.7f,  2.8f);
-       pos[3] = D3DVECTOR(-4.5f, 2.7f, -2.8f);
-   }
-   if ( m_type == OBJECT_MOBILEwt )  // roues ?
-   {
-       pos[2] = D3DVECTOR(-4.0f, 2.5f,  2.2f);
-       pos[3] = D3DVECTOR(-4.0f, 2.5f, -2.2f);
-   }
-   if ( m_type == OBJECT_MOBILEia ||
-        m_type == OBJECT_MOBILEic ||
-        m_type == OBJECT_MOBILEii ||
-        m_type == OBJECT_MOBILEis ||
-        m_type == OBJECT_MOBILEit )  // pattes ?
-   {
-       pos[2] = D3DVECTOR(-4.5f, 2.7f,  2.8f);
-       pos[3] = D3DVECTOR(-4.5f, 2.7f, -2.8f);
-   }
-   if ( m_type == OBJECT_MOBILEta ||
-        m_type == OBJECT_MOBILEtc ||
-        m_type == OBJECT_MOBILEti ||
-        m_type == OBJECT_MOBILEts ||
-        m_type == OBJECT_MOBILEtt )  // chenilles ?
-   {
-       pos[2] = D3DVECTOR(-3.6f, 4.2f,  3.0f);
-       pos[3] = D3DVECTOR(-3.6f, 4.2f, -3.0f);
-   }
-   if ( m_type == OBJECT_MOBILErt ||
-        m_type == OBJECT_MOBILErc ||
-        m_type == OBJECT_MOBILErr ||
-        m_type == OBJECT_MOBILErs )  // grosses chenilles ?
-   {
-       pos[2] = D3DVECTOR(-5.0f, 5.2f,  2.5f);
-       pos[3] = D3DVECTOR(-5.0f, 5.2f, -2.5f);
-   }
-   if ( m_type == OBJECT_MOBILEsa )  // sous-marin ?
+   // Lens arrières rouges+blanche.
+   if ( m_type == OBJECT_CAR )
    {
-       pos[2] = D3DVECTOR(-3.6f, 4.0f,  2.0f);
-       pos[3] = D3DVECTOR(-3.6f, 4.0f, -2.0f);
+       pos[2] = m_character.lightSL;
+       pos[3] = m_character.lightSR;
+       pos[4] = m_character.lightRL;
+       pos[5] = m_character.lightRR;
    }
    if ( m_type == OBJECT_MOBILEtg )  // cible ?
    {
        pos[2] = D3DVECTOR(-2.4f, 6.5f,  2.0f);
        pos[3] = D3DVECTOR(-2.4f, 6.5f, -2.0f);
+       pos[4] = D3DVECTOR(-2.4f, 6.0f,  2.0f);
+       pos[5] = D3DVECTOR(-2.4f, 6.0f, -2.0f);
    }
-   if ( m_type == OBJECT_MOBILEdr )  // dessinateur ?
-   {
-       pos[2] = D3DVECTOR(-5.3f, 2.7f,  1.8f);
-       pos[3] = D3DVECTOR(-5.3f, 2.7f, -1.8f);
-   }
+
+   // Lens sur l'antenne.
+   pos[6] = m_character.antenna;
 
    angle = RetAngleY(0)/PI;
 
@@ -7404,6 +7760,9 @@ void CObject::UpdateSelectParticule()
    zoom[1] = 1.0f;
    zoom[2] = 1.0f;
    zoom[3] = 1.0f;
+   zoom[4] = 1.0f;
+   zoom[5] = 1.0f;
+   zoom[6] = 1.0f;
 
    if ( IsProgram() &&  // programme en cours ?
         Mod(m_aTime, 0.7f) < 0.3f )
@@ -7412,10 +7771,49 @@ void CObject::UpdateSelectParticule()
        zoom[1] = 0.0f;
        zoom[2] = 0.0f;
        zoom[3] = 0.0f;
+       zoom[4] = 0.0f;
+       zoom[5] = 0.0f;
+   }
+
+   if ( m_type == OBJECT_CAR )
+   {
+       if ( m_physics != 0 )
+       {
+           for ( i=0 ; i<6 ; i++ )
+           {
+               if ( !m_physics->RetLight(i) )  zoom[i] = 0.0f;  // éteint
+               if ( m_main->RetFixScene() && (i==2 || i==3) )  zoom[i] = 0.5f;
+           }
+       }
+
+       if ( Mod(m_aTime, 0.3f) < 0.15f )  zoom[6] = 0.0f;
+       if ( m_bDead )  zoom[6] = 0.0f;
+   }
+
+   if ( m_type == OBJECT_TRAX )
+   {
+       zoom[0] = 4.0f;
+       zoom[1] = 4.0f;
+       zoom[2] = 0.0f;
+       zoom[3] = 0.0f;
+       zoom[4] = 0.0f;
+       zoom[5] = 0.0f;
+       zoom[6] = 0.0f;
+   }
+
+   if ( m_type == OBJECT_UFO )
+   {
+       zoom[0] = 2.0f;
+       zoom[1] = 2.0f;
+       zoom[2] = 0.0f;
+       zoom[3] = 0.0f;
+       zoom[4] = 0.0f;
+       zoom[5] = 0.0f;
+       zoom[6] = 0.0f;
    }
 
    // Met à jour tous les lens.
-   for ( i=0 ; i<4 ; i++ )
+   for ( i=0 ; i<7 ; i++ )
    {
        pos[i] = Transform(m_objectPart[0].matWorld, pos[i]);
        dim[i].y = dim[i].x;
@@ -7500,100 +7898,36 @@ BOOL CObject::GetTooltipName(char* name)
 }
 
 
-// Ajoute l'objet précédemment sélectionné dans la liste.
-
-void CObject::AddDeselList(CObject* pObj)
-{
-   int     i;
-
-   if ( m_totalDesectList >= OBJECTMAXDESELLIST )
-   {
-       for ( i=0 ; i<OBJECTMAXDESELLIST-1 ; i++ )
-       {
-           m_objectDeselectList[i] = m_objectDeselectList[i+1];
-       }
-       m_totalDesectList --;
-   }
-
-   m_objectDeselectList[m_totalDesectList++] = pObj;
-}
-
-// Enlève l'objet précédemment sélectionné dans la liste.
-
-CObject* CObject::SubDeselList()
-{
-   if ( m_totalDesectList == 0 )  return 0;
-
-   return m_objectDeselectList[--m_totalDesectList];
-}
-
-// Supprime un objet s'il est référencé dans la liste.
-
-void CObject::DeleteDeselList(CObject* pObj)
-{
-   int     i, j;
-
-   j = 0;
-   for ( i=0 ; i<m_totalDesectList ; i++ )
-   {
-       if ( m_objectDeselectList[i] != pObj )
-       {
-           m_objectDeselectList[j++] = m_objectDeselectList[i];
-       }
-   }
-   m_totalDesectList = j;
-}
-
-
+// Gestion du mode d'enregistrement.
 
-// Gestion de l'état du crayon du robot dessinateur.
-
-BOOL CObject::RetTraceDown()
+void CObject::SetRecorderRecordMode(BOOL bRecord)
 {
-   CMotionVehicle* mv;
-   if ( m_motion == 0 )  return FALSE;
-   mv = (CMotionVehicle*)m_motion;
-   return mv->RetTraceDown();
+   m_bRecorderRecord = bRecord;
 }
 
-void CObject::SetTraceDown(BOOL bDown)
+BOOL CObject::RetRecorderRecordMode()
 {
-   CMotionVehicle* mv;
-   if ( m_motion == 0 )  return;
-   mv = (CMotionVehicle*)m_motion;
-   mv->SetTraceDown(bDown);
+   return m_bRecorderRecord;
 }
 
-int CObject::RetTraceColor()
+void CObject::SetRecorderPlayMode(BOOL bPlay)
 {
-   CMotionVehicle* mv;
-   if ( m_motion == 0 )  return 0;
-   mv = (CMotionVehicle*)m_motion;
-   return mv->RetTraceColor();
+   m_bRecorderPlay = bPlay;
 }
 
-void CObject::SetTraceColor(int color)
+BOOL CObject::RetRecorderPlayMode()
 {
-   CMotionVehicle* mv;
-   if ( m_motion == 0 )  return;
-   mv = (CMotionVehicle*)m_motion;
-   mv->SetTraceColor(color);
+   return m_bRecorderPlay;
 }
 
-float CObject::RetTraceWidth()
+void CObject::SetRecorder(CRecorder* recorder)
 {
-   CMotionVehicle* mv;
-   if ( m_motion == 0 )  return 0.0f;
-   mv = (CMotionVehicle*)m_motion;
-   return mv->RetTraceWidth();
+   m_recorder = recorder;
 }
 
-void CObject::SetTraceWidth(float width)
+CRecorder* CObject::RetRecorder()
 {
-   CMotionVehicle* mv;
-   if ( m_motion == 0 )  return;
-   mv = (CMotionVehicle*)m_motion;
-   mv->SetTraceWidth(width);
+   return m_recorder;
 }
 
 
